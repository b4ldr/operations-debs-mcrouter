// @generated by Thrift. This file is probably not the place you want to edit!

#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]

pub use self::errors::*;
pub use self::types::*;

pub mod types {
    #![allow(clippy::redundant_closure)]

    use fbthrift::{
        Deserialize, GetTType, ProtocolReader, ProtocolWriter, Serialize, TType,
    };

    pub type containerTypedef = std::collections::BTreeMap<i16, String>;

    #[derive(Clone, Debug, PartialEq)]
    pub enum ComplexUnion {
        intValue(i64),
        stringValue(String),
        intListValue(Vec<i64>),
        stringListValue(Vec<String>),
        typedefValue(crate::types::containerTypedef),
        stringRef(String),
        UnknownField(i32),
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ListUnion {
        intListValue(Vec<i64>),
        stringListValue(Vec<String>),
        UnknownField(i32),
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum DataUnion {
        binaryData(Vec<u8>),
        stringData(String),
        UnknownField(i32),
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct Val {
        pub strVal: String,
        pub intVal: i32,
        pub typedefValue: crate::types::containerTypedef,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub enum ValUnion {
        v1(crate::types::Val),
        v2(crate::types::Val),
        UnknownField(i32),
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum VirtualComplexUnion {
        thingOne(String),
        thingTwo(String),
        UnknownField(i32),
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct NonCopyableStruct {
        pub num: i64,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub enum NonCopyableUnion {
        s(crate::types::NonCopyableStruct),
        UnknownField(i32),
    }



    impl Default for ComplexUnion {
        fn default() -> Self {
            Self::UnknownField(-1)
        }
    }

    impl GetTType for ComplexUnion {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for ComplexUnion {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ComplexUnion");
            match self {
                ComplexUnion::intValue(inner) => {
                    p.write_field_begin("intValue", TType::I64, 1);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                ComplexUnion::stringValue(inner) => {
                    p.write_field_begin("stringValue", TType::String, 5);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                ComplexUnion::intListValue(inner) => {
                    p.write_field_begin("intListValue", TType::List, 2);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                ComplexUnion::stringListValue(inner) => {
                    p.write_field_begin("stringListValue", TType::List, 3);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                ComplexUnion::typedefValue(inner) => {
                    p.write_field_begin("typedefValue", TType::Map, 9);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                ComplexUnion::stringRef(inner) => {
                    p.write_field_begin("stringRef", TType::String, 14);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                ComplexUnion::UnknownField(x) => {
                    p.write_field_begin("UnknownField", TType::I32, *x as i16);
                    x.write(p);
                    p.write_field_end();
                }
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for ComplexUnion {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let _ = p.read_struct_begin(|_| ())?;
            let mut once = false;
            let mut alt = None;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32, once) {
                    (TType::Stop, _, _) => break,
                    (TType::I64, 1, false) => {
                        once = true;
                        alt = Some(ComplexUnion::intValue(Deserialize::read(p)?));
                    }
                    (TType::String, 5, false) => {
                        once = true;
                        alt = Some(ComplexUnion::stringValue(Deserialize::read(p)?));
                    }
                    (TType::List, 2, false) => {
                        once = true;
                        alt = Some(ComplexUnion::intListValue(Deserialize::read(p)?));
                    }
                    (TType::List, 3, false) => {
                        once = true;
                        alt = Some(ComplexUnion::stringListValue(Deserialize::read(p)?));
                    }
                    (TType::Map, 9, false) => {
                        once = true;
                        alt = Some(ComplexUnion::typedefValue(Deserialize::read(p)?));
                    }
                    (TType::String, 14, false) => {
                        once = true;
                        alt = Some(ComplexUnion::stringRef(Deserialize::read(p)?));
                    }
                    (fty, _, false) => p.skip(fty)?,
                    (badty, badid, true) => return Err(From::from(::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                        format!(
                            "unwanted extra union {} field ty {:?} id {}",
                            "ComplexUnion",
                            badty,
                            badid,
                        ),
                    ))),
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(alt.unwrap_or_default())
        }
    }


    impl Default for ListUnion {
        fn default() -> Self {
            Self::UnknownField(-1)
        }
    }

    impl GetTType for ListUnion {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for ListUnion {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ListUnion");
            match self {
                ListUnion::intListValue(inner) => {
                    p.write_field_begin("intListValue", TType::List, 2);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                ListUnion::stringListValue(inner) => {
                    p.write_field_begin("stringListValue", TType::List, 3);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                ListUnion::UnknownField(x) => {
                    p.write_field_begin("UnknownField", TType::I32, *x as i16);
                    x.write(p);
                    p.write_field_end();
                }
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for ListUnion {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let _ = p.read_struct_begin(|_| ())?;
            let mut once = false;
            let mut alt = None;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32, once) {
                    (TType::Stop, _, _) => break,
                    (TType::List, 2, false) => {
                        once = true;
                        alt = Some(ListUnion::intListValue(Deserialize::read(p)?));
                    }
                    (TType::List, 3, false) => {
                        once = true;
                        alt = Some(ListUnion::stringListValue(Deserialize::read(p)?));
                    }
                    (fty, _, false) => p.skip(fty)?,
                    (badty, badid, true) => return Err(From::from(::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                        format!(
                            "unwanted extra union {} field ty {:?} id {}",
                            "ListUnion",
                            badty,
                            badid,
                        ),
                    ))),
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(alt.unwrap_or_default())
        }
    }


    impl Default for DataUnion {
        fn default() -> Self {
            Self::UnknownField(-1)
        }
    }

    impl GetTType for DataUnion {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for DataUnion {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("DataUnion");
            match self {
                DataUnion::binaryData(inner) => {
                    p.write_field_begin("binaryData", TType::String, 1);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                DataUnion::stringData(inner) => {
                    p.write_field_begin("stringData", TType::String, 2);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                DataUnion::UnknownField(x) => {
                    p.write_field_begin("UnknownField", TType::I32, *x as i16);
                    x.write(p);
                    p.write_field_end();
                }
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for DataUnion {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let _ = p.read_struct_begin(|_| ())?;
            let mut once = false;
            let mut alt = None;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32, once) {
                    (TType::Stop, _, _) => break,
                    (TType::String, 1, false) => {
                        once = true;
                        alt = Some(DataUnion::binaryData(Deserialize::read(p)?));
                    }
                    (TType::String, 2, false) => {
                        once = true;
                        alt = Some(DataUnion::stringData(Deserialize::read(p)?));
                    }
                    (fty, _, false) => p.skip(fty)?,
                    (badty, badid, true) => return Err(From::from(::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                        format!(
                            "unwanted extra union {} field ty {:?} id {}",
                            "DataUnion",
                            badty,
                            badid,
                        ),
                    ))),
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(alt.unwrap_or_default())
        }
    }

    impl Default for self::Val {
        fn default() -> Self {
            Self {
                strVal: Default::default(),
                intVal: Default::default(),
                typedefValue: Default::default(),
            }
        }
    }

    impl GetTType for self::Val {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::Val {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("Val");
            p.write_field_begin("strVal", TType::String, 1);
            Serialize::write(&self.strVal, p);
            p.write_field_end();
            p.write_field_begin("intVal", TType::I32, 2);
            Serialize::write(&self.intVal, p);
            p.write_field_end();
            p.write_field_begin("typedefValue", TType::Map, 9);
            Serialize::write(&self.typedefValue, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::Val {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_strVal = None;
            let mut field_intVal = None;
            let mut field_typedefValue = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::String, 1) => field_strVal = Some(Deserialize::read(p)?),
                    (TType::I32, 2) => field_intVal = Some(Deserialize::read(p)?),
                    (TType::Map, 9) => field_typedefValue = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                strVal: field_strVal.unwrap_or_default(),
                intVal: field_intVal.unwrap_or_default(),
                typedefValue: field_typedefValue.unwrap_or_default(),
            })
        }
    }



    impl Default for ValUnion {
        fn default() -> Self {
            Self::UnknownField(-1)
        }
    }

    impl GetTType for ValUnion {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for ValUnion {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ValUnion");
            match self {
                ValUnion::v1(inner) => {
                    p.write_field_begin("v1", TType::Struct, 1);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                ValUnion::v2(inner) => {
                    p.write_field_begin("v2", TType::Struct, 2);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                ValUnion::UnknownField(x) => {
                    p.write_field_begin("UnknownField", TType::I32, *x as i16);
                    x.write(p);
                    p.write_field_end();
                }
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for ValUnion {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let _ = p.read_struct_begin(|_| ())?;
            let mut once = false;
            let mut alt = None;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32, once) {
                    (TType::Stop, _, _) => break,
                    (TType::Struct, 1, false) => {
                        once = true;
                        alt = Some(ValUnion::v1(Deserialize::read(p)?));
                    }
                    (TType::Struct, 2, false) => {
                        once = true;
                        alt = Some(ValUnion::v2(Deserialize::read(p)?));
                    }
                    (fty, _, false) => p.skip(fty)?,
                    (badty, badid, true) => return Err(From::from(::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                        format!(
                            "unwanted extra union {} field ty {:?} id {}",
                            "ValUnion",
                            badty,
                            badid,
                        ),
                    ))),
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(alt.unwrap_or_default())
        }
    }


    impl Default for VirtualComplexUnion {
        fn default() -> Self {
            Self::UnknownField(-1)
        }
    }

    impl GetTType for VirtualComplexUnion {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for VirtualComplexUnion {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("VirtualComplexUnion");
            match self {
                VirtualComplexUnion::thingOne(inner) => {
                    p.write_field_begin("thingOne", TType::String, 1);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                VirtualComplexUnion::thingTwo(inner) => {
                    p.write_field_begin("thingTwo", TType::String, 2);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                VirtualComplexUnion::UnknownField(x) => {
                    p.write_field_begin("UnknownField", TType::I32, *x as i16);
                    x.write(p);
                    p.write_field_end();
                }
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for VirtualComplexUnion {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let _ = p.read_struct_begin(|_| ())?;
            let mut once = false;
            let mut alt = None;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32, once) {
                    (TType::Stop, _, _) => break,
                    (TType::String, 1, false) => {
                        once = true;
                        alt = Some(VirtualComplexUnion::thingOne(Deserialize::read(p)?));
                    }
                    (TType::String, 2, false) => {
                        once = true;
                        alt = Some(VirtualComplexUnion::thingTwo(Deserialize::read(p)?));
                    }
                    (fty, _, false) => p.skip(fty)?,
                    (badty, badid, true) => return Err(From::from(::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                        format!(
                            "unwanted extra union {} field ty {:?} id {}",
                            "VirtualComplexUnion",
                            badty,
                            badid,
                        ),
                    ))),
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(alt.unwrap_or_default())
        }
    }

    impl Default for self::NonCopyableStruct {
        fn default() -> Self {
            Self {
                num: Default::default(),
            }
        }
    }

    impl GetTType for self::NonCopyableStruct {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::NonCopyableStruct {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("NonCopyableStruct");
            p.write_field_begin("num", TType::I64, 1);
            Serialize::write(&self.num, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::NonCopyableStruct {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_num = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I64, 1) => field_num = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                num: field_num.unwrap_or_default(),
            })
        }
    }



    impl Default for NonCopyableUnion {
        fn default() -> Self {
            Self::UnknownField(-1)
        }
    }

    impl GetTType for NonCopyableUnion {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for NonCopyableUnion {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("NonCopyableUnion");
            match self {
                NonCopyableUnion::s(inner) => {
                    p.write_field_begin("s", TType::Struct, 1);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                NonCopyableUnion::UnknownField(x) => {
                    p.write_field_begin("UnknownField", TType::I32, *x as i16);
                    x.write(p);
                    p.write_field_end();
                }
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for NonCopyableUnion {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let _ = p.read_struct_begin(|_| ())?;
            let mut once = false;
            let mut alt = None;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32, once) {
                    (TType::Stop, _, _) => break,
                    (TType::Struct, 1, false) => {
                        once = true;
                        alt = Some(NonCopyableUnion::s(Deserialize::read(p)?));
                    }
                    (fty, _, false) => p.skip(fty)?,
                    (badty, badid, true) => return Err(From::from(::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                        format!(
                            "unwanted extra union {} field ty {:?} id {}",
                            "NonCopyableUnion",
                            badty,
                            badid,
                        ),
                    ))),
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(alt.unwrap_or_default())
        }
    }
}

pub mod errors {
}
