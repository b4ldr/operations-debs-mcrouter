#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.bytes cimport PyBytes_AsStringAndSize
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types import (
    NOTSET as __NOTSET,
    NumberType as __NumberType,
    StructSpec as __StructSpec,
    ListSpec as __ListSpec,
    SetSpec as __SetSpec,
    MapSpec as __MapSpec,
    FieldSpec as __FieldSpec,
    StructType as __StructType,
    Qualifier as __Qualifier,
)
from thrift.py3.types cimport (
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    constant_shared_ptr,
    default_inst,
)
cimport thrift.py3.std_libcpp as std_libcpp
from thrift.py3.serializer import Protocol as __Protocol
cimport thrift.py3.serializer as serializer
from thrift.py3.serializer import deserialize, serialize
import folly.iobuf as __iobuf
from folly.optional cimport cOptional

import sys
import types as _py_types
import itertools
from collections.abc import Sequence, Set, Mapping, Iterable
import warnings
import weakref as __weakref
import builtins as _builtins

cdef object __EmptyEnumEnumInstances = None  # Set[EmptyEnum]
cdef object __EmptyEnumEnumMembers = {}      # Dict[str, EmptyEnum]
cdef object __EmptyEnumEnumUniqueValues = dict()    # Dict[int, EmptyEnum]

@__cython.internal
@__cython.auto_pickle(False)
cdef class __EmptyEnumMeta(type):
    def __call__(cls, value):
        cdef int cvalue
        if isinstance(value, cls):
            return value
        if isinstance(value, int):
            cvalue = value

        raise ValueError(f'{value} is not a valid EmptyEnum')

    def __getitem__(cls, name):
        return __EmptyEnumEnumMembers[name]

    def __dir__(cls):
        return ['__class__', '__doc__', '__members__', '__module__',
        ]

    def __iter__(cls):
        return iter(__EmptyEnumEnumUniqueValues.values())

    def __reversed__(cls):
        return reversed(iter(cls))

    def __contains__(cls, item):
        if not isinstance(item, cls):
            return False
        return item in __EmptyEnumEnumInstances

    def __len__(cls):
        return len(__EmptyEnumEnumInstances)




@__cython.final
@__cython.auto_pickle(False)
cdef class EmptyEnum(thrift.py3.types.CompiledEnum):
    __members__ = thrift.py3.types.MappingProxyType(__EmptyEnumEnumMembers)

    def __cinit__(self, value, name):
        if __EmptyEnumEnumInstances is not None:
            raise TypeError('__new__ is disabled in the interest of type-safety')
        self.value = value
        self.name = name
        self.__hash = hash(name)
        self.__str = f"EmptyEnum.{name}"
        self.__repr = f"<{self.__str}: {value}>"

    def __repr__(self):
        return self.__repr

    def __str__(self):
        return self.__str

    def __int__(self):
        return self.value

    def __eq__(self, other):
        if not isinstance(other, EmptyEnum):
            warnings.warn(f"comparison not supported between instances of { EmptyEnum } and {type(other)}", RuntimeWarning, stacklevel=2)
            return False
        return self is other

    def __hash__(self):
        return self.__hash

    def __reduce__(self):
        return EmptyEnum, (self.value,)


__SetMetaClass(<PyTypeObject*> EmptyEnum, <PyTypeObject*> __EmptyEnumMeta)
__EmptyEnumEnumInstances = set(__EmptyEnumEnumUniqueValues.values())


cdef inline cEmptyEnum EmptyEnum_to_cpp(EmptyEnum value):
    cdef int cvalue = value.value
    pass
cdef object __MyEnumEnumInstances = None  # Set[MyEnum]
cdef object __MyEnumEnumMembers = {}      # Dict[str, MyEnum]
cdef object __MyEnumEnumUniqueValues = dict()    # Dict[int, MyEnum]

@__cython.internal
@__cython.auto_pickle(False)
cdef class __MyEnumMeta(type):
    def __call__(cls, value):
        cdef int cvalue
        if isinstance(value, cls):
            return value
        if isinstance(value, int):
            cvalue = value
            if cvalue == 1:
                return MyEnum.ONE
            elif cvalue == 2:
                return MyEnum.TWO

        raise ValueError(f'{value} is not a valid MyEnum')

    def __getitem__(cls, name):
        return __MyEnumEnumMembers[name]

    def __dir__(cls):
        return ['__class__', '__doc__', '__members__', '__module__',
        'ONE',
        'TWO',
        ]

    def __iter__(cls):
        return iter(__MyEnumEnumUniqueValues.values())

    def __reversed__(cls):
        return reversed(iter(cls))

    def __contains__(cls, item):
        if not isinstance(item, cls):
            return False
        return item in __MyEnumEnumInstances

    def __len__(cls):
        return len(__MyEnumEnumInstances)


cdef __MyEnum_unique_instance(int value, str name):
    inst = __MyEnumEnumUniqueValues.get(value)
    if inst is None:
        inst = __MyEnumEnumUniqueValues[value] = MyEnum.__new__(MyEnum, value, name)
    __MyEnumEnumMembers[name] = inst
    return inst


@__cython.final
@__cython.auto_pickle(False)
cdef class MyEnum(thrift.py3.types.CompiledEnum):
    ONE = __MyEnum_unique_instance(1, "ONE")
    TWO = __MyEnum_unique_instance(2, "TWO")
    __members__ = thrift.py3.types.MappingProxyType(__MyEnumEnumMembers)

    def __cinit__(self, value, name):
        if __MyEnumEnumInstances is not None:
            raise TypeError('__new__ is disabled in the interest of type-safety')
        self.value = value
        self.name = name
        self.__hash = hash(name)
        self.__str = f"MyEnum.{name}"
        self.__repr = f"<{self.__str}: {value}>"

    def __repr__(self):
        return self.__repr

    def __str__(self):
        return self.__str

    def __int__(self):
        return self.value

    def __eq__(self, other):
        if not isinstance(other, MyEnum):
            warnings.warn(f"comparison not supported between instances of { MyEnum } and {type(other)}", RuntimeWarning, stacklevel=2)
            return False
        return self is other

    def __hash__(self):
        return self.__hash

    def __reduce__(self):
        return MyEnum, (self.value,)


__SetMetaClass(<PyTypeObject*> MyEnum, <PyTypeObject*> __MyEnumMeta)
__MyEnumEnumInstances = set(__MyEnumEnumUniqueValues.values())


cdef inline cMyEnum MyEnum_to_cpp(MyEnum value):
    cdef int cvalue = value.value
    if cvalue == 1:
        return MyEnum__ONE
    elif cvalue == 2:
        return MyEnum__TWO
cdef object __MyBigEnumEnumInstances = None  # Set[MyBigEnum]
cdef object __MyBigEnumEnumMembers = {}      # Dict[str, MyBigEnum]
cdef object __MyBigEnumEnumUniqueValues = dict()    # Dict[int, MyBigEnum]

@__cython.internal
@__cython.auto_pickle(False)
cdef class __MyBigEnumMeta(type):
    def __call__(cls, value):
        cdef int cvalue
        if isinstance(value, cls):
            return value
        if isinstance(value, int):
            cvalue = value
            if cvalue == 0:
                return MyBigEnum.UNKNOWN
            elif cvalue == 1:
                return MyBigEnum.ONE
            elif cvalue == 2:
                return MyBigEnum.TWO
            elif cvalue == 3:
                return MyBigEnum.THREE
            elif cvalue == 4:
                return MyBigEnum.FOUR
            elif cvalue == 5:
                return MyBigEnum.FIVE
            elif cvalue == 6:
                return MyBigEnum.SIX
            elif cvalue == 7:
                return MyBigEnum.SEVEN
            elif cvalue == 8:
                return MyBigEnum.EIGHT
            elif cvalue == 9:
                return MyBigEnum.NINE
            elif cvalue == 10:
                return MyBigEnum.TEN
            elif cvalue == 11:
                return MyBigEnum.ELEVEN
            elif cvalue == 12:
                return MyBigEnum.TWELVE
            elif cvalue == 13:
                return MyBigEnum.THIRTEEN
            elif cvalue == 14:
                return MyBigEnum.FOURTEEN
            elif cvalue == 15:
                return MyBigEnum.FIFTEEN
            elif cvalue == 16:
                return MyBigEnum.SIXTEEN
            elif cvalue == 17:
                return MyBigEnum.SEVENTEEN
            elif cvalue == 18:
                return MyBigEnum.EIGHTEEN
            elif cvalue == 19:
                return MyBigEnum.NINETEEN

        raise ValueError(f'{value} is not a valid MyBigEnum')

    def __getitem__(cls, name):
        return __MyBigEnumEnumMembers[name]

    def __dir__(cls):
        return ['__class__', '__doc__', '__members__', '__module__',
        'UNKNOWN',
        'ONE',
        'TWO',
        'THREE',
        'FOUR',
        'FIVE',
        'SIX',
        'SEVEN',
        'EIGHT',
        'NINE',
        'TEN',
        'ELEVEN',
        'TWELVE',
        'THIRTEEN',
        'FOURTEEN',
        'FIFTEEN',
        'SIXTEEN',
        'SEVENTEEN',
        'EIGHTEEN',
        'NINETEEN',
        ]

    def __iter__(cls):
        return iter(__MyBigEnumEnumUniqueValues.values())

    def __reversed__(cls):
        return reversed(iter(cls))

    def __contains__(cls, item):
        if not isinstance(item, cls):
            return False
        return item in __MyBigEnumEnumInstances

    def __len__(cls):
        return len(__MyBigEnumEnumInstances)


cdef __MyBigEnum_unique_instance(int value, str name):
    inst = __MyBigEnumEnumUniqueValues.get(value)
    if inst is None:
        inst = __MyBigEnumEnumUniqueValues[value] = MyBigEnum.__new__(MyBigEnum, value, name)
    __MyBigEnumEnumMembers[name] = inst
    return inst


@__cython.final
@__cython.auto_pickle(False)
cdef class MyBigEnum(thrift.py3.types.CompiledEnum):
    UNKNOWN = __MyBigEnum_unique_instance(0, "UNKNOWN")
    ONE = __MyBigEnum_unique_instance(1, "ONE")
    TWO = __MyBigEnum_unique_instance(2, "TWO")
    THREE = __MyBigEnum_unique_instance(3, "THREE")
    FOUR = __MyBigEnum_unique_instance(4, "FOUR")
    FIVE = __MyBigEnum_unique_instance(5, "FIVE")
    SIX = __MyBigEnum_unique_instance(6, "SIX")
    SEVEN = __MyBigEnum_unique_instance(7, "SEVEN")
    EIGHT = __MyBigEnum_unique_instance(8, "EIGHT")
    NINE = __MyBigEnum_unique_instance(9, "NINE")
    TEN = __MyBigEnum_unique_instance(10, "TEN")
    ELEVEN = __MyBigEnum_unique_instance(11, "ELEVEN")
    TWELVE = __MyBigEnum_unique_instance(12, "TWELVE")
    THIRTEEN = __MyBigEnum_unique_instance(13, "THIRTEEN")
    FOURTEEN = __MyBigEnum_unique_instance(14, "FOURTEEN")
    FIFTEEN = __MyBigEnum_unique_instance(15, "FIFTEEN")
    SIXTEEN = __MyBigEnum_unique_instance(16, "SIXTEEN")
    SEVENTEEN = __MyBigEnum_unique_instance(17, "SEVENTEEN")
    EIGHTEEN = __MyBigEnum_unique_instance(18, "EIGHTEEN")
    NINETEEN = __MyBigEnum_unique_instance(19, "NINETEEN")
    __members__ = thrift.py3.types.MappingProxyType(__MyBigEnumEnumMembers)

    def __cinit__(self, value, name):
        if __MyBigEnumEnumInstances is not None:
            raise TypeError('__new__ is disabled in the interest of type-safety')
        self.value = value
        self.name = name
        self.__hash = hash(name)
        self.__str = f"MyBigEnum.{name}"
        self.__repr = f"<{self.__str}: {value}>"

    def __repr__(self):
        return self.__repr

    def __str__(self):
        return self.__str

    def __int__(self):
        return self.value

    def __eq__(self, other):
        if not isinstance(other, MyBigEnum):
            warnings.warn(f"comparison not supported between instances of { MyBigEnum } and {type(other)}", RuntimeWarning, stacklevel=2)
            return False
        return self is other

    def __hash__(self):
        return self.__hash

    def __reduce__(self):
        return MyBigEnum, (self.value,)


__SetMetaClass(<PyTypeObject*> MyBigEnum, <PyTypeObject*> __MyBigEnumMeta)
__MyBigEnumEnumInstances = set(__MyBigEnumEnumUniqueValues.values())


cdef inline cMyBigEnum MyBigEnum_to_cpp(MyBigEnum value):
    cdef int cvalue = value.value
    if cvalue == 0:
        return MyBigEnum__UNKNOWN
    elif cvalue == 1:
        return MyBigEnum__ONE
    elif cvalue == 2:
        return MyBigEnum__TWO
    elif cvalue == 3:
        return MyBigEnum__THREE
    elif cvalue == 4:
        return MyBigEnum__FOUR
    elif cvalue == 5:
        return MyBigEnum__FIVE
    elif cvalue == 6:
        return MyBigEnum__SIX
    elif cvalue == 7:
        return MyBigEnum__SEVEN
    elif cvalue == 8:
        return MyBigEnum__EIGHT
    elif cvalue == 9:
        return MyBigEnum__NINE
    elif cvalue == 10:
        return MyBigEnum__TEN
    elif cvalue == 11:
        return MyBigEnum__ELEVEN
    elif cvalue == 12:
        return MyBigEnum__TWELVE
    elif cvalue == 13:
        return MyBigEnum__THIRTEEN
    elif cvalue == 14:
        return MyBigEnum__FOURTEEN
    elif cvalue == 15:
        return MyBigEnum__FIFTEEN
    elif cvalue == 16:
        return MyBigEnum__SIXTEEN
    elif cvalue == 17:
        return MyBigEnum__SEVENTEEN
    elif cvalue == 18:
        return MyBigEnum__EIGHTEEN
    elif cvalue == 19:
        return MyBigEnum__NINETEEN

@__cython.auto_pickle(False)
cdef class MyStruct(thrift.py3.types.Struct):

    def __init__(
        MyStruct self, *,
        MyEnum myEnum=None,
        MyBigEnum myBigEnum=None
    ):
        self._cpp_obj = move(MyStruct._make_instance(
          NULL,
          NULL,
          myEnum,
          myBigEnum,
        ))

    def __call__(
        MyStruct self,
        myEnum=__NOTSET,
        myBigEnum=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[2] __isNOTSET  # so make_instance is typed

        changes = False
        if myEnum is ___NOTSET:
            __isNOTSET[0] = True
            myEnum = None
        else:
            __isNOTSET[0] = False
            changes = True

        if myBigEnum is ___NOTSET:
            __isNOTSET[1] = True
            myBigEnum = None
        else:
            __isNOTSET[1] = False
            changes = True


        if not changes:
            return self

        if myEnum is not None:
            if not isinstance(myEnum, MyEnum):
                raise TypeError(f'field myEnum value: { myEnum !r} is not of the enum type { MyEnum }.')

        if myBigEnum is not None:
            if not isinstance(myBigEnum, MyBigEnum):
                raise TypeError(f'field myBigEnum value: { myBigEnum !r} is not of the enum type { MyBigEnum }.')

        inst = <MyStruct>MyStruct.__new__(MyStruct)
        inst._cpp_obj = move(MyStruct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          myEnum,
          myBigEnum,
        ))
        return inst

    @staticmethod
    cdef unique_ptr[cMyStruct] _make_instance(
        cMyStruct* base_instance,
        bint* __isNOTSET,
        MyEnum myEnum ,
        MyBigEnum myBigEnum 
    ) except *:
        cdef unique_ptr[cMyStruct] c_inst
        if base_instance:
            c_inst = make_unique[cMyStruct](deref(base_instance))
        else:
            c_inst = make_unique[cMyStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and myEnum is None:
                deref(c_inst).myEnum = default_inst[cMyStruct]().myEnum
                deref(c_inst).__isset.myEnum = False
                pass

            if not __isNOTSET[1] and myBigEnum is None:
                deref(c_inst).myBigEnum = default_inst[cMyStruct]().myBigEnum
                deref(c_inst).__isset.myBigEnum = False
                pass

        if myEnum is not None:
            deref(c_inst).myEnum = MyEnum_to_cpp(myEnum)
            deref(c_inst).__isset.myEnum = True
        if myBigEnum is not None:
            deref(c_inst).myBigEnum = MyBigEnum_to_cpp(myBigEnum)
            deref(c_inst).__isset.myBigEnum = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return move_unique(c_inst)

    def __iter__(self):
        yield 'myEnum', self.myEnum
        yield 'myBigEnum', self.myBigEnum

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cMyStruct] cpp_obj):
        inst = <MyStruct>MyStruct.__new__(MyStruct)
        inst._cpp_obj = move_shared(cpp_obj)
        return inst

    @property
    def myEnum(self):

        return translate_cpp_enum_to_python(MyEnum, <int>(deref(self._cpp_obj).myEnum))

    @property
    def myBigEnum(self):

        return translate_cpp_enum_to_python(MyBigEnum, <int>(deref(self._cpp_obj).myBigEnum))


    def __hash__(MyStruct self):
        if not self.__hash:
            self.__hash = hash((
            self.myEnum,
            self.myBigEnum,
            ))
        return self.__hash

    def __repr__(MyStruct self):
        return f'MyStruct(myEnum={repr(self.myEnum)}, myBigEnum={repr(self.myBigEnum)})'
    def __copy__(MyStruct self):
        cdef shared_ptr[cMyStruct] cpp_obj = make_shared[cMyStruct](
            deref(self._cpp_obj)
        )
        return MyStruct.create(move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, MyStruct) and
                isinstance(other, MyStruct)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cMyStruct* cself = (<MyStruct>self)._cpp_obj.get()
        cdef cMyStruct* cother = (<MyStruct>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
      defaults = MyStruct.create(constant_shared_ptr[cMyStruct](default_inst[cMyStruct]()))
      return __StructSpec(
        name="MyStruct",
        kind=__StructType.STRUCT,
        fields=[
          __FieldSpec(
  name="myEnum",
  type=MyEnum,
  kind=None,
  qualifier=__Qualifier.NONE,
  default=None,
  annotations=_py_types.MappingProxyType({
  }),
),
                __FieldSpec(
  name="myBigEnum",
  type=MyBigEnum,
  kind=None,
  qualifier=__Qualifier.NONE,
  default=defaults.myBigEnum,
  annotations=_py_types.MappingProxyType({
  }),
),
          ],
        annotations=_py_types.MappingProxyType({
        }),
      )
    cdef __iobuf.IOBuf _serialize(MyStruct self, proto):
        cdef __iobuf.cIOBufQueue queue = __iobuf.cIOBufQueue(__iobuf.cacheChainLength())
        cdef cMyStruct* cpp_obj = self._cpp_obj.get()
        if proto is __Protocol.COMPACT:
            with nogil:
                serializer.CompactSerialize[cMyStruct](deref(cpp_obj), &queue, serializer.SHARE_EXTERNAL_BUFFER)
        elif proto is __Protocol.BINARY:
            with nogil:
                serializer.BinarySerialize[cMyStruct](deref(cpp_obj), &queue, serializer.SHARE_EXTERNAL_BUFFER)
        elif proto is __Protocol.JSON:
            with nogil:
                serializer.JSONSerialize[cMyStruct](deref(cpp_obj), &queue, serializer.SHARE_EXTERNAL_BUFFER)
        elif proto is __Protocol.COMPACT_JSON:
            with nogil:
                serializer.CompactJSONSerialize[cMyStruct](deref(cpp_obj), &queue, serializer.SHARE_EXTERNAL_BUFFER)
        return __iobuf.from_unique_ptr(queue.move())

    cdef cuint32_t _deserialize(MyStruct self, const __iobuf.cIOBuf* buf, proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyStruct]()
        cdef cMyStruct* cpp_obj = self._cpp_obj.get()
        if proto is __Protocol.COMPACT:
            with nogil:
                needed = serializer.CompactDeserialize[cMyStruct](buf, deref(cpp_obj), serializer.SHARE_EXTERNAL_BUFFER)
        elif proto is __Protocol.BINARY:
            with nogil:
                needed = serializer.BinaryDeserialize[cMyStruct](buf, deref(cpp_obj), serializer.SHARE_EXTERNAL_BUFFER)
        elif proto is __Protocol.JSON:
            with nogil:
                needed = serializer.JSONDeserialize[cMyStruct](buf, deref(cpp_obj), serializer.SHARE_EXTERNAL_BUFFER)
        elif proto is __Protocol.COMPACT_JSON:
            with nogil:
                needed = serializer.CompactJSONDeserialize[cMyStruct](buf, deref(cpp_obj), serializer.SHARE_EXTERNAL_BUFFER)
        return needed

    def __reduce__(self):
        return (deserialize, (MyStruct, serialize(self)))


kOne = MyEnum(<int> (ckOne()))
