/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.refs;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.server.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@ThriftStruct(value="RecursiveStruct", builder=RecursiveStruct.Builder.class)
public final class RecursiveStruct {
    @ThriftConstructor
    public RecursiveStruct(
        @ThriftField(value=1, name="mes", requiredness=Requiredness.OPTIONAL, isRecursive=Recursiveness.TRUE) final List<test.fixtures.refs.RecursiveStruct> mes
    ) {
        this.mes = mes;
    }
    
    @ThriftConstructor
    protected RecursiveStruct() {
      this.mes = null;
    }
    
    public static class Builder {
        private List<test.fixtures.refs.RecursiveStruct> mes = null;
    
        @ThriftField(value=1, name="mes", requiredness=Requiredness.OPTIONAL, isRecursive=Recursiveness.TRUE)
        public Builder setMes(List<test.fixtures.refs.RecursiveStruct> mes) {
            this.mes = mes;
            return this;
        }
        
        public List<test.fixtures.refs.RecursiveStruct> getMes() { return mes; }
    
        public Builder() { }
        public Builder(RecursiveStruct other) {
            this.mes = other.mes;
        }
    
        @ThriftConstructor
        public RecursiveStruct build() {
            return new RecursiveStruct (
                this.mes
            );
        }
    }
    
    private static final TStruct STRUCT_DESC = new TStruct("RecursiveStruct");
    private final List<test.fixtures.refs.RecursiveStruct> mes;
    public static final int _MES = 1;
    private static final TField MES_FIELD_DESC = new TField("mes", TType.LIST, (short)1);

    
    @ThriftField(value=1, name="mes", requiredness=Requiredness.OPTIONAL, isRecursive=Recursiveness.TRUE)
    public List<test.fixtures.refs.RecursiveStruct> getMes() { return mes; }
    
    @Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("mes", mes);
        return helper.toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        RecursiveStruct other = (RecursiveStruct)o;
    
        return
            Objects.equals(mes, other.mes) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            mes
        });
    }
    
    
      // Currently, the read0 method cannot read metadatamap for JSON styled serialization.
      // Perhaps, it will be implemented in the future!
    public static RecursiveStruct read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin();
      RecursiveStruct.Builder builder = new RecursiveStruct.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _MES:
          if (__field.type == TType.LIST) {
            TList _list1 = oprot.readListBegin();
            List<test.fixtures.refs.RecursiveStruct> _iter1 = new ArrayList<test.fixtures.refs.RecursiveStruct>(Math.max(0, 2*_list1.size));
            List<test.fixtures.refs.RecursiveStruct> mes = _iter1;
            if (_list1.size < 0) {  throw new TException("Using an unsupported List, size is less than zero.");}
            for (int _i1 = 0; _i1 < _list1.size; ++_i1) {
                _iter1.add(test.fixtures.refs.RecursiveStruct.read0(oprot));
            }
            oprot.readListEnd();
            builder.setMes(mes);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mes != null) {
        oprot.writeFieldBegin(MES_FIELD_DESC);
        List<test.fixtures.refs.RecursiveStruct> _iter0 = this.mes;
        oprot.writeListBegin(new TList(TType.STRUCT, _iter0.size()));
        for (test.fixtures.refs.RecursiveStruct _iter1 : _iter0) {
          _iter1.write0(oprot);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
}
