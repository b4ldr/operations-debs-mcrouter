// @generated by Thrift. This file is probably not the place you want to edit!

#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]

pub use self::errors::*;
pub use self::types::*;

pub mod types {
    #![allow(clippy::redundant_closure)]

    use fbthrift::{
        Deserialize, GetTType, ProtocolReader, ProtocolWriter, Serialize, TType,
    };

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct MyStructNestedAnnotation {
        pub name: String,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct MyStructAnnotation {
        pub count: i64,
        pub name: String,
        pub extra: Option<String>,
        pub nest: crate::types::MyStructNestedAnnotation,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct MyStruct {
        pub major: i64,
        pub package: String,
        pub annotation_with_quote: String,
        pub class_: String,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct SecretStruct {
        pub id: i64,
        pub password: String,
    }

    #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
    pub struct MyEnum(pub i32);

    impl MyEnum {
        pub const MyValue1: Self = MyEnum(0i32);
        pub const MyValue2: Self = MyEnum(1i32);
        pub const DOMAIN: Self = MyEnum(2i32);
    }

    impl Default for MyEnum {
        fn default() -> Self {
            MyEnum(fbthrift::__UNKNOWN_ID)
        }
    }

    impl<'a> From<&'a MyEnum> for i32 {
        #[inline]
        fn from(x: &'a MyEnum) -> i32 {
            x.0
        }
    }

    impl From<MyEnum> for i32 {
        #[inline]
        fn from(x: MyEnum) -> i32 {
            x.0
        }
    }

    impl From<i32> for MyEnum {
        #[inline]
        fn from(x: i32) -> Self {
            Self(x)
        }
    }

    impl std::fmt::Display for MyEnum {
        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {
            let s: &str = match *self {
                MyEnum::MyValue1 => "MyValue1",
                MyEnum::MyValue2 => "MyValue2",
                MyEnum::DOMAIN => "DOMAIN",
                MyEnum(x) => return write!(fmt, "{}", x),
            };
            write!(fmt, "{}", s)
        }
    }

    impl std::fmt::Debug for MyEnum {
        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {
            write!(fmt, "MyEnum::{}", self)
        }
    }

    impl std::str::FromStr for MyEnum {
        type Err = anyhow::Error;

        fn from_str(string: &str) -> std::result::Result<Self, Self::Err> {
            match string {
                "MyValue1" => Ok(MyEnum::MyValue1),
                "MyValue2" => Ok(MyEnum::MyValue2),
                "DOMAIN" => Ok(MyEnum::DOMAIN),
                _ => anyhow::bail!("Unable to parse {} as MyEnum", string),
            }
        }
    }

    impl GetTType for MyEnum {
        const TTYPE: TType = TType::I32;
    }

    impl<P: ProtocolWriter> Serialize<P> for MyEnum {
        #[inline]
        fn write(&self, p: &mut P) {
            p.write_i32(self.into())
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for MyEnum {
        #[inline]
        fn read(p: &mut P) -> anyhow::Result<Self> {
            Ok(MyEnum::from(p.read_i32()?))
        }
    }

    impl Default for self::MyStructNestedAnnotation {
        fn default() -> Self {
            Self {
                name: Default::default(),
            }
        }
    }

    impl GetTType for self::MyStructNestedAnnotation {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::MyStructNestedAnnotation {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("MyStructNestedAnnotation");
            p.write_field_begin("name", TType::String, 1);
            Serialize::write(&self.name, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::MyStructNestedAnnotation {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_name = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::String, 1) => field_name = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                name: field_name.unwrap_or_default(),
            })
        }
    }


    impl Default for self::MyStructAnnotation {
        fn default() -> Self {
            Self {
                count: Default::default(),
                name: Default::default(),
                extra: None,
                nest: Default::default(),
            }
        }
    }

    impl GetTType for self::MyStructAnnotation {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::MyStructAnnotation {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("MyStructAnnotation");
            p.write_field_begin("count", TType::I64, 1);
            Serialize::write(&self.count, p);
            p.write_field_end();
            p.write_field_begin("name", TType::String, 2);
            Serialize::write(&self.name, p);
            p.write_field_end();
            if let Some(some) = &self.extra {
                p.write_field_begin("extra", TType::String, 3);
                Serialize::write(some, p);
                p.write_field_end();
            }
            p.write_field_begin("nest", TType::Struct, 4);
            Serialize::write(&self.nest, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::MyStructAnnotation {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_count = None;
            let mut field_name = None;
            let mut field_extra = None;
            let mut field_nest = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I64, 1) => field_count = Some(Deserialize::read(p)?),
                    (TType::String, 2) => field_name = Some(Deserialize::read(p)?),
                    (TType::String, 3) => field_extra = Some(Deserialize::read(p)?),
                    (TType::Struct, 4) => field_nest = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                count: field_count.unwrap_or_default(),
                name: field_name.unwrap_or_default(),
                extra: field_extra,
                nest: field_nest.unwrap_or_default(),
            })
        }
    }


    impl Default for self::MyStruct {
        fn default() -> Self {
            Self {
                major: Default::default(),
                package: Default::default(),
                annotation_with_quote: Default::default(),
                class_: Default::default(),
            }
        }
    }

    impl GetTType for self::MyStruct {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::MyStruct {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("MyStruct");
            p.write_field_begin("major", TType::I64, 1);
            Serialize::write(&self.major, p);
            p.write_field_end();
            p.write_field_begin("package", TType::String, 2);
            Serialize::write(&self.package, p);
            p.write_field_end();
            p.write_field_begin("annotation_with_quote", TType::String, 3);
            Serialize::write(&self.annotation_with_quote, p);
            p.write_field_end();
            p.write_field_begin("class_", TType::String, 4);
            Serialize::write(&self.class_, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::MyStruct {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_major = None;
            let mut field_package = None;
            let mut field_annotation_with_quote = None;
            let mut field_class_ = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I64, 1) => field_major = Some(Deserialize::read(p)?),
                    (TType::String, 2) => field_package = Some(Deserialize::read(p)?),
                    (TType::String, 3) => field_annotation_with_quote = Some(Deserialize::read(p)?),
                    (TType::String, 4) => field_class_ = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                major: field_major.unwrap_or_default(),
                package: field_package.unwrap_or_default(),
                annotation_with_quote: field_annotation_with_quote.unwrap_or_default(),
                class_: field_class_.unwrap_or_default(),
            })
        }
    }


    impl Default for self::SecretStruct {
        fn default() -> Self {
            Self {
                id: Default::default(),
                password: Default::default(),
            }
        }
    }

    impl GetTType for self::SecretStruct {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::SecretStruct {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("SecretStruct");
            p.write_field_begin("id", TType::I64, 1);
            Serialize::write(&self.id, p);
            p.write_field_end();
            p.write_field_begin("password", TType::String, 2);
            Serialize::write(&self.password, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::SecretStruct {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_id = None;
            let mut field_password = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I64, 1) => field_id = Some(Deserialize::read(p)?),
                    (TType::String, 2) => field_password = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                id: field_id.unwrap_or_default(),
                password: field_password.unwrap_or_default(),
            })
        }
    }

}

pub mod dependencies {
}

pub mod services {
    pub mod my_service {
        use fbthrift::{
            ApplicationException, ApplicationExceptionErrorCode, Deserialize, ProtocolReader,
            ProtocolWriter, Serialize, TType,
        };

        #[derive(Clone, Debug)]
        pub enum PingExn {
            Success(()),
            ApplicationException(::fbthrift::types::ApplicationException),
        }

        impl From<ApplicationException> for PingExn {
            fn from(exn: ApplicationException) -> Self {
                PingExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for PingExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for PingExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("Ping");
                match self {
                    PingExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    PingExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for PingExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = PingExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = PingExn::Success(Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "PingExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                Ok(alt)
            }
        }

        #[derive(Clone, Debug)]
        pub enum GetRandomDataExn {
            Success(String),
            ApplicationException(::fbthrift::types::ApplicationException),
        }

        impl From<ApplicationException> for GetRandomDataExn {
            fn from(exn: ApplicationException) -> Self {
                GetRandomDataExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for GetRandomDataExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for GetRandomDataExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("GetRandomData");
                match self {
                    GetRandomDataExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    GetRandomDataExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for GetRandomDataExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::String, 0i32), false) => {
                            once = true;
                            alt = Some(GetRandomDataExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "GetRandomDataExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "GetRandomDataExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum HasDataByIdExn {
            Success(bool),
            ApplicationException(::fbthrift::types::ApplicationException),
        }

        impl From<ApplicationException> for HasDataByIdExn {
            fn from(exn: ApplicationException) -> Self {
                HasDataByIdExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for HasDataByIdExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for HasDataByIdExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("HasDataById");
                match self {
                    HasDataByIdExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Bool,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    HasDataByIdExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for HasDataByIdExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Bool, 0i32), false) => {
                            once = true;
                            alt = Some(HasDataByIdExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "HasDataByIdExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "HasDataByIdExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum GetDataByIdExn {
            Success(String),
            ApplicationException(::fbthrift::types::ApplicationException),
        }

        impl From<ApplicationException> for GetDataByIdExn {
            fn from(exn: ApplicationException) -> Self {
                GetDataByIdExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for GetDataByIdExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for GetDataByIdExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("GetDataById");
                match self {
                    GetDataByIdExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    GetDataByIdExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for GetDataByIdExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::String, 0i32), false) => {
                            once = true;
                            alt = Some(GetDataByIdExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "GetDataByIdExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "GetDataByIdExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum PutDataByIdExn {
            Success(()),
            ApplicationException(::fbthrift::types::ApplicationException),
        }

        impl From<ApplicationException> for PutDataByIdExn {
            fn from(exn: ApplicationException) -> Self {
                PutDataByIdExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for PutDataByIdExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for PutDataByIdExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("PutDataById");
                match self {
                    PutDataByIdExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    PutDataByIdExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for PutDataByIdExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = PutDataByIdExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = PutDataByIdExn::Success(Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "PutDataByIdExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                Ok(alt)
            }
        }

        #[derive(Clone, Debug)]
        pub enum LobDataByIdExn {
            Success(()),
            ApplicationException(::fbthrift::types::ApplicationException),
        }

        impl From<ApplicationException> for LobDataByIdExn {
            fn from(exn: ApplicationException) -> Self {
                LobDataByIdExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for LobDataByIdExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for LobDataByIdExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("LobDataById");
                match self {
                    LobDataByIdExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    LobDataByIdExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for LobDataByIdExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = LobDataByIdExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = LobDataByIdExn::Success(Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "LobDataByIdExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                Ok(alt)
            }
        }

        #[derive(Clone, Debug)]
        pub enum DoNothingExn {
            Success(()),
            ApplicationException(::fbthrift::types::ApplicationException),
        }

        impl From<ApplicationException> for DoNothingExn {
            fn from(exn: ApplicationException) -> Self {
                DoNothingExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for DoNothingExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for DoNothingExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("DoNothing");
                match self {
                    DoNothingExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoNothingExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for DoNothingExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = DoNothingExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = DoNothingExn::Success(Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "DoNothingExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                Ok(alt)
            }
        }
    }

    pub mod my_service_prio_parent {
        use fbthrift::{
            ApplicationException, ApplicationExceptionErrorCode, Deserialize, ProtocolReader,
            ProtocolWriter, Serialize, TType,
        };

        #[derive(Clone, Debug)]
        pub enum PingExn {
            Success(()),
            ApplicationException(::fbthrift::types::ApplicationException),
        }

        impl From<ApplicationException> for PingExn {
            fn from(exn: ApplicationException) -> Self {
                PingExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for PingExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for PingExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("Ping");
                match self {
                    PingExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    PingExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for PingExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = PingExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = PingExn::Success(Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "PingExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                Ok(alt)
            }
        }

        #[derive(Clone, Debug)]
        pub enum PongExn {
            Success(()),
            ApplicationException(::fbthrift::types::ApplicationException),
        }

        impl From<ApplicationException> for PongExn {
            fn from(exn: ApplicationException) -> Self {
                PongExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for PongExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for PongExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("Pong");
                match self {
                    PongExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    PongExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for PongExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = PongExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = PongExn::Success(Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "PongExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                Ok(alt)
            }
        }
    }

    pub mod my_service_prio_child {
        use fbthrift::{
            ApplicationException, ApplicationExceptionErrorCode, Deserialize, ProtocolReader,
            ProtocolWriter, Serialize, TType,
        };

        #[derive(Clone, Debug)]
        pub enum PangExn {
            Success(()),
            ApplicationException(::fbthrift::types::ApplicationException),
        }

        impl From<ApplicationException> for PangExn {
            fn from(exn: ApplicationException) -> Self {
                PangExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for PangExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for PangExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("Pang");
                match self {
                    PangExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    PangExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for PangExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = PangExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = PangExn::Success(Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "PangExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                Ok(alt)
            }
        }
    }
}

pub mod client {
    use fbthrift::*;
    use std::marker::PhantomData;
    use std::sync::Arc;

    pub struct MyServiceImpl<P, T> {
        transport: T,
        _phantom: PhantomData<fn() -> P>,
    }

    impl<P, T> MyServiceImpl<P, T> {
        pub fn new(
            transport: T,
        ) -> Self {
            Self {
                transport,
                _phantom: PhantomData,
            }
        }

        pub fn transport(&self) -> &T {
            &self.transport
        }
    }

    pub trait MyService: Send {
        fn ping(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::PingError>> + Send + 'static>>;
        fn getRandomData(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<String, crate::errors::my_service::GetRandomDataError>> + Send + 'static>>;
        fn hasDataById(
            &self,
            arg_id: i64,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<bool, crate::errors::my_service::HasDataByIdError>> + Send + 'static>>;
        fn getDataById(
            &self,
            arg_id: i64,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<String, crate::errors::my_service::GetDataByIdError>> + Send + 'static>>;
        fn putDataById(
            &self,
            arg_id: i64,
            arg_data: &str,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::PutDataByIdError>> + Send + 'static>>;
        fn lobDataById(
            &self,
            arg_id: i64,
            arg_data: &str,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::LobDataByIdError>> + Send + 'static>>;
        fn doNothing(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::DoNothingError>> + Send + 'static>>;
    }

    impl<P, T> MyService for MyServiceImpl<P, T>
    where
        P: Protocol,
        T: Transport,
        P::Frame: Framing<DecBuf = FramingDecoded<T>>,
        ProtocolEncoded<P>: BufMutExt<Final = FramingEncodedFinal<T>>,
    {        fn ping(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::PingError>> + Send + 'static>> {
            use futures::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "ping",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(request)
                .map_err(From::from)
                .and_then(|reply| futures::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> std::result::Result<(), crate::errors::my_service::PingError> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                let exn = crate::services::my_service::PingExn::read(p)?;
                                match exn {
                                    crate::services::my_service::PingExn::Success(x) => Ok(x),
                                    crate::services::my_service::PingExn::ApplicationException(ae) => {
                                        Err(crate::errors::my_service::PingError::ApplicationException(ae))
                                    }
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::my_service::PingError::ApplicationException(ae))
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                let err = anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                Err(crate::errors::my_service::PingError::ThriftError(err))
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn getRandomData(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<String, crate::errors::my_service::GetRandomDataError>> + Send + 'static>> {
            use futures::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "getRandomData",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(request)
                .map_err(From::from)
                .and_then(|reply| futures::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> std::result::Result<String, crate::errors::my_service::GetRandomDataError> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                let exn = crate::services::my_service::GetRandomDataExn::read(p)?;
                                match exn {
                                    crate::services::my_service::GetRandomDataExn::Success(x) => Ok(x),
                                    crate::services::my_service::GetRandomDataExn::ApplicationException(ae) => {
                                        Err(crate::errors::my_service::GetRandomDataError::ApplicationException(ae))
                                    }
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::my_service::GetRandomDataError::ApplicationException(ae))
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                let err = anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                Err(crate::errors::my_service::GetRandomDataError::ThriftError(err))
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn hasDataById(
            &self,
            arg_id: i64,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<bool, crate::errors::my_service::HasDataByIdError>> + Send + 'static>> {
            use futures::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "hasDataById",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_id", TType::I64, 1i16);
                    arg_id.write(p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(request)
                .map_err(From::from)
                .and_then(|reply| futures::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> std::result::Result<bool, crate::errors::my_service::HasDataByIdError> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                let exn = crate::services::my_service::HasDataByIdExn::read(p)?;
                                match exn {
                                    crate::services::my_service::HasDataByIdExn::Success(x) => Ok(x),
                                    crate::services::my_service::HasDataByIdExn::ApplicationException(ae) => {
                                        Err(crate::errors::my_service::HasDataByIdError::ApplicationException(ae))
                                    }
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::my_service::HasDataByIdError::ApplicationException(ae))
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                let err = anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                Err(crate::errors::my_service::HasDataByIdError::ThriftError(err))
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn getDataById(
            &self,
            arg_id: i64,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<String, crate::errors::my_service::GetDataByIdError>> + Send + 'static>> {
            use futures::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "getDataById",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_id", TType::I64, 1i16);
                    arg_id.write(p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(request)
                .map_err(From::from)
                .and_then(|reply| futures::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> std::result::Result<String, crate::errors::my_service::GetDataByIdError> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                let exn = crate::services::my_service::GetDataByIdExn::read(p)?;
                                match exn {
                                    crate::services::my_service::GetDataByIdExn::Success(x) => Ok(x),
                                    crate::services::my_service::GetDataByIdExn::ApplicationException(ae) => {
                                        Err(crate::errors::my_service::GetDataByIdError::ApplicationException(ae))
                                    }
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::my_service::GetDataByIdError::ApplicationException(ae))
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                let err = anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                Err(crate::errors::my_service::GetDataByIdError::ThriftError(err))
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn putDataById(
            &self,
            arg_id: i64,
            arg_data: &str,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::PutDataByIdError>> + Send + 'static>> {
            use futures::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "putDataById",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_id", TType::I64, 1i16);
                    arg_id.write(p);
                    p.write_field_end();
                    p.write_field_begin("arg_data", TType::String, 2i16);
                    arg_data.write(p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(request)
                .map_err(From::from)
                .and_then(|reply| futures::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> std::result::Result<(), crate::errors::my_service::PutDataByIdError> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                let exn = crate::services::my_service::PutDataByIdExn::read(p)?;
                                match exn {
                                    crate::services::my_service::PutDataByIdExn::Success(x) => Ok(x),
                                    crate::services::my_service::PutDataByIdExn::ApplicationException(ae) => {
                                        Err(crate::errors::my_service::PutDataByIdError::ApplicationException(ae))
                                    }
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::my_service::PutDataByIdError::ApplicationException(ae))
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                let err = anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                Err(crate::errors::my_service::PutDataByIdError::ThriftError(err))
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn lobDataById(
            &self,
            arg_id: i64,
            arg_data: &str,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::LobDataByIdError>> + Send + 'static>> {
            use futures::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "lobDataById",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_id", TType::I64, 1i16);
                    arg_id.write(p);
                    p.write_field_end();
                    p.write_field_begin("arg_data", TType::String, 2i16);
                    arg_data.write(p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(request)
                .map_err(From::from)
                .and_then(|reply| futures::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> std::result::Result<(), crate::errors::my_service::LobDataByIdError> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                let exn = crate::services::my_service::LobDataByIdExn::read(p)?;
                                match exn {
                                    crate::services::my_service::LobDataByIdExn::Success(x) => Ok(x),
                                    crate::services::my_service::LobDataByIdExn::ApplicationException(ae) => {
                                        Err(crate::errors::my_service::LobDataByIdError::ApplicationException(ae))
                                    }
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::my_service::LobDataByIdError::ApplicationException(ae))
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                let err = anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                Err(crate::errors::my_service::LobDataByIdError::ThriftError(err))
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn doNothing(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::DoNothingError>> + Send + 'static>> {
            use futures::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "doNothing",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(request)
                .map_err(From::from)
                .and_then(|reply| futures::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> std::result::Result<(), crate::errors::my_service::DoNothingError> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                let exn = crate::services::my_service::DoNothingExn::read(p)?;
                                match exn {
                                    crate::services::my_service::DoNothingExn::Success(x) => Ok(x),
                                    crate::services::my_service::DoNothingExn::ApplicationException(ae) => {
                                        Err(crate::errors::my_service::DoNothingError::ApplicationException(ae))
                                    }
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::my_service::DoNothingError::ApplicationException(ae))
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                let err = anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                Err(crate::errors::my_service::DoNothingError::ThriftError(err))
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
    }

    impl<'a, T> MyService for T
    where
        T: AsRef<dyn MyService + 'a>,
        T: Send,
    {
        fn ping(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::PingError>> + Send + 'static>> {
            self.as_ref().ping(
            )
        }
        fn getRandomData(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<String, crate::errors::my_service::GetRandomDataError>> + Send + 'static>> {
            self.as_ref().getRandomData(
            )
        }
        fn hasDataById(
            &self,
            arg_id: i64,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<bool, crate::errors::my_service::HasDataByIdError>> + Send + 'static>> {
            self.as_ref().hasDataById(
                arg_id,
            )
        }
        fn getDataById(
            &self,
            arg_id: i64,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<String, crate::errors::my_service::GetDataByIdError>> + Send + 'static>> {
            self.as_ref().getDataById(
                arg_id,
            )
        }
        fn putDataById(
            &self,
            arg_id: i64,
            arg_data: &str,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::PutDataByIdError>> + Send + 'static>> {
            self.as_ref().putDataById(
                arg_id,
                arg_data,
            )
        }
        fn lobDataById(
            &self,
            arg_id: i64,
            arg_data: &str,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::LobDataByIdError>> + Send + 'static>> {
            self.as_ref().lobDataById(
                arg_id,
                arg_data,
            )
        }
        fn doNothing(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::DoNothingError>> + Send + 'static>> {
            self.as_ref().doNothing(
            )
        }
    }

    pub struct make_MyService;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = BuckGraphService::new(protocol, transport);
    /// ```
    impl dyn MyService {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> Arc<impl MyService + Send + 'static>
        where
            P: Protocol<Frame = T>,
            T: Transport,
        {
            let _ = protocol;
            Arc::new(MyServiceImpl::<P, T>::new(transport))
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ClientFactory for make_MyService {
        type Api = dyn MyService + Send + Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> Arc<Self::Api>
        where
            P: Protocol<Frame = T>,
            T: Transport + Sync,
        {
            MyService::new(protocol, transport)
        }
    }

    pub struct MyServicePrioParentImpl<P, T> {
        transport: T,
        _phantom: PhantomData<fn() -> P>,
    }

    impl<P, T> MyServicePrioParentImpl<P, T> {
        pub fn new(
            transport: T,
        ) -> Self {
            Self {
                transport,
                _phantom: PhantomData,
            }
        }

        pub fn transport(&self) -> &T {
            &self.transport
        }
    }

    pub trait MyServicePrioParent: Send {
        fn ping(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service_prio_parent::PingError>> + Send + 'static>>;
        fn pong(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service_prio_parent::PongError>> + Send + 'static>>;
    }

    impl<P, T> MyServicePrioParent for MyServicePrioParentImpl<P, T>
    where
        P: Protocol,
        T: Transport,
        P::Frame: Framing<DecBuf = FramingDecoded<T>>,
        ProtocolEncoded<P>: BufMutExt<Final = FramingEncodedFinal<T>>,
    {        fn ping(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service_prio_parent::PingError>> + Send + 'static>> {
            use futures::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "ping",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(request)
                .map_err(From::from)
                .and_then(|reply| futures::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> std::result::Result<(), crate::errors::my_service_prio_parent::PingError> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                let exn = crate::services::my_service_prio_parent::PingExn::read(p)?;
                                match exn {
                                    crate::services::my_service_prio_parent::PingExn::Success(x) => Ok(x),
                                    crate::services::my_service_prio_parent::PingExn::ApplicationException(ae) => {
                                        Err(crate::errors::my_service_prio_parent::PingError::ApplicationException(ae))
                                    }
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::my_service_prio_parent::PingError::ApplicationException(ae))
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                let err = anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                Err(crate::errors::my_service_prio_parent::PingError::ThriftError(err))
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn pong(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service_prio_parent::PongError>> + Send + 'static>> {
            use futures::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "pong",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(request)
                .map_err(From::from)
                .and_then(|reply| futures::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> std::result::Result<(), crate::errors::my_service_prio_parent::PongError> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                let exn = crate::services::my_service_prio_parent::PongExn::read(p)?;
                                match exn {
                                    crate::services::my_service_prio_parent::PongExn::Success(x) => Ok(x),
                                    crate::services::my_service_prio_parent::PongExn::ApplicationException(ae) => {
                                        Err(crate::errors::my_service_prio_parent::PongError::ApplicationException(ae))
                                    }
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::my_service_prio_parent::PongError::ApplicationException(ae))
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                let err = anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                Err(crate::errors::my_service_prio_parent::PongError::ThriftError(err))
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
    }

    impl<'a, T> MyServicePrioParent for T
    where
        T: AsRef<dyn MyServicePrioParent + 'a>,
        T: Send,
    {
        fn ping(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service_prio_parent::PingError>> + Send + 'static>> {
            self.as_ref().ping(
            )
        }
        fn pong(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service_prio_parent::PongError>> + Send + 'static>> {
            self.as_ref().pong(
            )
        }
    }

    pub struct make_MyServicePrioParent;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = BuckGraphService::new(protocol, transport);
    /// ```
    impl dyn MyServicePrioParent {
        pub const priority: &'static str = "HIGH";
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> Arc<impl MyServicePrioParent + Send + 'static>
        where
            P: Protocol<Frame = T>,
            T: Transport,
        {
            let _ = protocol;
            Arc::new(MyServicePrioParentImpl::<P, T>::new(transport))
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ClientFactory for make_MyServicePrioParent {
        type Api = dyn MyServicePrioParent + Send + Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> Arc<Self::Api>
        where
            P: Protocol<Frame = T>,
            T: Transport + Sync,
        {
            MyServicePrioParent::new(protocol, transport)
        }
    }

    pub struct MyServicePrioChildImpl<P, T> {
        parent: crate::client::MyServicePrioParentImpl<P, T>,
    }

    impl<P, T> MyServicePrioChildImpl<P, T> {
        pub fn new(
            transport: T,
        ) -> Self {
            let parent = crate::client::MyServicePrioParentImpl::<P, T>::new(transport);
            Self { parent }
        }

        pub fn transport(&self) -> &T {
            self.parent.transport()
        }
    }

    impl<P, T> AsRef<dyn crate::client::MyServicePrioParent + 'static> for MyServicePrioChildImpl<P, T>
    where
        P: Protocol,
        T: Transport,
        P::Frame: Framing<DecBuf = FramingDecoded<T>>,
        ProtocolEncoded<P>: BufMutExt<Final = FramingEncodedFinal<T>>,
    {
        fn as_ref(&self) -> &(dyn crate::client::MyServicePrioParent + 'static)
        {
            &self.parent
        }
    }

    pub trait MyServicePrioChild: crate::client::MyServicePrioParent + Send {
        fn pang(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service_prio_child::PangError>> + Send + 'static>>;
    }

    impl<P, T> MyServicePrioChild for MyServicePrioChildImpl<P, T>
    where
        P: Protocol,
        T: Transport,
        P::Frame: Framing<DecBuf = FramingDecoded<T>>,
        ProtocolEncoded<P>: BufMutExt<Final = FramingEncodedFinal<T>>,
    {        fn pang(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service_prio_child::PangError>> + Send + 'static>> {
            use futures::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "pang",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(request)
                .map_err(From::from)
                .and_then(|reply| futures::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> std::result::Result<(), crate::errors::my_service_prio_child::PangError> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                let exn = crate::services::my_service_prio_child::PangExn::read(p)?;
                                match exn {
                                    crate::services::my_service_prio_child::PangExn::Success(x) => Ok(x),
                                    crate::services::my_service_prio_child::PangExn::ApplicationException(ae) => {
                                        Err(crate::errors::my_service_prio_child::PangError::ApplicationException(ae))
                                    }
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::my_service_prio_child::PangError::ApplicationException(ae))
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                let err = anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                Err(crate::errors::my_service_prio_child::PangError::ThriftError(err))
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
    }

    impl<'a, T> MyServicePrioChild for T
    where
        T: AsRef<dyn MyServicePrioChild + 'a>,
        T: crate::client::MyServicePrioParent,
        T: Send,
    {
        fn pang(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service_prio_child::PangError>> + Send + 'static>> {
            self.as_ref().pang(
            )
        }
    }

    pub struct make_MyServicePrioChild;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = BuckGraphService::new(protocol, transport);
    /// ```
    impl dyn MyServicePrioChild {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> Arc<impl MyServicePrioChild + Send + 'static>
        where
            P: Protocol<Frame = T>,
            T: Transport,
        {
            let _ = protocol;
            Arc::new(MyServicePrioChildImpl::<P, T>::new(transport))
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ClientFactory for make_MyServicePrioChild {
        type Api = dyn MyServicePrioChild + Send + Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> Arc<Self::Api>
        where
            P: Protocol<Frame = T>,
            T: Transport + Sync,
        {
            MyServicePrioChild::new(protocol, transport)
        }
    }
}

pub mod server {
    use async_trait::async_trait;
    use fbthrift::*;
    use std::marker::PhantomData;

    #[async_trait]
    pub trait MyService: Send + Sync + 'static {
        async fn ping(
            &self,
        ) -> Result<(), crate::services::my_service::PingExn> {
            Err(crate::services::my_service::PingExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "MyService",
                    "ping",
                ),
            ))
        }
        async fn getRandomData(
            &self,
        ) -> Result<String, crate::services::my_service::GetRandomDataExn> {
            Err(crate::services::my_service::GetRandomDataExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "MyService",
                    "getRandomData",
                ),
            ))
        }
        async fn hasDataById(
            &self,
            _id: i64,
        ) -> Result<bool, crate::services::my_service::HasDataByIdExn> {
            Err(crate::services::my_service::HasDataByIdExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "MyService",
                    "hasDataById",
                ),
            ))
        }
        async fn getDataById(
            &self,
            _id: i64,
        ) -> Result<String, crate::services::my_service::GetDataByIdExn> {
            Err(crate::services::my_service::GetDataByIdExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "MyService",
                    "getDataById",
                ),
            ))
        }
        async fn putDataById(
            &self,
            _id: i64,
            _data: String,
        ) -> Result<(), crate::services::my_service::PutDataByIdExn> {
            Err(crate::services::my_service::PutDataByIdExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "MyService",
                    "putDataById",
                ),
            ))
        }
        async fn lobDataById(
            &self,
            _id: i64,
            _data: String,
        ) -> Result<(), crate::services::my_service::LobDataByIdExn> {
            Err(crate::services::my_service::LobDataByIdExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "MyService",
                    "lobDataById",
                ),
            ))
        }
        async fn doNothing(
            &self,
        ) -> Result<(), crate::services::my_service::DoNothingExn> {
            Err(crate::services::my_service::DoNothingExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "MyService",
                    "doNothing",
                ),
            ))
        }
    }

    #[derive(Clone, Debug)]
    pub struct MyServiceProcessor<P, H, R> {
        service: H,
        supa: fbthrift::NullServiceProcessor<P, R>,
        _phantom: PhantomData<(P, H, R)>,
    }

    impl<P, H, R> MyServiceProcessor<P, H, R>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: MyService,
    {
        pub fn new(service: H) -> Self {
            Self {
                service,
                supa: fbthrift::NullServiceProcessor::new(),
                _phantom: PhantomData,
            }
        }

        pub fn into_inner(self) -> H {
            self.service
        }

        async fn handle_ping<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.ping(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::my_service::PingExn::Success(res)
                }
                Err(crate::services::my_service::PingExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::my_service::PingExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "ping",
                    )
                }
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "ping",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_getRandomData<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.getRandomData(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::my_service::GetRandomDataExn::Success(res)
                }
                Err(crate::services::my_service::GetRandomDataExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::my_service::GetRandomDataExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "getRandomData",
                    )
                }
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "getRandomData",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_hasDataById<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut field_id = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I64, 1) => field_id = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.hasDataById(
                field_id.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "hasDataById",
                        "id",
                    )
                })?,
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::my_service::HasDataByIdExn::Success(res)
                }
                Err(crate::services::my_service::HasDataByIdExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::my_service::HasDataByIdExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "hasDataById",
                    )
                }
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "hasDataById",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_getDataById<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut field_id = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I64, 1) => field_id = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.getDataById(
                field_id.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "getDataById",
                        "id",
                    )
                })?,
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::my_service::GetDataByIdExn::Success(res)
                }
                Err(crate::services::my_service::GetDataByIdExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::my_service::GetDataByIdExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "getDataById",
                    )
                }
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "getDataById",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_putDataById<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut field_id = None;
            let mut field_data = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I64, 1) => field_id = Some(Deserialize::read(p)?),
                    (TType::String, 2) => field_data = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.putDataById(
                field_id.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "putDataById",
                        "id",
                    )
                })?,
                field_data.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "putDataById",
                        "data",
                    )
                })?,
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::my_service::PutDataByIdExn::Success(res)
                }
                Err(crate::services::my_service::PutDataByIdExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::my_service::PutDataByIdExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "putDataById",
                    )
                }
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "putDataById",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_lobDataById<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut field_id = None;
            let mut field_data = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I64, 1) => field_id = Some(Deserialize::read(p)?),
                    (TType::String, 2) => field_data = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.lobDataById(
                field_id.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "lobDataById",
                        "id",
                    )
                })?,
                field_data.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "lobDataById",
                        "data",
                    )
                })?,
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::my_service::LobDataByIdExn::Success(res)
                }
                Err(crate::services::my_service::LobDataByIdExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::my_service::LobDataByIdExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "lobDataById",
                    )
                }
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "lobDataById",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_doNothing<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.doNothing(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::my_service::DoNothingExn::Success(res)
                }
                Err(crate::services::my_service::DoNothingExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::my_service::DoNothingExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "doNothing",
                    )
                }
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "doNothing",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }
    }

    #[async_trait]
    impl<P, H, R> fbthrift::ServiceProcessor<P> for MyServiceProcessor<P, H, R>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: MyService,
        R: Send + Sync + 'static,
    {
        type RequestContext = R;

        #[inline]
        fn method_idx(&self, name: &[u8]) -> Result<usize, ApplicationException> {
            match name {
                b"ping" => Ok(0usize),
                b"getRandomData" => Ok(1usize),
                b"hasDataById" => Ok(2usize),
                b"getDataById" => Ok(3usize),
                b"putDataById" => Ok(4usize),
                b"lobDataById" => Ok(5usize),
                b"doNothing" => Ok(6usize),
                _ => Err(ApplicationException::unknown_method()),
            }
        }

        async fn handle_method(
            &self,
            idx: usize,
            p: &mut P::Deserializer,
            r: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            match idx {
                0usize => self.handle_ping(p, r, seqid).await,
                1usize => self.handle_getRandomData(p, r, seqid).await,
                2usize => self.handle_hasDataById(p, r, seqid).await,
                3usize => self.handle_getDataById(p, r, seqid).await,
                4usize => self.handle_putDataById(p, r, seqid).await,
                5usize => self.handle_lobDataById(p, r, seqid).await,
                6usize => self.handle_doNothing(p, r, seqid).await,
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "MyServiceProcessor",
                    bad
                ),
            }
        }
    }

    #[async_trait]
    impl<P, H, R> ThriftService<P::Frame> for MyServiceProcessor<P, H, R>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        P::Frame: Send + 'static,
        H: MyService,
        R: Send + Sync + 'static,
    {
        type Handler = H;
        type RequestContext = R;

        async fn call(
            &self,
            req: ProtocolDecoded<P>,
            req_ctxt: &R,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut p = P::deserializer(req);
            let (idx, mty, seqid) = p.read_message_begin(|name| self.method_idx(name))?;
            if mty != MessageType::Call {
                return Err(From::from(ApplicationException::new(
                    ApplicationExceptionErrorCode::InvalidMessageType,
                    format!("message type {:?} not handled", mty)
                )));
            }
            let idx = match idx {
                Ok(idx) => idx,
                Err(_) => {
                    let cur = P::into_buffer(p).reset();
                    return self.supa.call(cur, req_ctxt).await;
                }
            };
            let res = self.handle_method(idx, &mut p, req_ctxt, seqid).await;
            p.read_message_end()?;
            match res {
                Ok(bytes) => Ok(bytes),
                Err(err) => match err.downcast_ref::<fbthrift::ProtocolError>() {
                    Some(fbthrift::ProtocolError::ApplicationException(ae)) => {
                        let res = serialize!(P, |p| {
                            fbthrift::protocol::write_message(
                                p,
                                "MyServiceProcessor",
                                MessageType::Exception,
                                seqid,
                                |p| ae.write(p),
                            )
                        });
                        Ok(res)
                    }
                    _ => Err(err),
                },
            }
        }
    }

    pub fn make_MyService_server<F, H, R>(
        proto: ProtocolID,
        handler: H,
    ) -> Result<Box<dyn ThriftService<F, Handler = H, RequestContext = R> + Send + 'static>, ApplicationException>
    where
        F: Framing + Send + Sync + 'static,
        H: MyService,
        R: Send + Sync + 'static,
    {
        match proto {
            ProtocolID::BinaryProtocol => {
                Ok(Box::new(MyServiceProcessor::<BinaryProtocol<F>, H, R>::new(handler)))
            }
            ProtocolID::CompactProtocol => {
                Ok(Box::new(MyServiceProcessor::<CompactProtocol<F>, H, R>::new(handler)))
            }
            bad => Err(ApplicationException::invalid_protocol(bad)),
        }
    }

    #[async_trait]
    pub trait MyServicePrioParent: Send + Sync + 'static {
        async fn ping(
            &self,
        ) -> Result<(), crate::services::my_service_prio_parent::PingExn> {
            Err(crate::services::my_service_prio_parent::PingExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "MyServicePrioParent",
                    "ping",
                ),
            ))
        }
        async fn pong(
            &self,
        ) -> Result<(), crate::services::my_service_prio_parent::PongExn> {
            Err(crate::services::my_service_prio_parent::PongExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "MyServicePrioParent",
                    "pong",
                ),
            ))
        }
    }

    #[derive(Clone, Debug)]
    pub struct MyServicePrioParentProcessor<P, H, R> {
        service: H,
        supa: fbthrift::NullServiceProcessor<P, R>,
        _phantom: PhantomData<(P, H, R)>,
    }

    impl<P, H, R> MyServicePrioParentProcessor<P, H, R>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: MyServicePrioParent,
    {
        pub fn new(service: H) -> Self {
            Self {
                service,
                supa: fbthrift::NullServiceProcessor::new(),
                _phantom: PhantomData,
            }
        }

        pub fn into_inner(self) -> H {
            self.service
        }

        async fn handle_ping<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.ping(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::my_service_prio_parent::PingExn::Success(res)
                }
                Err(crate::services::my_service_prio_parent::PingExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::my_service_prio_parent::PingExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "ping",
                    )
                }
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "ping",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_pong<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.pong(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::my_service_prio_parent::PongExn::Success(res)
                }
                Err(crate::services::my_service_prio_parent::PongExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::my_service_prio_parent::PongExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "pong",
                    )
                }
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "pong",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }
    }

    #[async_trait]
    impl<P, H, R> fbthrift::ServiceProcessor<P> for MyServicePrioParentProcessor<P, H, R>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: MyServicePrioParent,
        R: Send + Sync + 'static,
    {
        type RequestContext = R;

        #[inline]
        fn method_idx(&self, name: &[u8]) -> Result<usize, ApplicationException> {
            match name {
                b"ping" => Ok(0usize),
                b"pong" => Ok(1usize),
                _ => Err(ApplicationException::unknown_method()),
            }
        }

        async fn handle_method(
            &self,
            idx: usize,
            p: &mut P::Deserializer,
            r: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            match idx {
                0usize => self.handle_ping(p, r, seqid).await,
                1usize => self.handle_pong(p, r, seqid).await,
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "MyServicePrioParentProcessor",
                    bad
                ),
            }
        }
    }

    #[async_trait]
    impl<P, H, R> ThriftService<P::Frame> for MyServicePrioParentProcessor<P, H, R>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        P::Frame: Send + 'static,
        H: MyServicePrioParent,
        R: Send + Sync + 'static,
    {
        type Handler = H;
        type RequestContext = R;

        async fn call(
            &self,
            req: ProtocolDecoded<P>,
            req_ctxt: &R,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut p = P::deserializer(req);
            let (idx, mty, seqid) = p.read_message_begin(|name| self.method_idx(name))?;
            if mty != MessageType::Call {
                return Err(From::from(ApplicationException::new(
                    ApplicationExceptionErrorCode::InvalidMessageType,
                    format!("message type {:?} not handled", mty)
                )));
            }
            let idx = match idx {
                Ok(idx) => idx,
                Err(_) => {
                    let cur = P::into_buffer(p).reset();
                    return self.supa.call(cur, req_ctxt).await;
                }
            };
            let res = self.handle_method(idx, &mut p, req_ctxt, seqid).await;
            p.read_message_end()?;
            match res {
                Ok(bytes) => Ok(bytes),
                Err(err) => match err.downcast_ref::<fbthrift::ProtocolError>() {
                    Some(fbthrift::ProtocolError::ApplicationException(ae)) => {
                        let res = serialize!(P, |p| {
                            fbthrift::protocol::write_message(
                                p,
                                "MyServicePrioParentProcessor",
                                MessageType::Exception,
                                seqid,
                                |p| ae.write(p),
                            )
                        });
                        Ok(res)
                    }
                    _ => Err(err),
                },
            }
        }
    }

    pub fn make_MyServicePrioParent_server<F, H, R>(
        proto: ProtocolID,
        handler: H,
    ) -> Result<Box<dyn ThriftService<F, Handler = H, RequestContext = R> + Send + 'static>, ApplicationException>
    where
        F: Framing + Send + Sync + 'static,
        H: MyServicePrioParent,
        R: Send + Sync + 'static,
    {
        match proto {
            ProtocolID::BinaryProtocol => {
                Ok(Box::new(MyServicePrioParentProcessor::<BinaryProtocol<F>, H, R>::new(handler)))
            }
            ProtocolID::CompactProtocol => {
                Ok(Box::new(MyServicePrioParentProcessor::<CompactProtocol<F>, H, R>::new(handler)))
            }
            bad => Err(ApplicationException::invalid_protocol(bad)),
        }
    }

    #[async_trait]
    pub trait MyServicePrioChild: Send + Sync + 'static {
        async fn pang(
            &self,
        ) -> Result<(), crate::services::my_service_prio_child::PangExn> {
            Err(crate::services::my_service_prio_child::PangExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "MyServicePrioChild",
                    "pang",
                ),
            ))
        }
    }

    #[derive(Clone, Debug)]
    pub struct MyServicePrioChildProcessor<P, H, R, SS> {
        service: H,
        supa: SS,
        _phantom: PhantomData<(P, H, R)>,
    }

    impl<P, H, R, SS> MyServicePrioChildProcessor<P, H, R, SS>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: MyServicePrioChild,
        SS: ThriftService<P::Frame>,
        SS::Handler: crate::server::MyServicePrioParent,
        P::Frame: Send + 'static,
        R: Sync,
    {
        pub fn new(service: H, supa: SS) -> Self {
            Self {
                service,
                supa,
                _phantom: PhantomData,
            }
        }

        pub fn into_inner(self) -> H {
            self.service
        }

        async fn handle_pang<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.pang(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::my_service_prio_child::PangExn::Success(res)
                }
                Err(crate::services::my_service_prio_child::PangExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::my_service_prio_child::PangExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "pang",
                    )
                }
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "pang",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }
    }

    #[async_trait]
    impl<P, H, R, SS> fbthrift::ServiceProcessor<P> for MyServicePrioChildProcessor<P, H, R, SS>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: MyServicePrioChild,
        SS: ThriftService<P::Frame>,
        SS::Handler: crate::server::MyServicePrioParent,
        P::Frame: Send + 'static,
        R: Send + Sync + 'static,
    {
        type RequestContext = R;

        #[inline]
        fn method_idx(&self, name: &[u8]) -> Result<usize, ApplicationException> {
            match name {
                b"pang" => Ok(0usize),
                _ => Err(ApplicationException::unknown_method()),
            }
        }

        async fn handle_method(
            &self,
            idx: usize,
            p: &mut P::Deserializer,
            r: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            match idx {
                0usize => self.handle_pang(p, r, seqid).await,
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "MyServicePrioChildProcessor",
                    bad
                ),
            }
        }
    }

    #[async_trait]
    impl<P, H, R, SS> ThriftService<P::Frame> for MyServicePrioChildProcessor<P, H, R, SS>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        P::Frame: Send + 'static,
        H: MyServicePrioChild,
        SS: ThriftService<P::Frame, RequestContext = R>,
        SS::Handler: crate::server::MyServicePrioParent,
        P::Frame: Send + 'static,
        R: Send + Sync + 'static,
    {
        type Handler = H;
        type RequestContext = R;

        async fn call(
            &self,
            req: ProtocolDecoded<P>,
            req_ctxt: &R,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut p = P::deserializer(req);
            let (idx, mty, seqid) = p.read_message_begin(|name| self.method_idx(name))?;
            if mty != MessageType::Call {
                return Err(From::from(ApplicationException::new(
                    ApplicationExceptionErrorCode::InvalidMessageType,
                    format!("message type {:?} not handled", mty)
                )));
            }
            let idx = match idx {
                Ok(idx) => idx,
                Err(_) => {
                    let cur = P::into_buffer(p).reset();
                    return self.supa.call(cur, req_ctxt).await;
                }
            };
            let res = self.handle_method(idx, &mut p, req_ctxt, seqid).await;
            p.read_message_end()?;
            match res {
                Ok(bytes) => Ok(bytes),
                Err(err) => match err.downcast_ref::<fbthrift::ProtocolError>() {
                    Some(fbthrift::ProtocolError::ApplicationException(ae)) => {
                        let res = serialize!(P, |p| {
                            fbthrift::protocol::write_message(
                                p,
                                "MyServicePrioChildProcessor",
                                MessageType::Exception,
                                seqid,
                                |p| ae.write(p),
                            )
                        });
                        Ok(res)
                    }
                    _ => Err(err),
                },
            }
        }
    }

    pub fn make_MyServicePrioChild_server<F, H, R, SMAKE, SS>(
        proto: ProtocolID,
        handler: H,
        supa: SMAKE,
    ) -> Result<Box<dyn ThriftService<F, Handler = H, RequestContext = R> + Send + 'static>, ApplicationException>
    where
        F: Framing + Send + Sync + 'static,
        H: MyServicePrioChild,
        SMAKE: Fn(ProtocolID) -> Result<SS, ApplicationException>,
        SS: ThriftService<F, RequestContext = R>,
        SS::Handler: crate::server::MyServicePrioParent,
        R: Send + Sync + 'static,
    {
        match proto {
            ProtocolID::BinaryProtocol => {
                Ok(Box::new(MyServicePrioChildProcessor::<BinaryProtocol<F>, H, R, SS>::new(handler, supa(proto)?)))
            }
            ProtocolID::CompactProtocol => {
                Ok(Box::new(MyServicePrioChildProcessor::<CompactProtocol<F>, H, R, SS>::new(handler, supa(proto)?)))
            }
            bad => Err(ApplicationException::invalid_protocol(bad)),
        }
    }
}

/// Client mocks. For every service, a struct mock::TheService that implements
/// client::TheService.
///
/// As an example of the generated API, for the following thrift service:
///
///     service MyService {
///         FunctionResponse myFunction(
///             1: FunctionRequest request,
///         ) throws {
///             1: StorageException s,
///             2: NotFoundException n,
///         ),
///
///         // other functions
///     }
///
///
/// we would end up with this mock object under crate::mock::MyService:
///
///     impl crate::client::MyService for MyService<'mock> {...}
///
///     pub struct MyService<'mock> {
///         pub myFunction: myFunction<'mock>,
///         // ...
///     }
///
///     impl dyn crate::client::MyService {
///         pub fn mock<'mock>() -> MyService<'mock>;
///     }
///
///     impl myFunction<'mock> {
///         // directly return the given success response
///         pub fn ret(&self, value: FunctionResponse);
///
///         // invoke closure to compute success response
///         pub fn mock(
///             &self,
///             mock: impl FnMut(FunctionRequest) -> FunctionResponse + Send + Sync + 'mock,
///         );
///
///         // return one of the function's declared exceptions
///         pub fn throw<E>(&self, exception: E)
///         where
///             E: Clone + Into<crate::services::MyService::MyFunctionExn> + Send + Sync + 'mock;
///     }
///
///     impl From<StorageException> for MyFunctionExn {...}
///     impl From<NotFoundException> for MyFunctionExn {...}
///
///
/// The intended usage from a test would be:
///
///     use std::sync::Arc;
///     use thrift_if::client::MyService;
///
///     #[test]
///     fn test_my_client() {
///         let mock = Arc::new(MyService::mock());
///
///         // directly return a success response
///         let resp = FunctionResponse {...};
///         mock.myFunction.ret(resp);
///
///         // or give a closure to compute the success response
///         mock.myFunction.mock(|request| FunctionResponse {...});
///
///         // or throw one of the function's exceptions
///         mock.myFunction.throw(StorageException::ItFailed);
///
///         let out = do_the_thing(mock).wait().unwrap();
///         assert!(out.what_i_expected());
///     }
///
///     fn do_the_thing(
///         client: Arc<dyn MyService + Send + Sync + 'static>,
///     ) -> impl Future<Item = Out> {...}
pub mod mock {
    use async_trait::async_trait;
    use std::marker::PhantomData;

    pub struct MyService<'mock> {
        pub ping: my_service::ping<'mock>,
        pub getRandomData: my_service::getRandomData<'mock>,
        pub hasDataById: my_service::hasDataById<'mock>,
        pub getDataById: my_service::getDataById<'mock>,
        pub putDataById: my_service::putDataById<'mock>,
        pub lobDataById: my_service::lobDataById<'mock>,
        pub doNothing: my_service::doNothing<'mock>,
        _marker: PhantomData<&'mock ()>,
    }

    impl dyn super::client::MyService {
        pub fn mock<'mock>() -> MyService<'mock> {
            MyService {
                ping: my_service::ping::unimplemented(),
                getRandomData: my_service::getRandomData::unimplemented(),
                hasDataById: my_service::hasDataById::unimplemented(),
                getDataById: my_service::getDataById::unimplemented(),
                putDataById: my_service::putDataById::unimplemented(),
                lobDataById: my_service::lobDataById::unimplemented(),
                doNothing: my_service::doNothing::unimplemented(),
                _marker: PhantomData,
            }
        }
    }

    #[async_trait]
    impl<'mock> super::client::MyService for MyService<'mock> {
        fn ping(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::PingError>> + Send + 'static>> {
            let mut closure = self.ping.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures::future::ready(closure()))
        }
        fn getRandomData(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<String, crate::errors::my_service::GetRandomDataError>> + Send + 'static>> {
            let mut closure = self.getRandomData.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures::future::ready(closure()))
        }
        fn hasDataById(
            &self,
            arg_id: i64,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<bool, crate::errors::my_service::HasDataByIdError>> + Send + 'static>> {
            let mut closure = self.hasDataById.closure.lock().unwrap();
            let closure: &mut dyn FnMut(i64) -> _ = &mut **closure;
            Box::pin(futures::future::ready(closure(arg_id.clone())))
        }
        fn getDataById(
            &self,
            arg_id: i64,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<String, crate::errors::my_service::GetDataByIdError>> + Send + 'static>> {
            let mut closure = self.getDataById.closure.lock().unwrap();
            let closure: &mut dyn FnMut(i64) -> _ = &mut **closure;
            Box::pin(futures::future::ready(closure(arg_id.clone())))
        }
        fn putDataById(
            &self,
            arg_id: i64,
            arg_data: &str,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::PutDataByIdError>> + Send + 'static>> {
            let mut closure = self.putDataById.closure.lock().unwrap();
            let closure: &mut dyn FnMut(i64, String) -> _ = &mut **closure;
            Box::pin(futures::future::ready(closure(arg_id.clone(), arg_data.to_owned())))
        }
        fn lobDataById(
            &self,
            arg_id: i64,
            arg_data: &str,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::LobDataByIdError>> + Send + 'static>> {
            let mut closure = self.lobDataById.closure.lock().unwrap();
            let closure: &mut dyn FnMut(i64, String) -> _ = &mut **closure;
            Box::pin(futures::future::ready(closure(arg_id.clone(), arg_data.to_owned())))
        }
        fn doNothing(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service::DoNothingError>> + Send + 'static>> {
            let mut closure = self.doNothing.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures::future::ready(closure()))
        }
    }

    mod my_service {
        use std::sync::Mutex;

        pub struct ping<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    (),
                    crate::errors::my_service::PingError,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> ping<'mock> {
            pub fn unimplemented() -> Self {
                ping {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "MyService",
                        "ping",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::errors::my_service::PingError>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct getRandomData<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    String,
                    crate::errors::my_service::GetRandomDataError,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> getRandomData<'mock> {
            pub fn unimplemented() -> Self {
                getRandomData {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "MyService",
                        "getRandomData",
                    ))),
                }
            }

            pub fn ret(&self, value: String) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> String + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::errors::my_service::GetRandomDataError>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct hasDataById<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut(i64) -> Result<
                    bool,
                    crate::errors::my_service::HasDataByIdError,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> hasDataById<'mock> {
            pub fn unimplemented() -> Self {
                hasDataById {
                    closure: Mutex::new(Box::new(|_: i64| panic!(
                        "{}::{} is not mocked",
                        "MyService",
                        "hasDataById",
                    ))),
                }
            }

            pub fn ret(&self, value: bool) {
                self.mock(move |_: i64| value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut(i64) -> bool + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |id| Ok(mock(id)));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::errors::my_service::HasDataByIdError>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |_: i64| Err(exception.clone().into()));
            }
        }

        pub struct getDataById<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut(i64) -> Result<
                    String,
                    crate::errors::my_service::GetDataByIdError,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> getDataById<'mock> {
            pub fn unimplemented() -> Self {
                getDataById {
                    closure: Mutex::new(Box::new(|_: i64| panic!(
                        "{}::{} is not mocked",
                        "MyService",
                        "getDataById",
                    ))),
                }
            }

            pub fn ret(&self, value: String) {
                self.mock(move |_: i64| value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut(i64) -> String + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |id| Ok(mock(id)));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::errors::my_service::GetDataByIdError>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |_: i64| Err(exception.clone().into()));
            }
        }

        pub struct putDataById<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut(i64, String) -> Result<
                    (),
                    crate::errors::my_service::PutDataByIdError,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> putDataById<'mock> {
            pub fn unimplemented() -> Self {
                putDataById {
                    closure: Mutex::new(Box::new(|_: i64, _: String| panic!(
                        "{}::{} is not mocked",
                        "MyService",
                        "putDataById",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move |_: i64, _: String| value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut(i64, String) -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |id, data| Ok(mock(id, data)));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::errors::my_service::PutDataByIdError>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |_: i64, _: String| Err(exception.clone().into()));
            }
        }

        pub struct lobDataById<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut(i64, String) -> Result<
                    (),
                    crate::errors::my_service::LobDataByIdError,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> lobDataById<'mock> {
            pub fn unimplemented() -> Self {
                lobDataById {
                    closure: Mutex::new(Box::new(|_: i64, _: String| panic!(
                        "{}::{} is not mocked",
                        "MyService",
                        "lobDataById",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move |_: i64, _: String| value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut(i64, String) -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |id, data| Ok(mock(id, data)));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::errors::my_service::LobDataByIdError>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |_: i64, _: String| Err(exception.clone().into()));
            }
        }

        pub struct doNothing<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    (),
                    crate::errors::my_service::DoNothingError,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> doNothing<'mock> {
            pub fn unimplemented() -> Self {
                doNothing {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "MyService",
                        "doNothing",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::errors::my_service::DoNothingError>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }
    }

    pub struct MyServicePrioParent<'mock> {
        pub ping: my_service_prio_parent::ping<'mock>,
        pub pong: my_service_prio_parent::pong<'mock>,
        _marker: PhantomData<&'mock ()>,
    }

    impl dyn super::client::MyServicePrioParent {
        pub fn mock<'mock>() -> MyServicePrioParent<'mock> {
            MyServicePrioParent {
                ping: my_service_prio_parent::ping::unimplemented(),
                pong: my_service_prio_parent::pong::unimplemented(),
                _marker: PhantomData,
            }
        }
    }

    #[async_trait]
    impl<'mock> super::client::MyServicePrioParent for MyServicePrioParent<'mock> {
        fn ping(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service_prio_parent::PingError>> + Send + 'static>> {
            let mut closure = self.ping.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures::future::ready(closure()))
        }
        fn pong(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service_prio_parent::PongError>> + Send + 'static>> {
            let mut closure = self.pong.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures::future::ready(closure()))
        }
    }

    mod my_service_prio_parent {
        use std::sync::Mutex;

        pub struct ping<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    (),
                    crate::errors::my_service_prio_parent::PingError,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> ping<'mock> {
            pub fn unimplemented() -> Self {
                ping {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "MyServicePrioParent",
                        "ping",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::errors::my_service_prio_parent::PingError>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct pong<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    (),
                    crate::errors::my_service_prio_parent::PongError,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> pong<'mock> {
            pub fn unimplemented() -> Self {
                pong {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "MyServicePrioParent",
                        "pong",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::errors::my_service_prio_parent::PongError>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }
    }

    pub struct MyServicePrioChild<'mock> {
        pub parent: crate::mock::MyServicePrioParent<'mock>,
        pub pang: my_service_prio_child::pang<'mock>,
        _marker: PhantomData<&'mock ()>,
    }

    impl dyn super::client::MyServicePrioChild {
        pub fn mock<'mock>() -> MyServicePrioChild<'mock> {
            MyServicePrioChild {
                parent: crate::client::MyServicePrioParent::mock(),
                pang: my_service_prio_child::pang::unimplemented(),
                _marker: PhantomData,
            }
        }
    }

    #[async_trait]
    impl<'mock> super::client::MyServicePrioChild for MyServicePrioChild<'mock> {
        fn pang(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<(), crate::errors::my_service_prio_child::PangError>> + Send + 'static>> {
            let mut closure = self.pang.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures::future::ready(closure()))
        }
    }

    #[async_trait]
    impl<'mock> AsRef<dyn crate::client::MyServicePrioParent + 'mock> for MyServicePrioChild<'mock>
    {
        fn as_ref(&self) -> &(dyn crate::client::MyServicePrioParent + 'mock) {
            self
        }
    }

    mod my_service_prio_child {
        use std::sync::Mutex;

        pub struct pang<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    (),
                    crate::errors::my_service_prio_child::PangError,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> pang<'mock> {
            pub fn unimplemented() -> Self {
                pang {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "MyServicePrioChild",
                        "pang",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::errors::my_service_prio_child::PangError>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }
    }
}

pub mod errors {
    pub mod my_service {

        pub type PingError = ::fbthrift::NonthrowingFunctionError;

        pub type GetRandomDataError = ::fbthrift::NonthrowingFunctionError;

        pub type HasDataByIdError = ::fbthrift::NonthrowingFunctionError;

        pub type GetDataByIdError = ::fbthrift::NonthrowingFunctionError;

        pub type PutDataByIdError = ::fbthrift::NonthrowingFunctionError;

        pub type LobDataByIdError = ::fbthrift::NonthrowingFunctionError;

        pub type DoNothingError = ::fbthrift::NonthrowingFunctionError;

    }

    pub mod my_service_prio_parent {

        pub type PingError = ::fbthrift::NonthrowingFunctionError;

        pub type PongError = ::fbthrift::NonthrowingFunctionError;

    }

    pub mod my_service_prio_child {

        pub type PangError = ::fbthrift::NonthrowingFunctionError;

    }

}
