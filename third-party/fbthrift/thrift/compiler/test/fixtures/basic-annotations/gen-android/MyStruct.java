/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class MyStruct implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MyStruct");
  private static final TField MAJOR_FIELD_DESC = new TField("major", TType.I64, (short)1);
  private static final TField PACKAGE_FIELD_DESC = new TField("package", TType.STRING, (short)2);
  private static final TField ANNOTATION_WITH_QUOTE_FIELD_DESC = new TField("annotation_with_quote", TType.STRING, (short)3);
  private static final TField CLASS__FIELD_DESC = new TField("class_", TType.STRING, (short)4);

  public final Long major;
  public final String package;
  public final String annotation_with_quote;
  public final String class_;
  public static final int MAJOR = 1;
  public static final int PACKAGE = 2;
  public static final int ANNOTATION_WITH_QUOTE = 3;
  public static final int CLASS_ = 4;

  public MyStruct(
    Long major,
    String package,
    String annotation_with_quote,
    String class_)
  {
    this.major = major;
    this.package = package;
    this.annotation_with_quote = annotation_with_quote;
    this.class_ = class_;
  }

  public static class Builder {
    private Long major;
    private String package;
    private String annotation_with_quote;
    private String class_;

    public Builder() {
    }

    public Builder setMajor(final Long major) {
      this.major = major;
      return this;
    }

    public Builder setPackage(final String package) {
      this.package = package;
      return this;
    }

    public Builder setAnnotation_with_quote(final String annotation_with_quote) {
      this.annotation_with_quote = annotation_with_quote;
      return this;
    }

    public Builder setClass_(final String class_) {
      this.class_ = class_;
      return this;
    }

    public MyStruct build() {
      return new MyStruct(
        this.major,
        this.package,
        this.annotation_with_quote,
        this.class_
      );
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyStruct(MyStruct other) {
    if (other.isSetMajor()) {
      this.major = TBaseHelper.deepCopy(other.major);
    } else {
      this.major = null;
    }
    if (other.isSetPackage()) {
      this.package = TBaseHelper.deepCopy(other.package);
    } else {
      this.package = null;
    }
    if (other.isSetAnnotation_with_quote()) {
      this.annotation_with_quote = TBaseHelper.deepCopy(other.annotation_with_quote);
    } else {
      this.annotation_with_quote = null;
    }
    if (other.isSetClass_()) {
      this.class_ = TBaseHelper.deepCopy(other.class_);
    } else {
      this.class_ = null;
    }
  }

  public MyStruct deepCopy() {
    return new MyStruct(this);
  }

  public Long getMajor() {
    return this.major;
  }

  // Returns true if field major is set (has been assigned a value) and false otherwise
  public boolean isSetMajor() {
    return this.major != null;
  }

  public String getPackage() {
    return this.package;
  }

  // Returns true if field package is set (has been assigned a value) and false otherwise
  public boolean isSetPackage() {
    return this.package != null;
  }

  public String getAnnotation_with_quote() {
    return this.annotation_with_quote;
  }

  // Returns true if field annotation_with_quote is set (has been assigned a value) and false otherwise
  public boolean isSetAnnotation_with_quote() {
    return this.annotation_with_quote != null;
  }

  public String getClass_() {
    return this.class_;
  }

  // Returns true if field class_ is set (has been assigned a value) and false otherwise
  public boolean isSetClass_() {
    return this.class_ != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof MyStruct))
      return false;
    MyStruct that = (MyStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetMajor(), that.isSetMajor(), this.major, that.major)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetPackage(), that.isSetPackage(), this.package, that.package)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAnnotation_with_quote(), that.isSetAnnotation_with_quote(), this.annotation_with_quote, that.annotation_with_quote)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetClass_(), that.isSetClass_(), this.class_, that.class_)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {major, package, annotation_with_quote, class_});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static MyStruct deserialize(TProtocol iprot) throws TException {
    Long tmp_major = null;
    String tmp_package = null;
    String tmp_annotation_with_quote = null;
    String tmp_class_ = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case MAJOR:
          if (__field.type == TType.I64) {
            tmp_major = iprot.readI64();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PACKAGE:
          if (__field.type == TType.STRING) {
            tmp_package = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ANNOTATION_WITH_QUOTE:
          if (__field.type == TType.STRING) {
            tmp_annotation_with_quote = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case CLASS_:
          if (__field.type == TType.STRING) {
            tmp_class_ = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    MyStruct _that;
    _that = new MyStruct(
      tmp_major
      ,tmp_package
      ,tmp_annotation_with_quote
      ,tmp_class_
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.major != null) {
      oprot.writeFieldBegin(MAJOR_FIELD_DESC);
      oprot.writeI64(this.major);
      oprot.writeFieldEnd();
    }
    if (this.package != null) {
      oprot.writeFieldBegin(PACKAGE_FIELD_DESC);
      oprot.writeString(this.package);
      oprot.writeFieldEnd();
    }
    if (this.annotation_with_quote != null) {
      oprot.writeFieldBegin(ANNOTATION_WITH_QUOTE_FIELD_DESC);
      oprot.writeString(this.annotation_with_quote);
      oprot.writeFieldEnd();
    }
    if (this.class_ != null) {
      oprot.writeFieldBegin(CLASS__FIELD_DESC);
      oprot.writeString(this.class_);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

