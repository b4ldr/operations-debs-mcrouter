#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.bytes cimport PyBytes_AsStringAndSize
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types import (
    NOTSET as __NOTSET,
    NumberType as __NumberType,
    StructSpec as __StructSpec,
    ListSpec as __ListSpec,
    SetSpec as __SetSpec,
    MapSpec as __MapSpec,
    FieldSpec as __FieldSpec,
    StructType as __StructType,
    Qualifier as __Qualifier,
)
from thrift.py3.types cimport (
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    constant_shared_ptr,
    default_inst,
)
cimport thrift.py3.std_libcpp as std_libcpp
from thrift.py3.serializer import Protocol as __Protocol
cimport thrift.py3.serializer as serializer
from thrift.py3.serializer import deserialize, serialize
import folly.iobuf as __iobuf
from folly.optional cimport cOptional

import sys
import types as _py_types
import itertools
from collections.abc import Sequence, Set, Mapping, Iterable
import warnings
import weakref as __weakref
import builtins as _builtins
import asyncio
from folly.coro cimport bridgeCoroTaskWith


@__cython.auto_pickle(False)
cdef class FooEx(thrift.py3.exceptions.Error):

    def __init__(
        FooEx self
    ):
        self._cpp_obj = move(FooEx._make_instance(
          NULL,
          NULL,
        ))
        _builtins.Exception.__init__(self, )


    @staticmethod
    cdef unique_ptr[cFooEx] _make_instance(
        cFooEx* base_instance,
        bint* __isNOTSET
    ) except *:
        cdef unique_ptr[cFooEx] c_inst
        if base_instance:
            c_inst = make_unique[cFooEx](deref(base_instance))
        else:
            c_inst = make_unique[cFooEx]()

        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return move_unique(c_inst)

    def __iter__(self):
        return iter(())

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cFooEx] cpp_obj):
        inst = <FooEx>FooEx.__new__(FooEx, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
        inst._cpp_obj = move_shared(cpp_obj)
        _builtins.Exception.__init__(inst, )
        return inst


    def __hash__(FooEx self):
        return super().__hash__()

    def __repr__(FooEx self):
        return f'FooEx()'
    def __copy__(FooEx self):
        cdef shared_ptr[cFooEx] cpp_obj = make_shared[cFooEx](
            deref(self._cpp_obj)
        )
        return FooEx.create(move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, FooEx) and
                isinstance(other, FooEx)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cFooEx* cself = (<FooEx>self)._cpp_obj.get()
        cdef cFooEx* cother = (<FooEx>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
      defaults = FooEx.create(constant_shared_ptr[cFooEx](default_inst[cFooEx]()))
      return __StructSpec(
        name="FooEx",
        kind=__StructType.EXCEPTION,
        fields=[
    ],
        annotations=_py_types.MappingProxyType({
        }),
      )



cdef class ClientBufferedStream__i32(ClientBufferedStream):

    @staticmethod
    cdef create(cClientBufferedStream[cint32_t]& c_obj, __RpcOptions rpc_options):
        inst = ClientBufferedStream__i32(rpc_options)
        inst._gen = make_unique[cClientBufferedStreamWrapper[cint32_t]](c_obj)
        return inst

    @staticmethod
    cdef void callback(
        cFollyTry[cOptional[cint32_t]]&& result,
        PyObject* userdata,
    ):
        cdef cOptional[cint32_t] opt_val
        cdef cint32_t _value
        stream, pyfuture, rpc_options = <object> userdata
        if result.hasException[cFooEx]():
            pyfuture.set_exception(FooEx.create(thrift.py3.exceptions.try_make_shared_exception[cFooEx](result.exception())))
        elif result.hasException():
            pyfuture.set_exception(
                thrift.py3.exceptions.create_py_exception(result.exception(), <__RpcOptions>rpc_options)
            )
        else:
            opt_val = result.value()
            if opt_val.has_value():
                try:
                    _value = opt_val.value()
                    pyfuture.set_result(_value)
                except Exception as ex:
                    pyfuture.set_exception(ex.with_trackback(None))
            else:
                pyfuture.set_exception(StopAsyncIteration())

    def __anext__(self):
        __loop = asyncio.get_event_loop()
        __future = __loop.create_future()
        __userdata = (self, __future, self._rpc_options)
        bridgeCoroTaskWith[cOptional[cint32_t]](
            self._executor,
            deref(self._gen).getNext(),
            ClientBufferedStream__i32.callback,
            <PyObject *>__userdata,
        )
        return asyncio.shield(__future)

cdef class ServerStream__i32(ServerStream):
    pass

cdef class ResponseAndClientBufferedStream__i32_i32(ResponseAndClientBufferedStream):

    @staticmethod
    cdef create(cResponseAndClientBufferedStream[cint32_t, cint32_t]& c_obj, __RpcOptions rpc_options):
        inst = ResponseAndClientBufferedStream__i32_i32()
        inst._stream = ClientBufferedStream__i32.create(
            c_obj.stream, rpc_options,
        )
        cdef cint32_t _value = c_obj.response
        inst._response = _value
        return inst

    def __iter__(self):
        yield self._response
        yield self._stream

cdef class ResponseAndServerStream__i32_i32(ResponseAndServerStream):
    pass

