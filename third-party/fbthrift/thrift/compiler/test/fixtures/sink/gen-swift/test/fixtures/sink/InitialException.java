/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.sink;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.server.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;

@SwiftGenerated
@ThriftStruct("InitialException")
public final class InitialException extends java.lang.Exception {
    private static final long serialVersionUID = 1L;

    private static final TStruct STRUCT_DESC = new TStruct("InitialException");
    private final String reason;
    public static final int _REASON = 1;
    private static final TField REASON_FIELD_DESC = new TField("reason", TType.STRING, (short)1);

    @ThriftConstructor
    public InitialException(
        @ThriftField(value=1, name="reason", requiredness=Requiredness.NONE) final String reason
    ) {
        this.reason = reason;
    }
    
    @ThriftConstructor
    protected InitialException() {
      this.reason = null;
    }
    
    public static class Builder {
        private String reason = null;
    
        @ThriftField(value=1, name="reason", requiredness=Requiredness.NONE)
        public Builder setReason(String reason) {
            this.reason = reason;
            return this;
        }
        
        public String getReason() { return reason; }
    
        public Builder() { }
        public Builder(InitialException other) {
            this.reason = other.reason;
        }
    
        @ThriftConstructor
        public InitialException build() {
            return new InitialException (
                this.reason
            );
        }
    }
    
    
    @ThriftField(value=1, name="reason", requiredness=Requiredness.NONE)
    public String getReason() { return reason; }
    
    
      // Currently, the read0 method cannot read metadatamap for JSON styled serialization.
      // Perhaps, it will be implemented in the future!
    public static InitialException read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin();
      InitialException.Builder builder = new InitialException.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _REASON:
          if (__field.type == TType.STRING) {
            String reason = oprot.readString();
            builder.setReason(reason);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(this.reason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
}
