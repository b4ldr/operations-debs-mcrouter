/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ComplexNestedStruct implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ComplexNestedStruct");
  private static final TField SET_OF_SET_OF_INT_FIELD_DESC = new TField("setOfSetOfInt", TType.SET, (short)1);
  private static final TField LISTOF_LIST_OF_LIST_OF_LIST_OF_ENUM_FIELD_DESC = new TField("listofListOfListOfListOfEnum", TType.LIST, (short)2);
  private static final TField LIST_OF_LIST_OF_MY_STRUCT_FIELD_DESC = new TField("listOfListOfMyStruct", TType.LIST, (short)3);
  private static final TField SET_OF_LIST_OF_LIST_OF_LONG_FIELD_DESC = new TField("setOfListOfListOfLong", TType.SET, (short)4);
  private static final TField SET_OF_SET_OFSET_OF_LONG_FIELD_DESC = new TField("setOfSetOfsetOfLong", TType.SET, (short)5);
  private static final TField MAP_STRUCT_LIST_OF_LIST_OF_LONG_FIELD_DESC = new TField("mapStructListOfListOfLong", TType.MAP, (short)6);
  private static final TField M_KEY_STRUCT_VAL_INT_FIELD_DESC = new TField("mKeyStructValInt", TType.MAP, (short)7);
  private static final TField LIST_OF_MAP_KEY_INT_VAL_INT_FIELD_DESC = new TField("listOfMapKeyIntValInt", TType.LIST, (short)8);
  private static final TField LIST_OF_MAP_KEY_STR_VAL_LIST_FIELD_DESC = new TField("listOfMapKeyStrValList", TType.LIST, (short)9);
  private static final TField MAP_KEY_SET_VAL_LONG_FIELD_DESC = new TField("mapKeySetValLong", TType.MAP, (short)10);
  private static final TField MAP_KEY_LIST_VAL_LONG_FIELD_DESC = new TField("mapKeyListValLong", TType.MAP, (short)11);
  private static final TField MAP_KEY_MAP_VAL_MAP_FIELD_DESC = new TField("mapKeyMapValMap", TType.MAP, (short)12);
  private static final TField MAP_KEY_SET_VAL_MAP_FIELD_DESC = new TField("mapKeySetValMap", TType.MAP, (short)13);
  private static final TField NESTED_MAPS_FIELD_DESC = new TField("NestedMaps", TType.MAP, (short)14);
  private static final TField MAP_KEY_INT_VAL_LIST_FIELD_DESC = new TField("mapKeyIntValList", TType.MAP, (short)15);
  private static final TField MAP_KEY_INT_VAL_SET_FIELD_DESC = new TField("mapKeyIntValSet", TType.MAP, (short)16);
  private static final TField MAP_KEY_SET_VAL_INT_FIELD_DESC = new TField("mapKeySetValInt", TType.MAP, (short)17);
  private static final TField MAP_KEY_LIST_VAL_SET_FIELD_DESC = new TField("mapKeyListValSet", TType.MAP, (short)18);

  public Set<Set<Integer>> setOfSetOfInt;
  public List<List<List<List<MyEnum>>>> listofListOfListOfListOfEnum;
  public List<List<MyStruct>> listOfListOfMyStruct;
  public Set<List<List<Long>>> setOfListOfListOfLong;
  public Set<Set<Set<Long>>> setOfSetOfsetOfLong;
  public Map<Integer,List<List<MyStruct>>> mapStructListOfListOfLong;
  public Map<MyStruct,Integer> mKeyStructValInt;
  public List<Map<Integer,Integer>> listOfMapKeyIntValInt;
  public List<Map<String,List<MyStruct>>> listOfMapKeyStrValList;
  public Map<Set<Integer>,Long> mapKeySetValLong;
  public Map<List<String>,Integer> mapKeyListValLong;
  public Map<Map<Integer,String>,Map<Integer,String>> mapKeyMapValMap;
  public Map<Set<List<Integer>>,Map<List<Set<String>>,String>> mapKeySetValMap;
  public Map<Map<Map<Integer,String>,String>,Map<Integer,String>> NestedMaps;
  public Map<Integer,List<MyStruct>> mapKeyIntValList;
  public Map<Integer,Set<Boolean>> mapKeyIntValSet;
  public Map<Set<Boolean>,MyEnum> mapKeySetValInt;
  public Map<List<Integer>,Set<Map<Double,String>>> mapKeyListValSet;
  public static final int SETOFSETOFINT = 1;
  public static final int LISTOFLISTOFLISTOFLISTOFENUM = 2;
  public static final int LISTOFLISTOFMYSTRUCT = 3;
  public static final int SETOFLISTOFLISTOFLONG = 4;
  public static final int SETOFSETOFSETOFLONG = 5;
  public static final int MAPSTRUCTLISTOFLISTOFLONG = 6;
  public static final int MKEYSTRUCTVALINT = 7;
  public static final int LISTOFMAPKEYINTVALINT = 8;
  public static final int LISTOFMAPKEYSTRVALLIST = 9;
  public static final int MAPKEYSETVALLONG = 10;
  public static final int MAPKEYLISTVALLONG = 11;
  public static final int MAPKEYMAPVALMAP = 12;
  public static final int MAPKEYSETVALMAP = 13;
  public static final int NESTEDMAPS = 14;
  public static final int MAPKEYINTVALLIST = 15;
  public static final int MAPKEYINTVALSET = 16;
  public static final int MAPKEYSETVALINT = 17;
  public static final int MAPKEYLISTVALSET = 18;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SETOFSETOFINT, new FieldMetaData("setOfSetOfInt", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(LISTOFLISTOFLISTOFLISTOFENUM, new FieldMetaData("listofListOfListOfListOfEnum", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new ListMetaData(TType.LIST, 
                new ListMetaData(TType.LIST, 
                    new ListMetaData(TType.LIST, 
                        new FieldValueMetaData(TType.I32)))))));
    tmpMetaDataMap.put(LISTOFLISTOFMYSTRUCT, new FieldMetaData("listOfListOfMyStruct", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new ListMetaData(TType.LIST, 
                new StructMetaData(TType.STRUCT, MyStruct.class)))));
    tmpMetaDataMap.put(SETOFLISTOFLISTOFLONG, new FieldMetaData("setOfListOfListOfLong", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new ListMetaData(TType.LIST, 
                new ListMetaData(TType.LIST, 
                    new FieldValueMetaData(TType.I64))))));
    tmpMetaDataMap.put(SETOFSETOFSETOFLONG, new FieldMetaData("setOfSetOfsetOfLong", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new SetMetaData(TType.SET, 
                new SetMetaData(TType.SET, 
                    new FieldValueMetaData(TType.I64))))));
    tmpMetaDataMap.put(MAPSTRUCTLISTOFLISTOFLONG, new FieldMetaData("mapStructListOfListOfLong", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new ListMetaData(TType.LIST, 
                new ListMetaData(TType.LIST, 
                    new StructMetaData(TType.STRUCT, MyStruct.class))))));
    tmpMetaDataMap.put(MKEYSTRUCTVALINT, new FieldMetaData("mKeyStructValInt", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new StructMetaData(TType.STRUCT, MyStruct.class), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(LISTOFMAPKEYINTVALINT, new FieldMetaData("listOfMapKeyIntValInt", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(LISTOFMAPKEYSTRVALLIST, new FieldMetaData("listOfMapKeyStrValList", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.STRING), 
                new ListMetaData(TType.LIST, 
                    new StructMetaData(TType.STRUCT, MyStruct.class))))));
    tmpMetaDataMap.put(MAPKEYSETVALLONG, new FieldMetaData("mapKeySetValLong", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.I32)), 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(MAPKEYLISTVALLONG, new FieldMetaData("mapKeyListValLong", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.STRING)), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(MAPKEYMAPVALMAP, new FieldMetaData("mapKeyMapValMap", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.STRING)), 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.STRING)))));
    tmpMetaDataMap.put(MAPKEYSETVALMAP, new FieldMetaData("mapKeySetValMap", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new SetMetaData(TType.SET, 
                new ListMetaData(TType.LIST, 
                    new FieldValueMetaData(TType.I32))), 
            new MapMetaData(TType.MAP, 
                new ListMetaData(TType.LIST, 
                    new SetMetaData(TType.SET, 
                        new FieldValueMetaData(TType.STRING))), 
                new FieldValueMetaData(TType.STRING)))));
    tmpMetaDataMap.put(NESTEDMAPS, new FieldMetaData("NestedMaps", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new MapMetaData(TType.MAP, 
                new MapMetaData(TType.MAP, 
                    new FieldValueMetaData(TType.I32), 
                    new FieldValueMetaData(TType.STRING)), 
                new FieldValueMetaData(TType.STRING)), 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.STRING)))));
    tmpMetaDataMap.put(MAPKEYINTVALLIST, new FieldMetaData("mapKeyIntValList", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new ListMetaData(TType.LIST, 
                new StructMetaData(TType.STRUCT, MyStruct.class)))));
    tmpMetaDataMap.put(MAPKEYINTVALSET, new FieldMetaData("mapKeyIntValSet", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.BOOL)))));
    tmpMetaDataMap.put(MAPKEYSETVALINT, new FieldMetaData("mapKeySetValInt", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.BOOL)), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(MAPKEYLISTVALSET, new FieldMetaData("mapKeyListValSet", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)), 
            new SetMetaData(TType.SET, 
                new MapMetaData(TType.MAP, 
                    new FieldValueMetaData(TType.DOUBLE), 
                    new FieldValueMetaData(TType.STRING))))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ComplexNestedStruct.class, metaDataMap);
  }

  public ComplexNestedStruct() {
  }

  public ComplexNestedStruct(
    Set<Set<Integer>> setOfSetOfInt,
    List<List<List<List<MyEnum>>>> listofListOfListOfListOfEnum,
    List<List<MyStruct>> listOfListOfMyStruct,
    Set<List<List<Long>>> setOfListOfListOfLong,
    Set<Set<Set<Long>>> setOfSetOfsetOfLong,
    Map<Integer,List<List<MyStruct>>> mapStructListOfListOfLong,
    Map<MyStruct,Integer> mKeyStructValInt,
    List<Map<Integer,Integer>> listOfMapKeyIntValInt,
    List<Map<String,List<MyStruct>>> listOfMapKeyStrValList,
    Map<Set<Integer>,Long> mapKeySetValLong,
    Map<List<String>,Integer> mapKeyListValLong,
    Map<Map<Integer,String>,Map<Integer,String>> mapKeyMapValMap,
    Map<Set<List<Integer>>,Map<List<Set<String>>,String>> mapKeySetValMap,
    Map<Map<Map<Integer,String>,String>,Map<Integer,String>> NestedMaps,
    Map<Integer,List<MyStruct>> mapKeyIntValList,
    Map<Integer,Set<Boolean>> mapKeyIntValSet,
    Map<Set<Boolean>,MyEnum> mapKeySetValInt,
    Map<List<Integer>,Set<Map<Double,String>>> mapKeyListValSet)
  {
    this();
    this.setOfSetOfInt = setOfSetOfInt;
    this.listofListOfListOfListOfEnum = listofListOfListOfListOfEnum;
    this.listOfListOfMyStruct = listOfListOfMyStruct;
    this.setOfListOfListOfLong = setOfListOfListOfLong;
    this.setOfSetOfsetOfLong = setOfSetOfsetOfLong;
    this.mapStructListOfListOfLong = mapStructListOfListOfLong;
    this.mKeyStructValInt = mKeyStructValInt;
    this.listOfMapKeyIntValInt = listOfMapKeyIntValInt;
    this.listOfMapKeyStrValList = listOfMapKeyStrValList;
    this.mapKeySetValLong = mapKeySetValLong;
    this.mapKeyListValLong = mapKeyListValLong;
    this.mapKeyMapValMap = mapKeyMapValMap;
    this.mapKeySetValMap = mapKeySetValMap;
    this.NestedMaps = NestedMaps;
    this.mapKeyIntValList = mapKeyIntValList;
    this.mapKeyIntValSet = mapKeyIntValSet;
    this.mapKeySetValInt = mapKeySetValInt;
    this.mapKeyListValSet = mapKeyListValSet;
  }

  public static class Builder {
    private Set<Set<Integer>> setOfSetOfInt;
    private List<List<List<List<MyEnum>>>> listofListOfListOfListOfEnum;
    private List<List<MyStruct>> listOfListOfMyStruct;
    private Set<List<List<Long>>> setOfListOfListOfLong;
    private Set<Set<Set<Long>>> setOfSetOfsetOfLong;
    private Map<Integer,List<List<MyStruct>>> mapStructListOfListOfLong;
    private Map<MyStruct,Integer> mKeyStructValInt;
    private List<Map<Integer,Integer>> listOfMapKeyIntValInt;
    private List<Map<String,List<MyStruct>>> listOfMapKeyStrValList;
    private Map<Set<Integer>,Long> mapKeySetValLong;
    private Map<List<String>,Integer> mapKeyListValLong;
    private Map<Map<Integer,String>,Map<Integer,String>> mapKeyMapValMap;
    private Map<Set<List<Integer>>,Map<List<Set<String>>,String>> mapKeySetValMap;
    private Map<Map<Map<Integer,String>,String>,Map<Integer,String>> NestedMaps;
    private Map<Integer,List<MyStruct>> mapKeyIntValList;
    private Map<Integer,Set<Boolean>> mapKeyIntValSet;
    private Map<Set<Boolean>,MyEnum> mapKeySetValInt;
    private Map<List<Integer>,Set<Map<Double,String>>> mapKeyListValSet;

    public Builder() {
    }

    public Builder setSetOfSetOfInt(final Set<Set<Integer>> setOfSetOfInt) {
      this.setOfSetOfInt = setOfSetOfInt;
      return this;
    }

    public Builder setListofListOfListOfListOfEnum(final List<List<List<List<MyEnum>>>> listofListOfListOfListOfEnum) {
      this.listofListOfListOfListOfEnum = listofListOfListOfListOfEnum;
      return this;
    }

    public Builder setListOfListOfMyStruct(final List<List<MyStruct>> listOfListOfMyStruct) {
      this.listOfListOfMyStruct = listOfListOfMyStruct;
      return this;
    }

    public Builder setSetOfListOfListOfLong(final Set<List<List<Long>>> setOfListOfListOfLong) {
      this.setOfListOfListOfLong = setOfListOfListOfLong;
      return this;
    }

    public Builder setSetOfSetOfsetOfLong(final Set<Set<Set<Long>>> setOfSetOfsetOfLong) {
      this.setOfSetOfsetOfLong = setOfSetOfsetOfLong;
      return this;
    }

    public Builder setMapStructListOfListOfLong(final Map<Integer,List<List<MyStruct>>> mapStructListOfListOfLong) {
      this.mapStructListOfListOfLong = mapStructListOfListOfLong;
      return this;
    }

    public Builder setMKeyStructValInt(final Map<MyStruct,Integer> mKeyStructValInt) {
      this.mKeyStructValInt = mKeyStructValInt;
      return this;
    }

    public Builder setListOfMapKeyIntValInt(final List<Map<Integer,Integer>> listOfMapKeyIntValInt) {
      this.listOfMapKeyIntValInt = listOfMapKeyIntValInt;
      return this;
    }

    public Builder setListOfMapKeyStrValList(final List<Map<String,List<MyStruct>>> listOfMapKeyStrValList) {
      this.listOfMapKeyStrValList = listOfMapKeyStrValList;
      return this;
    }

    public Builder setMapKeySetValLong(final Map<Set<Integer>,Long> mapKeySetValLong) {
      this.mapKeySetValLong = mapKeySetValLong;
      return this;
    }

    public Builder setMapKeyListValLong(final Map<List<String>,Integer> mapKeyListValLong) {
      this.mapKeyListValLong = mapKeyListValLong;
      return this;
    }

    public Builder setMapKeyMapValMap(final Map<Map<Integer,String>,Map<Integer,String>> mapKeyMapValMap) {
      this.mapKeyMapValMap = mapKeyMapValMap;
      return this;
    }

    public Builder setMapKeySetValMap(final Map<Set<List<Integer>>,Map<List<Set<String>>,String>> mapKeySetValMap) {
      this.mapKeySetValMap = mapKeySetValMap;
      return this;
    }

    public Builder setNestedMaps(final Map<Map<Map<Integer,String>,String>,Map<Integer,String>> NestedMaps) {
      this.NestedMaps = NestedMaps;
      return this;
    }

    public Builder setMapKeyIntValList(final Map<Integer,List<MyStruct>> mapKeyIntValList) {
      this.mapKeyIntValList = mapKeyIntValList;
      return this;
    }

    public Builder setMapKeyIntValSet(final Map<Integer,Set<Boolean>> mapKeyIntValSet) {
      this.mapKeyIntValSet = mapKeyIntValSet;
      return this;
    }

    public Builder setMapKeySetValInt(final Map<Set<Boolean>,MyEnum> mapKeySetValInt) {
      this.mapKeySetValInt = mapKeySetValInt;
      return this;
    }

    public Builder setMapKeyListValSet(final Map<List<Integer>,Set<Map<Double,String>>> mapKeyListValSet) {
      this.mapKeyListValSet = mapKeyListValSet;
      return this;
    }

    public ComplexNestedStruct build() {
      ComplexNestedStruct result = new ComplexNestedStruct();
      result.setSetOfSetOfInt(this.setOfSetOfInt);
      result.setListofListOfListOfListOfEnum(this.listofListOfListOfListOfEnum);
      result.setListOfListOfMyStruct(this.listOfListOfMyStruct);
      result.setSetOfListOfListOfLong(this.setOfListOfListOfLong);
      result.setSetOfSetOfsetOfLong(this.setOfSetOfsetOfLong);
      result.setMapStructListOfListOfLong(this.mapStructListOfListOfLong);
      result.setMKeyStructValInt(this.mKeyStructValInt);
      result.setListOfMapKeyIntValInt(this.listOfMapKeyIntValInt);
      result.setListOfMapKeyStrValList(this.listOfMapKeyStrValList);
      result.setMapKeySetValLong(this.mapKeySetValLong);
      result.setMapKeyListValLong(this.mapKeyListValLong);
      result.setMapKeyMapValMap(this.mapKeyMapValMap);
      result.setMapKeySetValMap(this.mapKeySetValMap);
      result.setNestedMaps(this.NestedMaps);
      result.setMapKeyIntValList(this.mapKeyIntValList);
      result.setMapKeyIntValSet(this.mapKeyIntValSet);
      result.setMapKeySetValInt(this.mapKeySetValInt);
      result.setMapKeyListValSet(this.mapKeyListValSet);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComplexNestedStruct(ComplexNestedStruct other) {
    if (other.isSetSetOfSetOfInt()) {
      this.setOfSetOfInt = TBaseHelper.deepCopy(other.setOfSetOfInt);
    }
    if (other.isSetListofListOfListOfListOfEnum()) {
      this.listofListOfListOfListOfEnum = TBaseHelper.deepCopy(other.listofListOfListOfListOfEnum);
    }
    if (other.isSetListOfListOfMyStruct()) {
      this.listOfListOfMyStruct = TBaseHelper.deepCopy(other.listOfListOfMyStruct);
    }
    if (other.isSetSetOfListOfListOfLong()) {
      this.setOfListOfListOfLong = TBaseHelper.deepCopy(other.setOfListOfListOfLong);
    }
    if (other.isSetSetOfSetOfsetOfLong()) {
      this.setOfSetOfsetOfLong = TBaseHelper.deepCopy(other.setOfSetOfsetOfLong);
    }
    if (other.isSetMapStructListOfListOfLong()) {
      this.mapStructListOfListOfLong = TBaseHelper.deepCopy(other.mapStructListOfListOfLong);
    }
    if (other.isSetMKeyStructValInt()) {
      this.mKeyStructValInt = TBaseHelper.deepCopy(other.mKeyStructValInt);
    }
    if (other.isSetListOfMapKeyIntValInt()) {
      this.listOfMapKeyIntValInt = TBaseHelper.deepCopy(other.listOfMapKeyIntValInt);
    }
    if (other.isSetListOfMapKeyStrValList()) {
      this.listOfMapKeyStrValList = TBaseHelper.deepCopy(other.listOfMapKeyStrValList);
    }
    if (other.isSetMapKeySetValLong()) {
      this.mapKeySetValLong = TBaseHelper.deepCopy(other.mapKeySetValLong);
    }
    if (other.isSetMapKeyListValLong()) {
      this.mapKeyListValLong = TBaseHelper.deepCopy(other.mapKeyListValLong);
    }
    if (other.isSetMapKeyMapValMap()) {
      this.mapKeyMapValMap = TBaseHelper.deepCopy(other.mapKeyMapValMap);
    }
    if (other.isSetMapKeySetValMap()) {
      this.mapKeySetValMap = TBaseHelper.deepCopy(other.mapKeySetValMap);
    }
    if (other.isSetNestedMaps()) {
      this.NestedMaps = TBaseHelper.deepCopy(other.NestedMaps);
    }
    if (other.isSetMapKeyIntValList()) {
      this.mapKeyIntValList = TBaseHelper.deepCopy(other.mapKeyIntValList);
    }
    if (other.isSetMapKeyIntValSet()) {
      this.mapKeyIntValSet = TBaseHelper.deepCopy(other.mapKeyIntValSet);
    }
    if (other.isSetMapKeySetValInt()) {
      this.mapKeySetValInt = TBaseHelper.deepCopy(other.mapKeySetValInt);
    }
    if (other.isSetMapKeyListValSet()) {
      this.mapKeyListValSet = TBaseHelper.deepCopy(other.mapKeyListValSet);
    }
  }

  public ComplexNestedStruct deepCopy() {
    return new ComplexNestedStruct(this);
  }

  public Set<Set<Integer>> getSetOfSetOfInt() {
    return this.setOfSetOfInt;
  }

  public ComplexNestedStruct setSetOfSetOfInt(Set<Set<Integer>> setOfSetOfInt) {
    this.setOfSetOfInt = setOfSetOfInt;
    return this;
  }

  public void unsetSetOfSetOfInt() {
    this.setOfSetOfInt = null;
  }

  // Returns true if field setOfSetOfInt is set (has been assigned a value) and false otherwise
  public boolean isSetSetOfSetOfInt() {
    return this.setOfSetOfInt != null;
  }

  public void setSetOfSetOfIntIsSet(boolean __value) {
    if (!__value) {
      this.setOfSetOfInt = null;
    }
  }

  public List<List<List<List<MyEnum>>>> getListofListOfListOfListOfEnum() {
    return this.listofListOfListOfListOfEnum;
  }

  public ComplexNestedStruct setListofListOfListOfListOfEnum(List<List<List<List<MyEnum>>>> listofListOfListOfListOfEnum) {
    this.listofListOfListOfListOfEnum = listofListOfListOfListOfEnum;
    return this;
  }

  public void unsetListofListOfListOfListOfEnum() {
    this.listofListOfListOfListOfEnum = null;
  }

  // Returns true if field listofListOfListOfListOfEnum is set (has been assigned a value) and false otherwise
  public boolean isSetListofListOfListOfListOfEnum() {
    return this.listofListOfListOfListOfEnum != null;
  }

  public void setListofListOfListOfListOfEnumIsSet(boolean __value) {
    if (!__value) {
      this.listofListOfListOfListOfEnum = null;
    }
  }

  public List<List<MyStruct>> getListOfListOfMyStruct() {
    return this.listOfListOfMyStruct;
  }

  public ComplexNestedStruct setListOfListOfMyStruct(List<List<MyStruct>> listOfListOfMyStruct) {
    this.listOfListOfMyStruct = listOfListOfMyStruct;
    return this;
  }

  public void unsetListOfListOfMyStruct() {
    this.listOfListOfMyStruct = null;
  }

  // Returns true if field listOfListOfMyStruct is set (has been assigned a value) and false otherwise
  public boolean isSetListOfListOfMyStruct() {
    return this.listOfListOfMyStruct != null;
  }

  public void setListOfListOfMyStructIsSet(boolean __value) {
    if (!__value) {
      this.listOfListOfMyStruct = null;
    }
  }

  public Set<List<List<Long>>> getSetOfListOfListOfLong() {
    return this.setOfListOfListOfLong;
  }

  public ComplexNestedStruct setSetOfListOfListOfLong(Set<List<List<Long>>> setOfListOfListOfLong) {
    this.setOfListOfListOfLong = setOfListOfListOfLong;
    return this;
  }

  public void unsetSetOfListOfListOfLong() {
    this.setOfListOfListOfLong = null;
  }

  // Returns true if field setOfListOfListOfLong is set (has been assigned a value) and false otherwise
  public boolean isSetSetOfListOfListOfLong() {
    return this.setOfListOfListOfLong != null;
  }

  public void setSetOfListOfListOfLongIsSet(boolean __value) {
    if (!__value) {
      this.setOfListOfListOfLong = null;
    }
  }

  public Set<Set<Set<Long>>> getSetOfSetOfsetOfLong() {
    return this.setOfSetOfsetOfLong;
  }

  public ComplexNestedStruct setSetOfSetOfsetOfLong(Set<Set<Set<Long>>> setOfSetOfsetOfLong) {
    this.setOfSetOfsetOfLong = setOfSetOfsetOfLong;
    return this;
  }

  public void unsetSetOfSetOfsetOfLong() {
    this.setOfSetOfsetOfLong = null;
  }

  // Returns true if field setOfSetOfsetOfLong is set (has been assigned a value) and false otherwise
  public boolean isSetSetOfSetOfsetOfLong() {
    return this.setOfSetOfsetOfLong != null;
  }

  public void setSetOfSetOfsetOfLongIsSet(boolean __value) {
    if (!__value) {
      this.setOfSetOfsetOfLong = null;
    }
  }

  public Map<Integer,List<List<MyStruct>>> getMapStructListOfListOfLong() {
    return this.mapStructListOfListOfLong;
  }

  public ComplexNestedStruct setMapStructListOfListOfLong(Map<Integer,List<List<MyStruct>>> mapStructListOfListOfLong) {
    this.mapStructListOfListOfLong = mapStructListOfListOfLong;
    return this;
  }

  public void unsetMapStructListOfListOfLong() {
    this.mapStructListOfListOfLong = null;
  }

  // Returns true if field mapStructListOfListOfLong is set (has been assigned a value) and false otherwise
  public boolean isSetMapStructListOfListOfLong() {
    return this.mapStructListOfListOfLong != null;
  }

  public void setMapStructListOfListOfLongIsSet(boolean __value) {
    if (!__value) {
      this.mapStructListOfListOfLong = null;
    }
  }

  public Map<MyStruct,Integer> getMKeyStructValInt() {
    return this.mKeyStructValInt;
  }

  public ComplexNestedStruct setMKeyStructValInt(Map<MyStruct,Integer> mKeyStructValInt) {
    this.mKeyStructValInt = mKeyStructValInt;
    return this;
  }

  public void unsetMKeyStructValInt() {
    this.mKeyStructValInt = null;
  }

  // Returns true if field mKeyStructValInt is set (has been assigned a value) and false otherwise
  public boolean isSetMKeyStructValInt() {
    return this.mKeyStructValInt != null;
  }

  public void setMKeyStructValIntIsSet(boolean __value) {
    if (!__value) {
      this.mKeyStructValInt = null;
    }
  }

  public List<Map<Integer,Integer>> getListOfMapKeyIntValInt() {
    return this.listOfMapKeyIntValInt;
  }

  public ComplexNestedStruct setListOfMapKeyIntValInt(List<Map<Integer,Integer>> listOfMapKeyIntValInt) {
    this.listOfMapKeyIntValInt = listOfMapKeyIntValInt;
    return this;
  }

  public void unsetListOfMapKeyIntValInt() {
    this.listOfMapKeyIntValInt = null;
  }

  // Returns true if field listOfMapKeyIntValInt is set (has been assigned a value) and false otherwise
  public boolean isSetListOfMapKeyIntValInt() {
    return this.listOfMapKeyIntValInt != null;
  }

  public void setListOfMapKeyIntValIntIsSet(boolean __value) {
    if (!__value) {
      this.listOfMapKeyIntValInt = null;
    }
  }

  public List<Map<String,List<MyStruct>>> getListOfMapKeyStrValList() {
    return this.listOfMapKeyStrValList;
  }

  public ComplexNestedStruct setListOfMapKeyStrValList(List<Map<String,List<MyStruct>>> listOfMapKeyStrValList) {
    this.listOfMapKeyStrValList = listOfMapKeyStrValList;
    return this;
  }

  public void unsetListOfMapKeyStrValList() {
    this.listOfMapKeyStrValList = null;
  }

  // Returns true if field listOfMapKeyStrValList is set (has been assigned a value) and false otherwise
  public boolean isSetListOfMapKeyStrValList() {
    return this.listOfMapKeyStrValList != null;
  }

  public void setListOfMapKeyStrValListIsSet(boolean __value) {
    if (!__value) {
      this.listOfMapKeyStrValList = null;
    }
  }

  public Map<Set<Integer>,Long> getMapKeySetValLong() {
    return this.mapKeySetValLong;
  }

  public ComplexNestedStruct setMapKeySetValLong(Map<Set<Integer>,Long> mapKeySetValLong) {
    this.mapKeySetValLong = mapKeySetValLong;
    return this;
  }

  public void unsetMapKeySetValLong() {
    this.mapKeySetValLong = null;
  }

  // Returns true if field mapKeySetValLong is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeySetValLong() {
    return this.mapKeySetValLong != null;
  }

  public void setMapKeySetValLongIsSet(boolean __value) {
    if (!__value) {
      this.mapKeySetValLong = null;
    }
  }

  public Map<List<String>,Integer> getMapKeyListValLong() {
    return this.mapKeyListValLong;
  }

  public ComplexNestedStruct setMapKeyListValLong(Map<List<String>,Integer> mapKeyListValLong) {
    this.mapKeyListValLong = mapKeyListValLong;
    return this;
  }

  public void unsetMapKeyListValLong() {
    this.mapKeyListValLong = null;
  }

  // Returns true if field mapKeyListValLong is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeyListValLong() {
    return this.mapKeyListValLong != null;
  }

  public void setMapKeyListValLongIsSet(boolean __value) {
    if (!__value) {
      this.mapKeyListValLong = null;
    }
  }

  public Map<Map<Integer,String>,Map<Integer,String>> getMapKeyMapValMap() {
    return this.mapKeyMapValMap;
  }

  public ComplexNestedStruct setMapKeyMapValMap(Map<Map<Integer,String>,Map<Integer,String>> mapKeyMapValMap) {
    this.mapKeyMapValMap = mapKeyMapValMap;
    return this;
  }

  public void unsetMapKeyMapValMap() {
    this.mapKeyMapValMap = null;
  }

  // Returns true if field mapKeyMapValMap is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeyMapValMap() {
    return this.mapKeyMapValMap != null;
  }

  public void setMapKeyMapValMapIsSet(boolean __value) {
    if (!__value) {
      this.mapKeyMapValMap = null;
    }
  }

  public Map<Set<List<Integer>>,Map<List<Set<String>>,String>> getMapKeySetValMap() {
    return this.mapKeySetValMap;
  }

  public ComplexNestedStruct setMapKeySetValMap(Map<Set<List<Integer>>,Map<List<Set<String>>,String>> mapKeySetValMap) {
    this.mapKeySetValMap = mapKeySetValMap;
    return this;
  }

  public void unsetMapKeySetValMap() {
    this.mapKeySetValMap = null;
  }

  // Returns true if field mapKeySetValMap is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeySetValMap() {
    return this.mapKeySetValMap != null;
  }

  public void setMapKeySetValMapIsSet(boolean __value) {
    if (!__value) {
      this.mapKeySetValMap = null;
    }
  }

  public Map<Map<Map<Integer,String>,String>,Map<Integer,String>> getNestedMaps() {
    return this.NestedMaps;
  }

  public ComplexNestedStruct setNestedMaps(Map<Map<Map<Integer,String>,String>,Map<Integer,String>> NestedMaps) {
    this.NestedMaps = NestedMaps;
    return this;
  }

  public void unsetNestedMaps() {
    this.NestedMaps = null;
  }

  // Returns true if field NestedMaps is set (has been assigned a value) and false otherwise
  public boolean isSetNestedMaps() {
    return this.NestedMaps != null;
  }

  public void setNestedMapsIsSet(boolean __value) {
    if (!__value) {
      this.NestedMaps = null;
    }
  }

  public Map<Integer,List<MyStruct>> getMapKeyIntValList() {
    return this.mapKeyIntValList;
  }

  public ComplexNestedStruct setMapKeyIntValList(Map<Integer,List<MyStruct>> mapKeyIntValList) {
    this.mapKeyIntValList = mapKeyIntValList;
    return this;
  }

  public void unsetMapKeyIntValList() {
    this.mapKeyIntValList = null;
  }

  // Returns true if field mapKeyIntValList is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeyIntValList() {
    return this.mapKeyIntValList != null;
  }

  public void setMapKeyIntValListIsSet(boolean __value) {
    if (!__value) {
      this.mapKeyIntValList = null;
    }
  }

  public Map<Integer,Set<Boolean>> getMapKeyIntValSet() {
    return this.mapKeyIntValSet;
  }

  public ComplexNestedStruct setMapKeyIntValSet(Map<Integer,Set<Boolean>> mapKeyIntValSet) {
    this.mapKeyIntValSet = mapKeyIntValSet;
    return this;
  }

  public void unsetMapKeyIntValSet() {
    this.mapKeyIntValSet = null;
  }

  // Returns true if field mapKeyIntValSet is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeyIntValSet() {
    return this.mapKeyIntValSet != null;
  }

  public void setMapKeyIntValSetIsSet(boolean __value) {
    if (!__value) {
      this.mapKeyIntValSet = null;
    }
  }

  public Map<Set<Boolean>,MyEnum> getMapKeySetValInt() {
    return this.mapKeySetValInt;
  }

  public ComplexNestedStruct setMapKeySetValInt(Map<Set<Boolean>,MyEnum> mapKeySetValInt) {
    this.mapKeySetValInt = mapKeySetValInt;
    return this;
  }

  public void unsetMapKeySetValInt() {
    this.mapKeySetValInt = null;
  }

  // Returns true if field mapKeySetValInt is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeySetValInt() {
    return this.mapKeySetValInt != null;
  }

  public void setMapKeySetValIntIsSet(boolean __value) {
    if (!__value) {
      this.mapKeySetValInt = null;
    }
  }

  public Map<List<Integer>,Set<Map<Double,String>>> getMapKeyListValSet() {
    return this.mapKeyListValSet;
  }

  public ComplexNestedStruct setMapKeyListValSet(Map<List<Integer>,Set<Map<Double,String>>> mapKeyListValSet) {
    this.mapKeyListValSet = mapKeyListValSet;
    return this;
  }

  public void unsetMapKeyListValSet() {
    this.mapKeyListValSet = null;
  }

  // Returns true if field mapKeyListValSet is set (has been assigned a value) and false otherwise
  public boolean isSetMapKeyListValSet() {
    return this.mapKeyListValSet != null;
  }

  public void setMapKeyListValSetIsSet(boolean __value) {
    if (!__value) {
      this.mapKeyListValSet = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case SETOFSETOFINT:
      if (__value == null) {
        unsetSetOfSetOfInt();
      } else {
        setSetOfSetOfInt((Set<Set<Integer>>)__value);
      }
      break;

    case LISTOFLISTOFLISTOFLISTOFENUM:
      if (__value == null) {
        unsetListofListOfListOfListOfEnum();
      } else {
        setListofListOfListOfListOfEnum((List<List<List<List<MyEnum>>>>)__value);
      }
      break;

    case LISTOFLISTOFMYSTRUCT:
      if (__value == null) {
        unsetListOfListOfMyStruct();
      } else {
        setListOfListOfMyStruct((List<List<MyStruct>>)__value);
      }
      break;

    case SETOFLISTOFLISTOFLONG:
      if (__value == null) {
        unsetSetOfListOfListOfLong();
      } else {
        setSetOfListOfListOfLong((Set<List<List<Long>>>)__value);
      }
      break;

    case SETOFSETOFSETOFLONG:
      if (__value == null) {
        unsetSetOfSetOfsetOfLong();
      } else {
        setSetOfSetOfsetOfLong((Set<Set<Set<Long>>>)__value);
      }
      break;

    case MAPSTRUCTLISTOFLISTOFLONG:
      if (__value == null) {
        unsetMapStructListOfListOfLong();
      } else {
        setMapStructListOfListOfLong((Map<Integer,List<List<MyStruct>>>)__value);
      }
      break;

    case MKEYSTRUCTVALINT:
      if (__value == null) {
        unsetMKeyStructValInt();
      } else {
        setMKeyStructValInt((Map<MyStruct,Integer>)__value);
      }
      break;

    case LISTOFMAPKEYINTVALINT:
      if (__value == null) {
        unsetListOfMapKeyIntValInt();
      } else {
        setListOfMapKeyIntValInt((List<Map<Integer,Integer>>)__value);
      }
      break;

    case LISTOFMAPKEYSTRVALLIST:
      if (__value == null) {
        unsetListOfMapKeyStrValList();
      } else {
        setListOfMapKeyStrValList((List<Map<String,List<MyStruct>>>)__value);
      }
      break;

    case MAPKEYSETVALLONG:
      if (__value == null) {
        unsetMapKeySetValLong();
      } else {
        setMapKeySetValLong((Map<Set<Integer>,Long>)__value);
      }
      break;

    case MAPKEYLISTVALLONG:
      if (__value == null) {
        unsetMapKeyListValLong();
      } else {
        setMapKeyListValLong((Map<List<String>,Integer>)__value);
      }
      break;

    case MAPKEYMAPVALMAP:
      if (__value == null) {
        unsetMapKeyMapValMap();
      } else {
        setMapKeyMapValMap((Map<Map<Integer,String>,Map<Integer,String>>)__value);
      }
      break;

    case MAPKEYSETVALMAP:
      if (__value == null) {
        unsetMapKeySetValMap();
      } else {
        setMapKeySetValMap((Map<Set<List<Integer>>,Map<List<Set<String>>,String>>)__value);
      }
      break;

    case NESTEDMAPS:
      if (__value == null) {
        unsetNestedMaps();
      } else {
        setNestedMaps((Map<Map<Map<Integer,String>,String>,Map<Integer,String>>)__value);
      }
      break;

    case MAPKEYINTVALLIST:
      if (__value == null) {
        unsetMapKeyIntValList();
      } else {
        setMapKeyIntValList((Map<Integer,List<MyStruct>>)__value);
      }
      break;

    case MAPKEYINTVALSET:
      if (__value == null) {
        unsetMapKeyIntValSet();
      } else {
        setMapKeyIntValSet((Map<Integer,Set<Boolean>>)__value);
      }
      break;

    case MAPKEYSETVALINT:
      if (__value == null) {
        unsetMapKeySetValInt();
      } else {
        setMapKeySetValInt((Map<Set<Boolean>,MyEnum>)__value);
      }
      break;

    case MAPKEYLISTVALSET:
      if (__value == null) {
        unsetMapKeyListValSet();
      } else {
        setMapKeyListValSet((Map<List<Integer>,Set<Map<Double,String>>>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SETOFSETOFINT:
      return getSetOfSetOfInt();

    case LISTOFLISTOFLISTOFLISTOFENUM:
      return getListofListOfListOfListOfEnum();

    case LISTOFLISTOFMYSTRUCT:
      return getListOfListOfMyStruct();

    case SETOFLISTOFLISTOFLONG:
      return getSetOfListOfListOfLong();

    case SETOFSETOFSETOFLONG:
      return getSetOfSetOfsetOfLong();

    case MAPSTRUCTLISTOFLISTOFLONG:
      return getMapStructListOfListOfLong();

    case MKEYSTRUCTVALINT:
      return getMKeyStructValInt();

    case LISTOFMAPKEYINTVALINT:
      return getListOfMapKeyIntValInt();

    case LISTOFMAPKEYSTRVALLIST:
      return getListOfMapKeyStrValList();

    case MAPKEYSETVALLONG:
      return getMapKeySetValLong();

    case MAPKEYLISTVALLONG:
      return getMapKeyListValLong();

    case MAPKEYMAPVALMAP:
      return getMapKeyMapValMap();

    case MAPKEYSETVALMAP:
      return getMapKeySetValMap();

    case NESTEDMAPS:
      return getNestedMaps();

    case MAPKEYINTVALLIST:
      return getMapKeyIntValList();

    case MAPKEYINTVALSET:
      return getMapKeyIntValSet();

    case MAPKEYSETVALINT:
      return getMapKeySetValInt();

    case MAPKEYLISTVALSET:
      return getMapKeyListValSet();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof ComplexNestedStruct))
      return false;
    ComplexNestedStruct that = (ComplexNestedStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetSetOfSetOfInt(), that.isSetSetOfSetOfInt(), this.setOfSetOfInt, that.setOfSetOfInt)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetListofListOfListOfListOfEnum(), that.isSetListofListOfListOfListOfEnum(), this.listofListOfListOfListOfEnum, that.listofListOfListOfListOfEnum)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetListOfListOfMyStruct(), that.isSetListOfListOfMyStruct(), this.listOfListOfMyStruct, that.listOfListOfMyStruct)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSetOfListOfListOfLong(), that.isSetSetOfListOfListOfLong(), this.setOfListOfListOfLong, that.setOfListOfListOfLong)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSetOfSetOfsetOfLong(), that.isSetSetOfSetOfsetOfLong(), this.setOfSetOfsetOfLong, that.setOfSetOfsetOfLong)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMapStructListOfListOfLong(), that.isSetMapStructListOfListOfLong(), this.mapStructListOfListOfLong, that.mapStructListOfListOfLong)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMKeyStructValInt(), that.isSetMKeyStructValInt(), this.mKeyStructValInt, that.mKeyStructValInt)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetListOfMapKeyIntValInt(), that.isSetListOfMapKeyIntValInt(), this.listOfMapKeyIntValInt, that.listOfMapKeyIntValInt)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetListOfMapKeyStrValList(), that.isSetListOfMapKeyStrValList(), this.listOfMapKeyStrValList, that.listOfMapKeyStrValList)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMapKeySetValLong(), that.isSetMapKeySetValLong(), this.mapKeySetValLong, that.mapKeySetValLong)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMapKeyListValLong(), that.isSetMapKeyListValLong(), this.mapKeyListValLong, that.mapKeyListValLong)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMapKeyMapValMap(), that.isSetMapKeyMapValMap(), this.mapKeyMapValMap, that.mapKeyMapValMap)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMapKeySetValMap(), that.isSetMapKeySetValMap(), this.mapKeySetValMap, that.mapKeySetValMap)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetNestedMaps(), that.isSetNestedMaps(), this.NestedMaps, that.NestedMaps)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMapKeyIntValList(), that.isSetMapKeyIntValList(), this.mapKeyIntValList, that.mapKeyIntValList)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMapKeyIntValSet(), that.isSetMapKeyIntValSet(), this.mapKeyIntValSet, that.mapKeyIntValSet)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMapKeySetValInt(), that.isSetMapKeySetValInt(), this.mapKeySetValInt, that.mapKeySetValInt)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMapKeyListValSet(), that.isSetMapKeyListValSet(), this.mapKeyListValSet, that.mapKeyListValSet)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {setOfSetOfInt, listofListOfListOfListOfEnum, listOfListOfMyStruct, setOfListOfListOfLong, setOfSetOfsetOfLong, mapStructListOfListOfLong, mKeyStructValInt, listOfMapKeyIntValInt, listOfMapKeyStrValList, mapKeySetValLong, mapKeyListValLong, mapKeyMapValMap, mapKeySetValMap, NestedMaps, mapKeyIntValList, mapKeyIntValSet, mapKeySetValInt, mapKeyListValSet});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case SETOFSETOFINT:
          if (__field.type == TType.SET) {
            {
              TSet _set196 = iprot.readSetBegin();
              this.setOfSetOfInt = new HashSet<Set<Integer>>(Math.max(0, 2*_set196.size));
              for (int _i197 = 0; 
                   (_set196.size < 0) ? iprot.peekSet() : (_i197 < _set196.size); 
                   ++_i197)
              {
                Set<Integer> _elem198;
                {
                  TSet _set199 = iprot.readSetBegin();
                  _elem198 = new HashSet<Integer>(Math.max(0, 2*_set199.size));
                  for (int _i200 = 0; 
                       (_set199.size < 0) ? iprot.peekSet() : (_i200 < _set199.size); 
                       ++_i200)
                  {
                    int _elem201;
                    _elem201 = iprot.readI32();
                    _elem198.add(_elem201);
                  }
                  iprot.readSetEnd();
                }
                this.setOfSetOfInt.add(_elem198);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LISTOFLISTOFLISTOFLISTOFENUM:
          if (__field.type == TType.LIST) {
            {
              TList _list202 = iprot.readListBegin();
              this.listofListOfListOfListOfEnum = new ArrayList<List<List<List<MyEnum>>>>(Math.max(0, _list202.size));
              for (int _i203 = 0; 
                   (_list202.size < 0) ? iprot.peekList() : (_i203 < _list202.size); 
                   ++_i203)
              {
                List<List<List<MyEnum>>> _elem204;
                {
                  TList _list205 = iprot.readListBegin();
                  _elem204 = new ArrayList<List<List<MyEnum>>>(Math.max(0, _list205.size));
                  for (int _i206 = 0; 
                       (_list205.size < 0) ? iprot.peekList() : (_i206 < _list205.size); 
                       ++_i206)
                  {
                    List<List<MyEnum>> _elem207;
                    {
                      TList _list208 = iprot.readListBegin();
                      _elem207 = new ArrayList<List<MyEnum>>(Math.max(0, _list208.size));
                      for (int _i209 = 0; 
                           (_list208.size < 0) ? iprot.peekList() : (_i209 < _list208.size); 
                           ++_i209)
                      {
                        List<MyEnum> _elem210;
                        {
                          TList _list211 = iprot.readListBegin();
                          _elem210 = new ArrayList<MyEnum>(Math.max(0, _list211.size));
                          for (int _i212 = 0; 
                               (_list211.size < 0) ? iprot.peekList() : (_i212 < _list211.size); 
                               ++_i212)
                          {
                            MyEnum _elem213;
                            _elem213 = MyEnum.findByValue(iprot.readI32());
                            _elem210.add(_elem213);
                          }
                          iprot.readListEnd();
                        }
                        _elem207.add(_elem210);
                      }
                      iprot.readListEnd();
                    }
                    _elem204.add(_elem207);
                  }
                  iprot.readListEnd();
                }
                this.listofListOfListOfListOfEnum.add(_elem204);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LISTOFLISTOFMYSTRUCT:
          if (__field.type == TType.LIST) {
            {
              TList _list214 = iprot.readListBegin();
              this.listOfListOfMyStruct = new ArrayList<List<MyStruct>>(Math.max(0, _list214.size));
              for (int _i215 = 0; 
                   (_list214.size < 0) ? iprot.peekList() : (_i215 < _list214.size); 
                   ++_i215)
              {
                List<MyStruct> _elem216;
                {
                  TList _list217 = iprot.readListBegin();
                  _elem216 = new ArrayList<MyStruct>(Math.max(0, _list217.size));
                  for (int _i218 = 0; 
                       (_list217.size < 0) ? iprot.peekList() : (_i218 < _list217.size); 
                       ++_i218)
                  {
                    MyStruct _elem219;
                    _elem219 = new MyStruct();
                    _elem219.read(iprot);
                    _elem216.add(_elem219);
                  }
                  iprot.readListEnd();
                }
                this.listOfListOfMyStruct.add(_elem216);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SETOFLISTOFLISTOFLONG:
          if (__field.type == TType.SET) {
            {
              TSet _set220 = iprot.readSetBegin();
              this.setOfListOfListOfLong = new HashSet<List<List<Long>>>(Math.max(0, 2*_set220.size));
              for (int _i221 = 0; 
                   (_set220.size < 0) ? iprot.peekSet() : (_i221 < _set220.size); 
                   ++_i221)
              {
                List<List<Long>> _elem222;
                {
                  TList _list223 = iprot.readListBegin();
                  _elem222 = new ArrayList<List<Long>>(Math.max(0, _list223.size));
                  for (int _i224 = 0; 
                       (_list223.size < 0) ? iprot.peekList() : (_i224 < _list223.size); 
                       ++_i224)
                  {
                    List<Long> _elem225;
                    {
                      TList _list226 = iprot.readListBegin();
                      _elem225 = new ArrayList<Long>(Math.max(0, _list226.size));
                      for (int _i227 = 0; 
                           (_list226.size < 0) ? iprot.peekList() : (_i227 < _list226.size); 
                           ++_i227)
                      {
                        long _elem228;
                        _elem228 = iprot.readI64();
                        _elem225.add(_elem228);
                      }
                      iprot.readListEnd();
                    }
                    _elem222.add(_elem225);
                  }
                  iprot.readListEnd();
                }
                this.setOfListOfListOfLong.add(_elem222);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SETOFSETOFSETOFLONG:
          if (__field.type == TType.SET) {
            {
              TSet _set229 = iprot.readSetBegin();
              this.setOfSetOfsetOfLong = new HashSet<Set<Set<Long>>>(Math.max(0, 2*_set229.size));
              for (int _i230 = 0; 
                   (_set229.size < 0) ? iprot.peekSet() : (_i230 < _set229.size); 
                   ++_i230)
              {
                Set<Set<Long>> _elem231;
                {
                  TSet _set232 = iprot.readSetBegin();
                  _elem231 = new HashSet<Set<Long>>(Math.max(0, 2*_set232.size));
                  for (int _i233 = 0; 
                       (_set232.size < 0) ? iprot.peekSet() : (_i233 < _set232.size); 
                       ++_i233)
                  {
                    Set<Long> _elem234;
                    {
                      TSet _set235 = iprot.readSetBegin();
                      _elem234 = new HashSet<Long>(Math.max(0, 2*_set235.size));
                      for (int _i236 = 0; 
                           (_set235.size < 0) ? iprot.peekSet() : (_i236 < _set235.size); 
                           ++_i236)
                      {
                        long _elem237;
                        _elem237 = iprot.readI64();
                        _elem234.add(_elem237);
                      }
                      iprot.readSetEnd();
                    }
                    _elem231.add(_elem234);
                  }
                  iprot.readSetEnd();
                }
                this.setOfSetOfsetOfLong.add(_elem231);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPSTRUCTLISTOFLISTOFLONG:
          if (__field.type == TType.MAP) {
            {
              TMap _map238 = iprot.readMapBegin();
              this.mapStructListOfListOfLong = new HashMap<Integer,List<List<MyStruct>>>(Math.max(0, 2*_map238.size));
              for (int _i239 = 0; 
                   (_map238.size < 0) ? iprot.peekMap() : (_i239 < _map238.size); 
                   ++_i239)
              {
                int _key240;
                List<List<MyStruct>> _val241;
                _key240 = iprot.readI32();
                {
                  TList _list242 = iprot.readListBegin();
                  _val241 = new ArrayList<List<MyStruct>>(Math.max(0, _list242.size));
                  for (int _i243 = 0; 
                       (_list242.size < 0) ? iprot.peekList() : (_i243 < _list242.size); 
                       ++_i243)
                  {
                    List<MyStruct> _elem244;
                    {
                      TList _list245 = iprot.readListBegin();
                      _elem244 = new ArrayList<MyStruct>(Math.max(0, _list245.size));
                      for (int _i246 = 0; 
                           (_list245.size < 0) ? iprot.peekList() : (_i246 < _list245.size); 
                           ++_i246)
                      {
                        MyStruct _elem247;
                        _elem247 = new MyStruct();
                        _elem247.read(iprot);
                        _elem244.add(_elem247);
                      }
                      iprot.readListEnd();
                    }
                    _val241.add(_elem244);
                  }
                  iprot.readListEnd();
                }
                this.mapStructListOfListOfLong.put(_key240, _val241);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MKEYSTRUCTVALINT:
          if (__field.type == TType.MAP) {
            {
              TMap _map248 = iprot.readMapBegin();
              this.mKeyStructValInt = new HashMap<MyStruct,Integer>(Math.max(0, 2*_map248.size));
              for (int _i249 = 0; 
                   (_map248.size < 0) ? iprot.peekMap() : (_i249 < _map248.size); 
                   ++_i249)
              {
                MyStruct _key250;
                int _val251;
                _key250 = new MyStruct();
                _key250.read(iprot);
                _val251 = iprot.readI32();
                this.mKeyStructValInt.put(_key250, _val251);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LISTOFMAPKEYINTVALINT:
          if (__field.type == TType.LIST) {
            {
              TList _list252 = iprot.readListBegin();
              this.listOfMapKeyIntValInt = new ArrayList<Map<Integer,Integer>>(Math.max(0, _list252.size));
              for (int _i253 = 0; 
                   (_list252.size < 0) ? iprot.peekList() : (_i253 < _list252.size); 
                   ++_i253)
              {
                Map<Integer,Integer> _elem254;
                {
                  TMap _map255 = iprot.readMapBegin();
                  _elem254 = new HashMap<Integer,Integer>(Math.max(0, 2*_map255.size));
                  for (int _i256 = 0; 
                       (_map255.size < 0) ? iprot.peekMap() : (_i256 < _map255.size); 
                       ++_i256)
                  {
                    int _key257;
                    int _val258;
                    _key257 = iprot.readI32();
                    _val258 = iprot.readI32();
                    _elem254.put(_key257, _val258);
                  }
                  iprot.readMapEnd();
                }
                this.listOfMapKeyIntValInt.add(_elem254);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LISTOFMAPKEYSTRVALLIST:
          if (__field.type == TType.LIST) {
            {
              TList _list259 = iprot.readListBegin();
              this.listOfMapKeyStrValList = new ArrayList<Map<String,List<MyStruct>>>(Math.max(0, _list259.size));
              for (int _i260 = 0; 
                   (_list259.size < 0) ? iprot.peekList() : (_i260 < _list259.size); 
                   ++_i260)
              {
                Map<String,List<MyStruct>> _elem261;
                {
                  TMap _map262 = iprot.readMapBegin();
                  _elem261 = new HashMap<String,List<MyStruct>>(Math.max(0, 2*_map262.size));
                  for (int _i263 = 0; 
                       (_map262.size < 0) ? iprot.peekMap() : (_i263 < _map262.size); 
                       ++_i263)
                  {
                    String _key264;
                    List<MyStruct> _val265;
                    _key264 = iprot.readString();
                    {
                      TList _list266 = iprot.readListBegin();
                      _val265 = new ArrayList<MyStruct>(Math.max(0, _list266.size));
                      for (int _i267 = 0; 
                           (_list266.size < 0) ? iprot.peekList() : (_i267 < _list266.size); 
                           ++_i267)
                      {
                        MyStruct _elem268;
                        _elem268 = new MyStruct();
                        _elem268.read(iprot);
                        _val265.add(_elem268);
                      }
                      iprot.readListEnd();
                    }
                    _elem261.put(_key264, _val265);
                  }
                  iprot.readMapEnd();
                }
                this.listOfMapKeyStrValList.add(_elem261);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYSETVALLONG:
          if (__field.type == TType.MAP) {
            {
              TMap _map269 = iprot.readMapBegin();
              this.mapKeySetValLong = new HashMap<Set<Integer>,Long>(Math.max(0, 2*_map269.size));
              for (int _i270 = 0; 
                   (_map269.size < 0) ? iprot.peekMap() : (_i270 < _map269.size); 
                   ++_i270)
              {
                Set<Integer> _key271;
                long _val272;
                {
                  TSet _set273 = iprot.readSetBegin();
                  _key271 = new HashSet<Integer>(Math.max(0, 2*_set273.size));
                  for (int _i274 = 0; 
                       (_set273.size < 0) ? iprot.peekSet() : (_i274 < _set273.size); 
                       ++_i274)
                  {
                    int _elem275;
                    _elem275 = iprot.readI32();
                    _key271.add(_elem275);
                  }
                  iprot.readSetEnd();
                }
                _val272 = iprot.readI64();
                this.mapKeySetValLong.put(_key271, _val272);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYLISTVALLONG:
          if (__field.type == TType.MAP) {
            {
              TMap _map276 = iprot.readMapBegin();
              this.mapKeyListValLong = new HashMap<List<String>,Integer>(Math.max(0, 2*_map276.size));
              for (int _i277 = 0; 
                   (_map276.size < 0) ? iprot.peekMap() : (_i277 < _map276.size); 
                   ++_i277)
              {
                List<String> _key278;
                int _val279;
                {
                  TList _list280 = iprot.readListBegin();
                  _key278 = new ArrayList<String>(Math.max(0, _list280.size));
                  for (int _i281 = 0; 
                       (_list280.size < 0) ? iprot.peekList() : (_i281 < _list280.size); 
                       ++_i281)
                  {
                    String _elem282;
                    _elem282 = iprot.readString();
                    _key278.add(_elem282);
                  }
                  iprot.readListEnd();
                }
                _val279 = iprot.readI32();
                this.mapKeyListValLong.put(_key278, _val279);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYMAPVALMAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map283 = iprot.readMapBegin();
              this.mapKeyMapValMap = new HashMap<Map<Integer,String>,Map<Integer,String>>(Math.max(0, 2*_map283.size));
              for (int _i284 = 0; 
                   (_map283.size < 0) ? iprot.peekMap() : (_i284 < _map283.size); 
                   ++_i284)
              {
                Map<Integer,String> _key285;
                Map<Integer,String> _val286;
                {
                  TMap _map287 = iprot.readMapBegin();
                  _key285 = new HashMap<Integer,String>(Math.max(0, 2*_map287.size));
                  for (int _i288 = 0; 
                       (_map287.size < 0) ? iprot.peekMap() : (_i288 < _map287.size); 
                       ++_i288)
                  {
                    int _key289;
                    String _val290;
                    _key289 = iprot.readI32();
                    _val290 = iprot.readString();
                    _key285.put(_key289, _val290);
                  }
                  iprot.readMapEnd();
                }
                {
                  TMap _map291 = iprot.readMapBegin();
                  _val286 = new HashMap<Integer,String>(Math.max(0, 2*_map291.size));
                  for (int _i292 = 0; 
                       (_map291.size < 0) ? iprot.peekMap() : (_i292 < _map291.size); 
                       ++_i292)
                  {
                    int _key293;
                    String _val294;
                    _key293 = iprot.readI32();
                    _val294 = iprot.readString();
                    _val286.put(_key293, _val294);
                  }
                  iprot.readMapEnd();
                }
                this.mapKeyMapValMap.put(_key285, _val286);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYSETVALMAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map295 = iprot.readMapBegin();
              this.mapKeySetValMap = new HashMap<Set<List<Integer>>,Map<List<Set<String>>,String>>(Math.max(0, 2*_map295.size));
              for (int _i296 = 0; 
                   (_map295.size < 0) ? iprot.peekMap() : (_i296 < _map295.size); 
                   ++_i296)
              {
                Set<List<Integer>> _key297;
                Map<List<Set<String>>,String> _val298;
                {
                  TSet _set299 = iprot.readSetBegin();
                  _key297 = new HashSet<List<Integer>>(Math.max(0, 2*_set299.size));
                  for (int _i300 = 0; 
                       (_set299.size < 0) ? iprot.peekSet() : (_i300 < _set299.size); 
                       ++_i300)
                  {
                    List<Integer> _elem301;
                    {
                      TList _list302 = iprot.readListBegin();
                      _elem301 = new ArrayList<Integer>(Math.max(0, _list302.size));
                      for (int _i303 = 0; 
                           (_list302.size < 0) ? iprot.peekList() : (_i303 < _list302.size); 
                           ++_i303)
                      {
                        int _elem304;
                        _elem304 = iprot.readI32();
                        _elem301.add(_elem304);
                      }
                      iprot.readListEnd();
                    }
                    _key297.add(_elem301);
                  }
                  iprot.readSetEnd();
                }
                {
                  TMap _map305 = iprot.readMapBegin();
                  _val298 = new HashMap<List<Set<String>>,String>(Math.max(0, 2*_map305.size));
                  for (int _i306 = 0; 
                       (_map305.size < 0) ? iprot.peekMap() : (_i306 < _map305.size); 
                       ++_i306)
                  {
                    List<Set<String>> _key307;
                    String _val308;
                    {
                      TList _list309 = iprot.readListBegin();
                      _key307 = new ArrayList<Set<String>>(Math.max(0, _list309.size));
                      for (int _i310 = 0; 
                           (_list309.size < 0) ? iprot.peekList() : (_i310 < _list309.size); 
                           ++_i310)
                      {
                        Set<String> _elem311;
                        {
                          TSet _set312 = iprot.readSetBegin();
                          _elem311 = new HashSet<String>(Math.max(0, 2*_set312.size));
                          for (int _i313 = 0; 
                               (_set312.size < 0) ? iprot.peekSet() : (_i313 < _set312.size); 
                               ++_i313)
                          {
                            String _elem314;
                            _elem314 = iprot.readString();
                            _elem311.add(_elem314);
                          }
                          iprot.readSetEnd();
                        }
                        _key307.add(_elem311);
                      }
                      iprot.readListEnd();
                    }
                    _val308 = iprot.readString();
                    _val298.put(_key307, _val308);
                  }
                  iprot.readMapEnd();
                }
                this.mapKeySetValMap.put(_key297, _val298);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case NESTEDMAPS:
          if (__field.type == TType.MAP) {
            {
              TMap _map315 = iprot.readMapBegin();
              this.NestedMaps = new HashMap<Map<Map<Integer,String>,String>,Map<Integer,String>>(Math.max(0, 2*_map315.size));
              for (int _i316 = 0; 
                   (_map315.size < 0) ? iprot.peekMap() : (_i316 < _map315.size); 
                   ++_i316)
              {
                Map<Map<Integer,String>,String> _key317;
                Map<Integer,String> _val318;
                {
                  TMap _map319 = iprot.readMapBegin();
                  _key317 = new HashMap<Map<Integer,String>,String>(Math.max(0, 2*_map319.size));
                  for (int _i320 = 0; 
                       (_map319.size < 0) ? iprot.peekMap() : (_i320 < _map319.size); 
                       ++_i320)
                  {
                    Map<Integer,String> _key321;
                    String _val322;
                    {
                      TMap _map323 = iprot.readMapBegin();
                      _key321 = new HashMap<Integer,String>(Math.max(0, 2*_map323.size));
                      for (int _i324 = 0; 
                           (_map323.size < 0) ? iprot.peekMap() : (_i324 < _map323.size); 
                           ++_i324)
                      {
                        int _key325;
                        String _val326;
                        _key325 = iprot.readI32();
                        _val326 = iprot.readString();
                        _key321.put(_key325, _val326);
                      }
                      iprot.readMapEnd();
                    }
                    _val322 = iprot.readString();
                    _key317.put(_key321, _val322);
                  }
                  iprot.readMapEnd();
                }
                {
                  TMap _map327 = iprot.readMapBegin();
                  _val318 = new HashMap<Integer,String>(Math.max(0, 2*_map327.size));
                  for (int _i328 = 0; 
                       (_map327.size < 0) ? iprot.peekMap() : (_i328 < _map327.size); 
                       ++_i328)
                  {
                    int _key329;
                    String _val330;
                    _key329 = iprot.readI32();
                    _val330 = iprot.readString();
                    _val318.put(_key329, _val330);
                  }
                  iprot.readMapEnd();
                }
                this.NestedMaps.put(_key317, _val318);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYINTVALLIST:
          if (__field.type == TType.MAP) {
            {
              TMap _map331 = iprot.readMapBegin();
              this.mapKeyIntValList = new HashMap<Integer,List<MyStruct>>(Math.max(0, 2*_map331.size));
              for (int _i332 = 0; 
                   (_map331.size < 0) ? iprot.peekMap() : (_i332 < _map331.size); 
                   ++_i332)
              {
                int _key333;
                List<MyStruct> _val334;
                _key333 = iprot.readI32();
                {
                  TList _list335 = iprot.readListBegin();
                  _val334 = new ArrayList<MyStruct>(Math.max(0, _list335.size));
                  for (int _i336 = 0; 
                       (_list335.size < 0) ? iprot.peekList() : (_i336 < _list335.size); 
                       ++_i336)
                  {
                    MyStruct _elem337;
                    _elem337 = new MyStruct();
                    _elem337.read(iprot);
                    _val334.add(_elem337);
                  }
                  iprot.readListEnd();
                }
                this.mapKeyIntValList.put(_key333, _val334);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYINTVALSET:
          if (__field.type == TType.MAP) {
            {
              TMap _map338 = iprot.readMapBegin();
              this.mapKeyIntValSet = new HashMap<Integer,Set<Boolean>>(Math.max(0, 2*_map338.size));
              for (int _i339 = 0; 
                   (_map338.size < 0) ? iprot.peekMap() : (_i339 < _map338.size); 
                   ++_i339)
              {
                int _key340;
                Set<Boolean> _val341;
                _key340 = iprot.readI32();
                {
                  TSet _set342 = iprot.readSetBegin();
                  _val341 = new HashSet<Boolean>(Math.max(0, 2*_set342.size));
                  for (int _i343 = 0; 
                       (_set342.size < 0) ? iprot.peekSet() : (_i343 < _set342.size); 
                       ++_i343)
                  {
                    boolean _elem344;
                    _elem344 = iprot.readBool();
                    _val341.add(_elem344);
                  }
                  iprot.readSetEnd();
                }
                this.mapKeyIntValSet.put(_key340, _val341);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYSETVALINT:
          if (__field.type == TType.MAP) {
            {
              TMap _map345 = iprot.readMapBegin();
              this.mapKeySetValInt = new HashMap<Set<Boolean>,MyEnum>(Math.max(0, 2*_map345.size));
              for (int _i346 = 0; 
                   (_map345.size < 0) ? iprot.peekMap() : (_i346 < _map345.size); 
                   ++_i346)
              {
                Set<Boolean> _key347;
                MyEnum _val348;
                {
                  TSet _set349 = iprot.readSetBegin();
                  _key347 = new HashSet<Boolean>(Math.max(0, 2*_set349.size));
                  for (int _i350 = 0; 
                       (_set349.size < 0) ? iprot.peekSet() : (_i350 < _set349.size); 
                       ++_i350)
                  {
                    boolean _elem351;
                    _elem351 = iprot.readBool();
                    _key347.add(_elem351);
                  }
                  iprot.readSetEnd();
                }
                _val348 = MyEnum.findByValue(iprot.readI32());
                this.mapKeySetValInt.put(_key347, _val348);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPKEYLISTVALSET:
          if (__field.type == TType.MAP) {
            {
              TMap _map352 = iprot.readMapBegin();
              this.mapKeyListValSet = new HashMap<List<Integer>,Set<Map<Double,String>>>(Math.max(0, 2*_map352.size));
              for (int _i353 = 0; 
                   (_map352.size < 0) ? iprot.peekMap() : (_i353 < _map352.size); 
                   ++_i353)
              {
                List<Integer> _key354;
                Set<Map<Double,String>> _val355;
                {
                  TList _list356 = iprot.readListBegin();
                  _key354 = new ArrayList<Integer>(Math.max(0, _list356.size));
                  for (int _i357 = 0; 
                       (_list356.size < 0) ? iprot.peekList() : (_i357 < _list356.size); 
                       ++_i357)
                  {
                    int _elem358;
                    _elem358 = iprot.readI32();
                    _key354.add(_elem358);
                  }
                  iprot.readListEnd();
                }
                {
                  TSet _set359 = iprot.readSetBegin();
                  _val355 = new HashSet<Map<Double,String>>(Math.max(0, 2*_set359.size));
                  for (int _i360 = 0; 
                       (_set359.size < 0) ? iprot.peekSet() : (_i360 < _set359.size); 
                       ++_i360)
                  {
                    Map<Double,String> _elem361;
                    {
                      TMap _map362 = iprot.readMapBegin();
                      _elem361 = new HashMap<Double,String>(Math.max(0, 2*_map362.size));
                      for (int _i363 = 0; 
                           (_map362.size < 0) ? iprot.peekMap() : (_i363 < _map362.size); 
                           ++_i363)
                      {
                        double _key364;
                        String _val365;
                        _key364 = iprot.readDouble();
                        _val365 = iprot.readString();
                        _elem361.put(_key364, _val365);
                      }
                      iprot.readMapEnd();
                    }
                    _val355.add(_elem361);
                  }
                  iprot.readSetEnd();
                }
                this.mapKeyListValSet.put(_key354, _val355);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.setOfSetOfInt != null) {
      oprot.writeFieldBegin(SET_OF_SET_OF_INT_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.SET, this.setOfSetOfInt.size()));
        for (Set<Integer> _iter366 : this.setOfSetOfInt)        {
          {
            oprot.writeSetBegin(new TSet(TType.I32, _iter366.size()));
            for (int _iter367 : _iter366)            {
              oprot.writeI32(_iter367);
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.listofListOfListOfListOfEnum != null) {
      oprot.writeFieldBegin(LISTOF_LIST_OF_LIST_OF_LIST_OF_ENUM_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.LIST, this.listofListOfListOfListOfEnum.size()));
        for (List<List<List<MyEnum>>> _iter368 : this.listofListOfListOfListOfEnum)        {
          {
            oprot.writeListBegin(new TList(TType.LIST, _iter368.size()));
            for (List<List<MyEnum>> _iter369 : _iter368)            {
              {
                oprot.writeListBegin(new TList(TType.LIST, _iter369.size()));
                for (List<MyEnum> _iter370 : _iter369)                {
                  {
                    oprot.writeListBegin(new TList(TType.I32, _iter370.size()));
                    for (MyEnum _iter371 : _iter370)                    {
                      oprot.writeI32(_iter371 == null ? 0 : _iter371.getValue());
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.listOfListOfMyStruct != null) {
      oprot.writeFieldBegin(LIST_OF_LIST_OF_MY_STRUCT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.LIST, this.listOfListOfMyStruct.size()));
        for (List<MyStruct> _iter372 : this.listOfListOfMyStruct)        {
          {
            oprot.writeListBegin(new TList(TType.STRUCT, _iter372.size()));
            for (MyStruct _iter373 : _iter372)            {
              _iter373.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.setOfListOfListOfLong != null) {
      oprot.writeFieldBegin(SET_OF_LIST_OF_LIST_OF_LONG_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.LIST, this.setOfListOfListOfLong.size()));
        for (List<List<Long>> _iter374 : this.setOfListOfListOfLong)        {
          {
            oprot.writeListBegin(new TList(TType.LIST, _iter374.size()));
            for (List<Long> _iter375 : _iter374)            {
              {
                oprot.writeListBegin(new TList(TType.I64, _iter375.size()));
                for (long _iter376 : _iter375)                {
                  oprot.writeI64(_iter376);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.setOfSetOfsetOfLong != null) {
      oprot.writeFieldBegin(SET_OF_SET_OFSET_OF_LONG_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.SET, this.setOfSetOfsetOfLong.size()));
        for (Set<Set<Long>> _iter377 : this.setOfSetOfsetOfLong)        {
          {
            oprot.writeSetBegin(new TSet(TType.SET, _iter377.size()));
            for (Set<Long> _iter378 : _iter377)            {
              {
                oprot.writeSetBegin(new TSet(TType.I64, _iter378.size()));
                for (long _iter379 : _iter378)                {
                  oprot.writeI64(_iter379);
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapStructListOfListOfLong != null) {
      oprot.writeFieldBegin(MAP_STRUCT_LIST_OF_LIST_OF_LONG_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, this.mapStructListOfListOfLong.size()));
        for (Map.Entry<Integer, List<List<MyStruct>>> _iter380 : this.mapStructListOfListOfLong.entrySet())        {
          oprot.writeI32(_iter380.getKey());
          {
            oprot.writeListBegin(new TList(TType.LIST, _iter380.getValue().size()));
            for (List<MyStruct> _iter381 : _iter380.getValue())            {
              {
                oprot.writeListBegin(new TList(TType.STRUCT, _iter381.size()));
                for (MyStruct _iter382 : _iter381)                {
                  _iter382.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mKeyStructValInt != null) {
      oprot.writeFieldBegin(M_KEY_STRUCT_VAL_INT_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I32, this.mKeyStructValInt.size()));
        for (Map.Entry<MyStruct, Integer> _iter383 : this.mKeyStructValInt.entrySet())        {
          _iter383.getKey().write(oprot);
          oprot.writeI32(_iter383.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.listOfMapKeyIntValInt != null) {
      oprot.writeFieldBegin(LIST_OF_MAP_KEY_INT_VAL_INT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.MAP, this.listOfMapKeyIntValInt.size()));
        for (Map<Integer,Integer> _iter384 : this.listOfMapKeyIntValInt)        {
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter384.size()));
            for (Map.Entry<Integer, Integer> _iter385 : _iter384.entrySet())            {
              oprot.writeI32(_iter385.getKey());
              oprot.writeI32(_iter385.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.listOfMapKeyStrValList != null) {
      oprot.writeFieldBegin(LIST_OF_MAP_KEY_STR_VAL_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.MAP, this.listOfMapKeyStrValList.size()));
        for (Map<String,List<MyStruct>> _iter386 : this.listOfMapKeyStrValList)        {
          {
            oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter386.size()));
            for (Map.Entry<String, List<MyStruct>> _iter387 : _iter386.entrySet())            {
              oprot.writeString(_iter387.getKey());
              {
                oprot.writeListBegin(new TList(TType.STRUCT, _iter387.getValue().size()));
                for (MyStruct _iter388 : _iter387.getValue())                {
                  _iter388.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeySetValLong != null) {
      oprot.writeFieldBegin(MAP_KEY_SET_VAL_LONG_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.SET, TType.I64, this.mapKeySetValLong.size()));
        for (Map.Entry<Set<Integer>, Long> _iter389 : this.mapKeySetValLong.entrySet())        {
          {
            oprot.writeSetBegin(new TSet(TType.I32, _iter389.getKey().size()));
            for (int _iter390 : _iter389.getKey())            {
              oprot.writeI32(_iter390);
            }
            oprot.writeSetEnd();
          }
          oprot.writeI64(_iter389.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeyListValLong != null) {
      oprot.writeFieldBegin(MAP_KEY_LIST_VAL_LONG_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.LIST, TType.I32, this.mapKeyListValLong.size()));
        for (Map.Entry<List<String>, Integer> _iter391 : this.mapKeyListValLong.entrySet())        {
          {
            oprot.writeListBegin(new TList(TType.STRING, _iter391.getKey().size()));
            for (String _iter392 : _iter391.getKey())            {
              oprot.writeString(_iter392);
            }
            oprot.writeListEnd();
          }
          oprot.writeI32(_iter391.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeyMapValMap != null) {
      oprot.writeFieldBegin(MAP_KEY_MAP_VAL_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.MAP, TType.MAP, this.mapKeyMapValMap.size()));
        for (Map.Entry<Map<Integer,String>, Map<Integer,String>> _iter393 : this.mapKeyMapValMap.entrySet())        {
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _iter393.getKey().size()));
            for (Map.Entry<Integer, String> _iter394 : _iter393.getKey().entrySet())            {
              oprot.writeI32(_iter394.getKey());
              oprot.writeString(_iter394.getValue());
            }
            oprot.writeMapEnd();
          }
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _iter393.getValue().size()));
            for (Map.Entry<Integer, String> _iter395 : _iter393.getValue().entrySet())            {
              oprot.writeI32(_iter395.getKey());
              oprot.writeString(_iter395.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeySetValMap != null) {
      oprot.writeFieldBegin(MAP_KEY_SET_VAL_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.SET, TType.MAP, this.mapKeySetValMap.size()));
        for (Map.Entry<Set<List<Integer>>, Map<List<Set<String>>,String>> _iter396 : this.mapKeySetValMap.entrySet())        {
          {
            oprot.writeSetBegin(new TSet(TType.LIST, _iter396.getKey().size()));
            for (List<Integer> _iter397 : _iter396.getKey())            {
              {
                oprot.writeListBegin(new TList(TType.I32, _iter397.size()));
                for (int _iter398 : _iter397)                {
                  oprot.writeI32(_iter398);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeSetEnd();
          }
          {
            oprot.writeMapBegin(new TMap(TType.LIST, TType.STRING, _iter396.getValue().size()));
            for (Map.Entry<List<Set<String>>, String> _iter399 : _iter396.getValue().entrySet())            {
              {
                oprot.writeListBegin(new TList(TType.SET, _iter399.getKey().size()));
                for (Set<String> _iter400 : _iter399.getKey())                {
                  {
                    oprot.writeSetBegin(new TSet(TType.STRING, _iter400.size()));
                    for (String _iter401 : _iter400)                    {
                      oprot.writeString(_iter401);
                    }
                    oprot.writeSetEnd();
                  }
                }
                oprot.writeListEnd();
              }
              oprot.writeString(_iter399.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.NestedMaps != null) {
      oprot.writeFieldBegin(NESTED_MAPS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.MAP, TType.MAP, this.NestedMaps.size()));
        for (Map.Entry<Map<Map<Integer,String>,String>, Map<Integer,String>> _iter402 : this.NestedMaps.entrySet())        {
          {
            oprot.writeMapBegin(new TMap(TType.MAP, TType.STRING, _iter402.getKey().size()));
            for (Map.Entry<Map<Integer,String>, String> _iter403 : _iter402.getKey().entrySet())            {
              {
                oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _iter403.getKey().size()));
                for (Map.Entry<Integer, String> _iter404 : _iter403.getKey().entrySet())                {
                  oprot.writeI32(_iter404.getKey());
                  oprot.writeString(_iter404.getValue());
                }
                oprot.writeMapEnd();
              }
              oprot.writeString(_iter403.getValue());
            }
            oprot.writeMapEnd();
          }
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, _iter402.getValue().size()));
            for (Map.Entry<Integer, String> _iter405 : _iter402.getValue().entrySet())            {
              oprot.writeI32(_iter405.getKey());
              oprot.writeString(_iter405.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeyIntValList != null) {
      oprot.writeFieldBegin(MAP_KEY_INT_VAL_LIST_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, this.mapKeyIntValList.size()));
        for (Map.Entry<Integer, List<MyStruct>> _iter406 : this.mapKeyIntValList.entrySet())        {
          oprot.writeI32(_iter406.getKey());
          {
            oprot.writeListBegin(new TList(TType.STRUCT, _iter406.getValue().size()));
            for (MyStruct _iter407 : _iter406.getValue())            {
              _iter407.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeyIntValSet != null) {
      oprot.writeFieldBegin(MAP_KEY_INT_VAL_SET_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.SET, this.mapKeyIntValSet.size()));
        for (Map.Entry<Integer, Set<Boolean>> _iter408 : this.mapKeyIntValSet.entrySet())        {
          oprot.writeI32(_iter408.getKey());
          {
            oprot.writeSetBegin(new TSet(TType.BOOL, _iter408.getValue().size()));
            for (boolean _iter409 : _iter408.getValue())            {
              oprot.writeBool(_iter409);
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeySetValInt != null) {
      oprot.writeFieldBegin(MAP_KEY_SET_VAL_INT_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.SET, TType.I32, this.mapKeySetValInt.size()));
        for (Map.Entry<Set<Boolean>, MyEnum> _iter410 : this.mapKeySetValInt.entrySet())        {
          {
            oprot.writeSetBegin(new TSet(TType.BOOL, _iter410.getKey().size()));
            for (boolean _iter411 : _iter410.getKey())            {
              oprot.writeBool(_iter411);
            }
            oprot.writeSetEnd();
          }
          oprot.writeI32(_iter410.getValue() == null ? 0 : _iter410.getValue().getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapKeyListValSet != null) {
      oprot.writeFieldBegin(MAP_KEY_LIST_VAL_SET_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.LIST, TType.SET, this.mapKeyListValSet.size()));
        for (Map.Entry<List<Integer>, Set<Map<Double,String>>> _iter412 : this.mapKeyListValSet.entrySet())        {
          {
            oprot.writeListBegin(new TList(TType.I32, _iter412.getKey().size()));
            for (int _iter413 : _iter412.getKey())            {
              oprot.writeI32(_iter413);
            }
            oprot.writeListEnd();
          }
          {
            oprot.writeSetBegin(new TSet(TType.MAP, _iter412.getValue().size()));
            for (Map<Double,String> _iter414 : _iter412.getValue())            {
              {
                oprot.writeMapBegin(new TMap(TType.DOUBLE, TType.STRING, _iter414.size()));
                for (Map.Entry<Double, String> _iter415 : _iter414.entrySet())                {
                  oprot.writeDouble(_iter415.getKey());
                  oprot.writeString(_iter415.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ComplexNestedStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("setOfSetOfInt");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSetOfSetOfInt() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSetOfSetOfInt(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("listofListOfListOfListOfEnum");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getListofListOfListOfListOfEnum() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getListofListOfListOfListOfEnum(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("listOfListOfMyStruct");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getListOfListOfMyStruct() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getListOfListOfMyStruct(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("setOfListOfListOfLong");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSetOfListOfListOfLong() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSetOfListOfListOfLong(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("setOfSetOfsetOfLong");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSetOfSetOfsetOfLong() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSetOfSetOfsetOfLong(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapStructListOfListOfLong");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapStructListOfListOfLong() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapStructListOfListOfLong(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mKeyStructValInt");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMKeyStructValInt() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMKeyStructValInt(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("listOfMapKeyIntValInt");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getListOfMapKeyIntValInt() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getListOfMapKeyIntValInt(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("listOfMapKeyStrValList");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getListOfMapKeyStrValList() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getListOfMapKeyStrValList(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeySetValLong");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeySetValLong() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeySetValLong(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeyListValLong");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeyListValLong() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeyListValLong(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeyMapValMap");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeyMapValMap() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeyMapValMap(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeySetValMap");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeySetValMap() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeySetValMap(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("NestedMaps");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getNestedMaps() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getNestedMaps(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeyIntValList");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeyIntValList() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeyIntValList(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeyIntValSet");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeyIntValSet() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeyIntValSet(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeySetValInt");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeySetValInt() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeySetValInt(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("mapKeyListValSet");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMapKeyListValSet() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMapKeyListValSet(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

