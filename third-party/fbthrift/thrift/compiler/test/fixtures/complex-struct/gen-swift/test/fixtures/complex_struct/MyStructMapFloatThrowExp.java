/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.complex_struct;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.server.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@ThriftStruct(value="MyStructMapFloatThrowExp", builder=MyStructMapFloatThrowExp.Builder.class)
public final class MyStructMapFloatThrowExp {
    @ThriftConstructor
    public MyStructMapFloatThrowExp(
        @ThriftField(value=1, name="myLongField", requiredness=Requiredness.NONE) final long myLongField,
        @ThriftField(value=2, name="mapListOfFloats", requiredness=Requiredness.NONE) final Map<Integer, List<List<Float>>> mapListOfFloats
    ) {
        this.myLongField = myLongField;
        this.mapListOfFloats = mapListOfFloats;
    }
    
    @ThriftConstructor
    protected MyStructMapFloatThrowExp() {
      this.myLongField = 0L;
      this.mapListOfFloats = null;
    }
    
    public static class Builder {
        private long myLongField = 0L;
        private Map<Integer, List<List<Float>>> mapListOfFloats = null;
    
        @ThriftField(value=1, name="myLongField", requiredness=Requiredness.NONE)
        public Builder setMyLongField(long myLongField) {
            this.myLongField = myLongField;
            return this;
        }
        
        public long getMyLongField() { return myLongField; }
    
            @ThriftField(value=2, name="mapListOfFloats", requiredness=Requiredness.NONE)
        public Builder setMapListOfFloats(Map<Integer, List<List<Float>>> mapListOfFloats) {
            this.mapListOfFloats = mapListOfFloats;
            return this;
        }
        
        public Map<Integer, List<List<Float>>> getMapListOfFloats() { return mapListOfFloats; }
    
        public Builder() { }
        public Builder(MyStructMapFloatThrowExp other) {
            this.myLongField = other.myLongField;
            this.mapListOfFloats = other.mapListOfFloats;
        }
    
        @ThriftConstructor
        public MyStructMapFloatThrowExp build() {
            return new MyStructMapFloatThrowExp (
                this.myLongField,
                this.mapListOfFloats
            );
        }
    }
    
    private static final TStruct STRUCT_DESC = new TStruct("MyStructMapFloatThrowExp");
    private final long myLongField;
    public static final int _MYLONGFIELD = 1;
    private static final TField MY_LONG_FIELD_FIELD_DESC = new TField("myLongField", TType.I64, (short)1);
    private final Map<Integer, List<List<Float>>> mapListOfFloats;
    public static final int _MAPLISTOFFLOATS = 2;
    private static final TField MAP_LIST_OF_FLOATS_FIELD_DESC = null;

    
    @ThriftField(value=1, name="myLongField", requiredness=Requiredness.NONE)
    public long getMyLongField() { return myLongField; }
        
    @ThriftField(value=2, name="mapListOfFloats", requiredness=Requiredness.NONE)
    public Map<Integer, List<List<Float>>> getMapListOfFloats() { return mapListOfFloats; }
    
    @Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("myLongField", myLongField);
        helper.add("mapListOfFloats", mapListOfFloats);
        return helper.toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        MyStructMapFloatThrowExp other = (MyStructMapFloatThrowExp)o;
    
        return
            Objects.equals(myLongField, other.myLongField) &&
            Objects.equals(mapListOfFloats, other.mapListOfFloats) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            myLongField,
            mapListOfFloats
        });
    }
    
    
      // Currently, the read0 method cannot read metadatamap for JSON styled serialization.
      // Perhaps, it will be implemented in the future!
    public static MyStructMapFloatThrowExp read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin();
      MyStructMapFloatThrowExp.Builder builder = new MyStructMapFloatThrowExp.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _MYLONGFIELD:
          if (__field.type == TType.I64) {
            long myLongField = oprot.readI64();
            builder.setMyLongField(myLongField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MAPLISTOFFLOATS:
          throw new IllegalStateException("Struct contains an unsupported type in org.apache.thrift.protocol: Field:mapListOfFloats Type:Map<Integer, List<List<Float>>>");
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MY_LONG_FIELD_FIELD_DESC);
      oprot.writeI64(this.myLongField);
      oprot.writeFieldEnd();
      if (MAP_LIST_OF_FLOATS_FIELD_DESC == null){
        throw new IllegalStateException("Struct contains an unsupported type in org.apache.thrift.protocol: Field:mapListOfFloats Type:Map<Integer, List<List<Float>>>");
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
}
