// @generated by Thrift. This file is probably not the place you want to edit!

#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]

pub use self::errors::*;
pub use self::types::*;

pub mod types {
    #![allow(clippy::redundant_closure)]

    use fbthrift::{
        Deserialize, GetTType, ProtocolReader, ProtocolWriter, Serialize, TType,
    };

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Foo {
        pub myInteger: i32,
        pub myString: Option<String>,
        pub myBools: Vec<bool>,
        pub myNumbers: Vec<i32>,
    }

    impl Default for self::Foo {
        fn default() -> Self {
            Self {
                myInteger: Default::default(),
                myString: None,
                myBools: Default::default(),
                myNumbers: Default::default(),
            }
        }
    }

    impl GetTType for self::Foo {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::Foo {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("Foo");
            p.write_field_begin("myInteger", TType::I32, 1);
            Serialize::write(&self.myInteger, p);
            p.write_field_end();
            if let Some(some) = &self.myString {
                p.write_field_begin("myString", TType::String, 2);
                Serialize::write(some, p);
                p.write_field_end();
            }
            p.write_field_begin("myBools", TType::List, 3);
            Serialize::write(&self.myBools, p);
            p.write_field_end();
            p.write_field_begin("myNumbers", TType::List, 4);
            Serialize::write(&self.myNumbers, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::Foo {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_myInteger = None;
            let mut field_myString = None;
            let mut field_myBools = None;
            let mut field_myNumbers = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I32, 1) => field_myInteger = Some(Deserialize::read(p)?),
                    (TType::String, 2) => field_myString = Some(Deserialize::read(p)?),
                    (TType::List, 3) => field_myBools = Some(Deserialize::read(p)?),
                    (TType::List, 4) => field_myNumbers = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                myInteger: field_myInteger.unwrap_or_default(),
                myString: field_myString,
                myBools: field_myBools.unwrap_or_default(),
                myNumbers: field_myNumbers.unwrap_or_default(),
            })
        }
    }

}

pub mod errors {
}
