#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libc.stdint cimport (
    int8_t as cint8_t,
    int16_t as cint16_t,
    int32_t as cint32_t,
    int64_t as cint64_t,
    uint32_t as cuint32_t,
)
from libcpp.string cimport string
from libcpp cimport bool as cbool, nullptr, nullptr_t
from cpython cimport bool as pbool
from libcpp.memory cimport shared_ptr, unique_ptr
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap, pair as cpair
from thrift.py3.exceptions cimport cTException
cimport folly.iobuf as __iobuf
cimport thrift.py3.exceptions
cimport thrift.py3.types
from thrift.py3.types cimport bstring, move, optional_field_ref
from folly.optional cimport cOptional
cimport include.types as _include_types

cdef extern from * nogil:
    cdef cppclass std_unordered_map "std::unordered_map"[T, U]:
        ctypedef T key_type
        ctypedef U mapped_type
        ctypedef size_t size_type

        cppclass iterator:
            cpair[T, U]& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            cpair[T, U]& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        std_unordered_map() except +
        std_unordered_map(std_unordered_map&) except +

        U& operator[](T&)
        iterator find(const T&)
        size_type count(const T&)
        size_type size()
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from * nogil:
    cdef cppclass std_list "std::list"[T]:
        ctypedef T value_type
        ctypedef size_t size_type

        cppclass iterator:
            T& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            T& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        std_list() except +
        std_list(std_list&) except +

        T& operator[](size_type)
        void push_back(T&) except +
        size_type size()
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from * nogil:
    cdef cppclass std_deque "std::deque"[T]:
        ctypedef T value_type
        ctypedef size_t size_type

        cppclass iterator:
            T& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            T& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        std_deque() except +
        std_deque(std_deque&) except +

        T& operator[](size_type)
        void push_back(T&) except +
        size_type size()
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from * nogil:
    cdef cppclass folly_fbvector "folly::fbvector"[T]:
        ctypedef T value_type
        ctypedef size_t size_type

        cppclass iterator:
            T& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            T& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        folly_fbvector() except +
        folly_fbvector(folly_fbvector&) except +

        T& operator[](size_type)
        void push_back(T&) except +
        size_type size()
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from * nogil:
    cdef cppclass folly_small_vector "folly::small_vector"[T]:
        ctypedef T value_type
        ctypedef size_t size_type

        cppclass iterator:
            T& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            T& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        folly_small_vector() except +
        folly_small_vector(folly_small_vector&) except +

        T& operator[](size_type)
        void push_back(T&) except +
        size_type size()
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from * nogil:
    cdef cppclass folly_sorted_vector_set "folly::sorted_vector_set"[T]:
        ctypedef T value_type
        ctypedef size_t size_type

        cppclass iterator:
            T& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            T& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        folly_sorted_vector_set() except +
        folly_sorted_vector_set(folly_sorted_vector_set&) except +

        cpair[iterator, bint] insert(const T&) except +
        size_type size()
        size_type count(const T&)
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from * nogil:
    cdef cppclass folly_sorted_vector_map "folly::sorted_vector_map"[T, U]:
        ctypedef T key_type
        ctypedef U mapped_type
        ctypedef size_t size_type

        cppclass iterator:
            cpair[T, U]& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            cpair[T, U]& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        folly_sorted_vector_map() except +
        folly_sorted_vector_map(folly_sorted_vector_map&) except +

        U& operator[](T&)
        iterator find(const T&)
        size_type count(const T&)
        size_type size()
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from * nogil:
    cdef cppclass std_list_int32_t "std::list<int32_t>":
        ctypedef cint32_t value_type
        ctypedef size_t size_type

        cppclass iterator:
            cint32_t& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            cint32_t& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        std_list_int32_t() except +
        std_list_int32_t(std_list_int32_t&) except +

        cint32_t& operator[](size_type)
        void push_back(cint32_t&) except +
        size_type size()
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()


cdef extern from "src/gen-cpp2/module_types.h" namespace "::apache::thrift::fixtures::types":
    cdef cppclass chas_bitwise_ops "::apache::thrift::fixtures::types::has_bitwise_ops":
        bint operator==(chas_bitwise_ops&)
        bint operator!=(chas_bitwise_ops&)
    chas_bitwise_ops has_bitwise_ops__none "::apache::thrift::fixtures::types::has_bitwise_ops::none"
    chas_bitwise_ops has_bitwise_ops__zero "::apache::thrift::fixtures::types::has_bitwise_ops::zero"
    chas_bitwise_ops has_bitwise_ops__one "::apache::thrift::fixtures::types::has_bitwise_ops::one"
    chas_bitwise_ops has_bitwise_ops__two "::apache::thrift::fixtures::types::has_bitwise_ops::two"
    chas_bitwise_ops has_bitwise_ops__three "::apache::thrift::fixtures::types::has_bitwise_ops::three"
    cdef cppclass cis_unscoped "::apache::thrift::fixtures::types::is_unscoped":
        bint operator==(cis_unscoped&)
        bint operator!=(cis_unscoped&)
    cis_unscoped is_unscoped__hello "::apache::thrift::fixtures::types::is_unscoped::hello"
    cis_unscoped is_unscoped__world "::apache::thrift::fixtures::types::is_unscoped::world"
    cdef cppclass cMyForwardRefEnum "::apache::thrift::fixtures::types::MyForwardRefEnum":
        bint operator==(cMyForwardRefEnum&)
        bint operator!=(cMyForwardRefEnum&)
    cMyForwardRefEnum MyForwardRefEnum__ZERO "::apache::thrift::fixtures::types::MyForwardRefEnum::ZERO"
    cMyForwardRefEnum MyForwardRefEnum__NONZERO "::apache::thrift::fixtures::types::MyForwardRefEnum::NONZERO"
    cdef cppclass cMyEnumA "::apache::thrift::fixtures::types::MyEnumA":
        bint operator==(cMyEnumA&)
        bint operator!=(cMyEnumA&)
    cMyEnumA MyEnumA__fieldA "::apache::thrift::fixtures::types::MyEnumA::fieldA"
    cMyEnumA MyEnumA__fieldB "::apache::thrift::fixtures::types::MyEnumA::fieldB"
    cMyEnumA MyEnumA__fieldC "::apache::thrift::fixtures::types::MyEnumA::fieldC"




cdef class has_bitwise_ops(thrift.py3.types.CompiledEnum):
    pass


cdef chas_bitwise_ops has_bitwise_ops_to_cpp(has_bitwise_ops value)




cdef class is_unscoped(thrift.py3.types.CompiledEnum):
    pass


cdef cis_unscoped is_unscoped_to_cpp(is_unscoped value)




cdef class MyForwardRefEnum(thrift.py3.types.CompiledEnum):
    pass


cdef cMyForwardRefEnum MyForwardRefEnum_to_cpp(MyForwardRefEnum value)




cdef class MyEnumA(thrift.py3.types.CompiledEnum):
    pass


cdef cMyEnumA MyEnumA_to_cpp(MyEnumA value)



cdef extern from "src/gen-cpp2/module_types_custom_protocol.h" namespace "::apache::thrift::fixtures::types":
    # Forward Declaration
    cdef cppclass cdecorated_struct "::apache::thrift::fixtures::types::decorated_struct"
    # Forward Declaration
    cdef cppclass cContainerStruct "::apache::thrift::fixtures::types::ContainerStruct"
    # Forward Declaration
    cdef cppclass cCppTypeStruct "::apache::thrift::fixtures::types::CppTypeStruct"
    # Forward Declaration
    cdef cppclass cVirtualStruct "::apache::thrift::fixtures::types::VirtualStruct"
    # Forward Declaration
    cdef cppclass cMyStructWithForwardRefEnum "::apache::thrift::fixtures::types::MyStructWithForwardRefEnum"
    # Forward Declaration
    cdef cppclass cTrivialNumeric "::apache::thrift::fixtures::types::TrivialNumeric"
    # Forward Declaration
    cdef cppclass cTrivialNestedWithDefault "::apache::thrift::fixtures::types::TrivialNestedWithDefault"
    # Forward Declaration
    cdef cppclass cComplexString "::apache::thrift::fixtures::types::ComplexString"
    # Forward Declaration
    cdef cppclass cComplexNestedWithDefault "::apache::thrift::fixtures::types::ComplexNestedWithDefault"
    # Forward Declaration
    cdef cppclass cMinPadding "::apache::thrift::fixtures::types::MinPadding"
    # Forward Declaration
    cdef cppclass cMyStruct "::apache::thrift::fixtures::types::MyStruct"
    # Forward Declaration
    cdef cppclass cMyDataItem "::apache::thrift::fixtures::types::MyDataItem"
    # Forward Declaration
    cdef cppclass cRenaming "::apache::thrift::fixtures::types::Renaming"
    # Forward Declaration
    cdef cppclass cAnnotatedTypes "::apache::thrift::fixtures::types::AnnotatedTypes"
    # Forward Declaration
    cdef cppclass cForwardUsageRoot "::apache::thrift::fixtures::types::ForwardUsageRoot"
    # Forward Declaration
    cdef cppclass cForwardUsageStruct "::apache::thrift::fixtures::types::ForwardUsageStruct"
    # Forward Declaration
    cdef cppclass cForwardUsageByRef "::apache::thrift::fixtures::types::ForwardUsageByRef"
    # Forward Declaration
    cdef cppclass cNoexceptMoveEmpty "::apache::thrift::fixtures::types::NoexceptMoveEmpty"
    # Forward Declaration
    cdef cppclass cNoexceptMoveSimpleStruct "::apache::thrift::fixtures::types::NoexceptMoveSimpleStruct"
    # Forward Declaration
    cdef cppclass cNoexceptMoveComplexStruct "::apache::thrift::fixtures::types::NoexceptMoveComplexStruct"
    # Forward Declaration
    cdef cppclass cNoExceptMoveUnion "::apache::thrift::fixtures::types::NoExceptMoveUnion"

cdef extern from "src/gen-cpp2/module_types.h" namespace "::apache::thrift::fixtures::types":
    cdef cppclass cdecorated_struct__isset "::apache::thrift::fixtures::types::decorated_struct::__isset":
        bint field

    cdef cppclass cdecorated_struct "::apache::thrift::fixtures::types::decorated_struct":
        cdecorated_struct() except +
        cdecorated_struct(const cdecorated_struct&) except +
        bint operator==(cdecorated_struct&)
        bint operator!=(cdecorated_struct&)
        bint operator<(cdecorated_struct&)
        bint operator>(cdecorated_struct&)
        bint operator<=(cdecorated_struct&)
        bint operator>=(cdecorated_struct&)
        string field
        cdecorated_struct__isset __isset

    cdef cppclass cContainerStruct__isset "::apache::thrift::fixtures::types::ContainerStruct::__isset":
        bint fieldA
        bint fieldB
        bint fieldC
        bint fieldD
        bint fieldE
        bint fieldF
        bint fieldG
        bint fieldH

    cdef cppclass cContainerStruct "::apache::thrift::fixtures::types::ContainerStruct":
        cContainerStruct() except +
        cContainerStruct(const cContainerStruct&) except +
        bint operator==(cContainerStruct&)
        bint operator!=(cContainerStruct&)
        vector[cint32_t] fieldA
        std_list[cint32_t] fieldB
        std_deque[cint32_t] fieldC
        folly_fbvector[cint32_t] fieldD
        folly_small_vector[cint32_t] fieldE
        folly_sorted_vector_set[cint32_t] fieldF
        folly_sorted_vector_map[cint32_t,string] fieldG
        std_unordered_map[cint32_t,string] fieldH
        cContainerStruct__isset __isset

    cdef cppclass cCppTypeStruct__isset "::apache::thrift::fixtures::types::CppTypeStruct::__isset":
        bint fieldA

    cdef cppclass cCppTypeStruct "::apache::thrift::fixtures::types::CppTypeStruct":
        cCppTypeStruct() except +
        cCppTypeStruct(const cCppTypeStruct&) except +
        bint operator==(cCppTypeStruct&)
        bint operator!=(cCppTypeStruct&)
        bint operator<(cCppTypeStruct&)
        bint operator>(cCppTypeStruct&)
        bint operator<=(cCppTypeStruct&)
        bint operator>=(cCppTypeStruct&)
        std_list_int32_t fieldA
        cCppTypeStruct__isset __isset

    cdef cppclass cVirtualStruct__isset "::apache::thrift::fixtures::types::VirtualStruct::__isset":
        bint MyIntField

    cdef cppclass cVirtualStruct "::apache::thrift::fixtures::types::VirtualStruct":
        cVirtualStruct() except +
        cVirtualStruct(const cVirtualStruct&) except +
        bint operator==(cVirtualStruct&)
        bint operator!=(cVirtualStruct&)
        bint operator<(cVirtualStruct&)
        bint operator>(cVirtualStruct&)
        bint operator<=(cVirtualStruct&)
        bint operator>=(cVirtualStruct&)
        cint64_t MyIntField
        cVirtualStruct__isset __isset

    cdef cppclass cMyStructWithForwardRefEnum__isset "::apache::thrift::fixtures::types::MyStructWithForwardRefEnum::__isset":
        bint a
        bint b

    cdef cppclass cMyStructWithForwardRefEnum "::apache::thrift::fixtures::types::MyStructWithForwardRefEnum":
        cMyStructWithForwardRefEnum() except +
        cMyStructWithForwardRefEnum(const cMyStructWithForwardRefEnum&) except +
        bint operator==(cMyStructWithForwardRefEnum&)
        bint operator!=(cMyStructWithForwardRefEnum&)
        bint operator<(cMyStructWithForwardRefEnum&)
        bint operator>(cMyStructWithForwardRefEnum&)
        bint operator<=(cMyStructWithForwardRefEnum&)
        bint operator>=(cMyStructWithForwardRefEnum&)
        cMyForwardRefEnum a
        cMyForwardRefEnum b
        cMyStructWithForwardRefEnum__isset __isset

    cdef cppclass cTrivialNumeric__isset "::apache::thrift::fixtures::types::TrivialNumeric::__isset":
        bint a
        bint b

    cdef cppclass cTrivialNumeric "::apache::thrift::fixtures::types::TrivialNumeric":
        cTrivialNumeric() except +
        cTrivialNumeric(const cTrivialNumeric&) except +
        bint operator==(cTrivialNumeric&)
        bint operator!=(cTrivialNumeric&)
        bint operator<(cTrivialNumeric&)
        bint operator>(cTrivialNumeric&)
        bint operator<=(cTrivialNumeric&)
        bint operator>=(cTrivialNumeric&)
        cint32_t a
        cbool b
        cTrivialNumeric__isset __isset

    cdef cppclass cTrivialNestedWithDefault__isset "::apache::thrift::fixtures::types::TrivialNestedWithDefault::__isset":
        bint z
        bint n

    cdef cppclass cTrivialNestedWithDefault "::apache::thrift::fixtures::types::TrivialNestedWithDefault":
        cTrivialNestedWithDefault() except +
        cTrivialNestedWithDefault(const cTrivialNestedWithDefault&) except +
        bint operator==(cTrivialNestedWithDefault&)
        bint operator!=(cTrivialNestedWithDefault&)
        bint operator<(cTrivialNestedWithDefault&)
        bint operator>(cTrivialNestedWithDefault&)
        bint operator<=(cTrivialNestedWithDefault&)
        bint operator>=(cTrivialNestedWithDefault&)
        cint32_t z
        cTrivialNumeric n
        cTrivialNestedWithDefault__isset __isset

    cdef cppclass cComplexString__isset "::apache::thrift::fixtures::types::ComplexString::__isset":
        bint a
        bint b

    cdef cppclass cComplexString "::apache::thrift::fixtures::types::ComplexString":
        cComplexString() except +
        cComplexString(const cComplexString&) except +
        bint operator==(cComplexString&)
        bint operator!=(cComplexString&)
        bint operator<(cComplexString&)
        bint operator>(cComplexString&)
        bint operator<=(cComplexString&)
        bint operator>=(cComplexString&)
        string a
        cmap[string,cint32_t] b
        cComplexString__isset __isset

    cdef cppclass cComplexNestedWithDefault__isset "::apache::thrift::fixtures::types::ComplexNestedWithDefault::__isset":
        bint z
        bint n

    cdef cppclass cComplexNestedWithDefault "::apache::thrift::fixtures::types::ComplexNestedWithDefault":
        cComplexNestedWithDefault() except +
        cComplexNestedWithDefault(const cComplexNestedWithDefault&) except +
        bint operator==(cComplexNestedWithDefault&)
        bint operator!=(cComplexNestedWithDefault&)
        bint operator<(cComplexNestedWithDefault&)
        bint operator>(cComplexNestedWithDefault&)
        bint operator<=(cComplexNestedWithDefault&)
        bint operator>=(cComplexNestedWithDefault&)
        string z
        cComplexString n
        cComplexNestedWithDefault__isset __isset

    cdef cppclass cMinPadding__isset "::apache::thrift::fixtures::types::MinPadding::__isset":
        bint small
        bint big
        bint medium
        bint biggish
        bint tiny

    cdef cppclass cMinPadding "::apache::thrift::fixtures::types::MinPadding":
        cMinPadding() except +
        cMinPadding(const cMinPadding&) except +
        bint operator==(cMinPadding&)
        bint operator!=(cMinPadding&)
        bint operator<(cMinPadding&)
        bint operator>(cMinPadding&)
        bint operator<=(cMinPadding&)
        bint operator>=(cMinPadding&)
        cint8_t small
        cint64_t big
        cint16_t medium
        cint32_t biggish
        cint8_t tiny
        cMinPadding__isset __isset

    cdef cppclass cMyStruct__isset "::apache::thrift::fixtures::types::MyStruct::__isset":
        bint MyIntField
        bint MyStringField
        bint majorVer
        bint data

    cdef cppclass cMyStruct "::apache::thrift::fixtures::types::MyStruct":
        cMyStruct() except +
        cMyStruct(const cMyStruct&) except +
        cint64_t MyIntField
        string MyStringField
        cint64_t majorVer
        cMyDataItem data
        cMyStruct__isset __isset

    cdef cppclass cMyDataItem__isset "::apache::thrift::fixtures::types::MyDataItem::__isset":
        pass

    cdef cppclass cMyDataItem "::apache::thrift::fixtures::types::MyDataItem":
        cMyDataItem() except +
        cMyDataItem(const cMyDataItem&) except +
        cMyDataItem__isset __isset

    cdef cppclass cRenaming__isset "::apache::thrift::fixtures::types::Renaming::__isset":
        bint foo "bar"

    cdef cppclass cRenaming "::apache::thrift::fixtures::types::Renaming":
        cRenaming() except +
        cRenaming(const cRenaming&) except +
        bint operator==(cRenaming&)
        bint operator!=(cRenaming&)
        bint operator<(cRenaming&)
        bint operator>(cRenaming&)
        bint operator<=(cRenaming&)
        bint operator>=(cRenaming&)
        cint64_t foo "bar"
        cRenaming__isset __isset

    cdef cppclass cAnnotatedTypes__isset "::apache::thrift::fixtures::types::AnnotatedTypes::__isset":
        bint binary_field
        bint list_field

    cdef cppclass cAnnotatedTypes "::apache::thrift::fixtures::types::AnnotatedTypes":
        cAnnotatedTypes() except +
        cAnnotatedTypes(const cAnnotatedTypes&) except +
        bint operator==(cAnnotatedTypes&)
        bint operator!=(cAnnotatedTypes&)
        string binary_field
        vector[std_unordered_map[cint32_t,string]] list_field
        cAnnotatedTypes__isset __isset

    cdef cppclass cForwardUsageRoot__isset "::apache::thrift::fixtures::types::ForwardUsageRoot::__isset":
        bint ForwardUsageStruct
        bint ForwardUsageByRef

    cdef cppclass cForwardUsageRoot "::apache::thrift::fixtures::types::ForwardUsageRoot":
        cForwardUsageRoot() except +
        cForwardUsageRoot(const cForwardUsageRoot&) except +
        bint operator==(cForwardUsageRoot&)
        bint operator!=(cForwardUsageRoot&)
        bint operator<(cForwardUsageRoot&)
        bint operator>(cForwardUsageRoot&)
        bint operator<=(cForwardUsageRoot&)
        bint operator>=(cForwardUsageRoot&)
        optional_field_ref[cForwardUsageStruct] ForwardUsageStruct_ref()
        unique_ptr[cForwardUsageByRef] ForwardUsageByRef
        cForwardUsageRoot__isset __isset

    cdef cppclass cForwardUsageStruct__isset "::apache::thrift::fixtures::types::ForwardUsageStruct::__isset":
        bint foo

    cdef cppclass cForwardUsageStruct "::apache::thrift::fixtures::types::ForwardUsageStruct":
        cForwardUsageStruct() except +
        cForwardUsageStruct(const cForwardUsageStruct&) except +
        bint operator==(cForwardUsageStruct&)
        bint operator!=(cForwardUsageStruct&)
        bint operator<(cForwardUsageStruct&)
        bint operator>(cForwardUsageStruct&)
        bint operator<=(cForwardUsageStruct&)
        bint operator>=(cForwardUsageStruct&)
        optional_field_ref[cForwardUsageRoot] foo_ref()
        cForwardUsageStruct__isset __isset

    cdef cppclass cForwardUsageByRef__isset "::apache::thrift::fixtures::types::ForwardUsageByRef::__isset":
        bint foo

    cdef cppclass cForwardUsageByRef "::apache::thrift::fixtures::types::ForwardUsageByRef":
        cForwardUsageByRef() except +
        cForwardUsageByRef(const cForwardUsageByRef&) except +
        bint operator==(cForwardUsageByRef&)
        bint operator!=(cForwardUsageByRef&)
        bint operator<(cForwardUsageByRef&)
        bint operator>(cForwardUsageByRef&)
        bint operator<=(cForwardUsageByRef&)
        bint operator>=(cForwardUsageByRef&)
        optional_field_ref[cForwardUsageRoot] foo_ref()
        cForwardUsageByRef__isset __isset

    cdef cppclass cNoexceptMoveEmpty__isset "::apache::thrift::fixtures::types::NoexceptMoveEmpty::__isset":
        pass

    cdef cppclass cNoexceptMoveEmpty "::apache::thrift::fixtures::types::NoexceptMoveEmpty":
        cNoexceptMoveEmpty() except +
        cNoexceptMoveEmpty(const cNoexceptMoveEmpty&) except +
        bint operator==(cNoexceptMoveEmpty&)
        bint operator!=(cNoexceptMoveEmpty&)
        bint operator<(cNoexceptMoveEmpty&)
        bint operator>(cNoexceptMoveEmpty&)
        bint operator<=(cNoexceptMoveEmpty&)
        bint operator>=(cNoexceptMoveEmpty&)
        cNoexceptMoveEmpty__isset __isset

    cdef cppclass cNoexceptMoveSimpleStruct__isset "::apache::thrift::fixtures::types::NoexceptMoveSimpleStruct::__isset":
        bint boolField

    cdef cppclass cNoexceptMoveSimpleStruct "::apache::thrift::fixtures::types::NoexceptMoveSimpleStruct":
        cNoexceptMoveSimpleStruct() except +
        cNoexceptMoveSimpleStruct(const cNoexceptMoveSimpleStruct&) except +
        bint operator==(cNoexceptMoveSimpleStruct&)
        bint operator!=(cNoexceptMoveSimpleStruct&)
        bint operator<(cNoexceptMoveSimpleStruct&)
        bint operator>(cNoexceptMoveSimpleStruct&)
        bint operator<=(cNoexceptMoveSimpleStruct&)
        bint operator>=(cNoexceptMoveSimpleStruct&)
        cint64_t boolField
        cNoexceptMoveSimpleStruct__isset __isset

    cdef cppclass cNoexceptMoveComplexStruct__isset "::apache::thrift::fixtures::types::NoexceptMoveComplexStruct::__isset":
        bint MyBoolField
        bint MyIntField
        bint MyStringField
        bint MyStringField2
        bint MyBinaryField
        bint MyBinaryField2
        bint MyBinaryField3
        bint MyBinaryListField4
        bint MyMapEnumAndInt

    cdef cppclass cNoexceptMoveComplexStruct "::apache::thrift::fixtures::types::NoexceptMoveComplexStruct":
        cNoexceptMoveComplexStruct() except +
        cNoexceptMoveComplexStruct(const cNoexceptMoveComplexStruct&) except +
        bint operator==(cNoexceptMoveComplexStruct&)
        bint operator!=(cNoexceptMoveComplexStruct&)
        bint operator<(cNoexceptMoveComplexStruct&)
        bint operator>(cNoexceptMoveComplexStruct&)
        bint operator<=(cNoexceptMoveComplexStruct&)
        bint operator>=(cNoexceptMoveComplexStruct&)
        cbool MyBoolField
        cint64_t MyIntField
        string MyStringField
        string MyStringField2
        string MyBinaryField
        optional_field_ref[string] MyBinaryField2_ref()
        string MyBinaryField3
        vector[string] MyBinaryListField4
        cmap[cMyEnumA,string] MyMapEnumAndInt
        cNoexceptMoveComplexStruct__isset __isset

    cdef enum cNoExceptMoveUnion__type "::apache::thrift::fixtures::types::NoExceptMoveUnion::Type":
        cNoExceptMoveUnion__type___EMPTY__ "::apache::thrift::fixtures::types::NoExceptMoveUnion::Type::__EMPTY__",
        cNoExceptMoveUnion__type_string_field "::apache::thrift::fixtures::types::NoExceptMoveUnion::Type::string_field",
        cNoExceptMoveUnion__type_i32_field "::apache::thrift::fixtures::types::NoExceptMoveUnion::Type::i32_field",

    cdef cppclass cNoExceptMoveUnion "::apache::thrift::fixtures::types::NoExceptMoveUnion":
        cNoExceptMoveUnion() except +
        cNoExceptMoveUnion(const cNoExceptMoveUnion&) except +
        bint operator==(cNoExceptMoveUnion&)
        bint operator!=(cNoExceptMoveUnion&)
        bint operator<(cNoExceptMoveUnion&)
        bint operator>(cNoExceptMoveUnion&)
        bint operator<=(cNoExceptMoveUnion&)
        bint operator>=(cNoExceptMoveUnion&)
        cNoExceptMoveUnion__type getType() const
        const string& get_string_field() const
        string& set_string_field(const string&)
        const cint32_t& get_i32_field() const
        cint32_t& set_i32_field(const cint32_t&)

    cdef shared_ptr[vector[cint32_t]] reference_shared_ptr_fieldA "thrift::py3::reference_shared_ptr<std::vector<int32_t>>"(shared_ptr[cContainerStruct]&, vector[cint32_t]&)
    cdef shared_ptr[std_list[cint32_t]] reference_shared_ptr_fieldB "thrift::py3::reference_shared_ptr<std::list<int32_t>>"(shared_ptr[cContainerStruct]&, std_list[cint32_t]&)
    cdef shared_ptr[std_deque[cint32_t]] reference_shared_ptr_fieldC "thrift::py3::reference_shared_ptr<std::deque<int32_t>>"(shared_ptr[cContainerStruct]&, std_deque[cint32_t]&)
    cdef shared_ptr[folly_fbvector[cint32_t]] reference_shared_ptr_fieldD "thrift::py3::reference_shared_ptr<folly::fbvector<int32_t>>"(shared_ptr[cContainerStruct]&, folly_fbvector[cint32_t]&)
    cdef shared_ptr[folly_small_vector[cint32_t]] reference_shared_ptr_fieldE "thrift::py3::reference_shared_ptr<folly::small_vector<int32_t>>"(shared_ptr[cContainerStruct]&, folly_small_vector[cint32_t]&)
    cdef shared_ptr[folly_sorted_vector_set[cint32_t]] reference_shared_ptr_fieldF "thrift::py3::reference_shared_ptr<folly::sorted_vector_set<int32_t>>"(shared_ptr[cContainerStruct]&, folly_sorted_vector_set[cint32_t]&)
    cdef shared_ptr[folly_sorted_vector_map[cint32_t,string]] reference_shared_ptr_fieldG "thrift::py3::reference_shared_ptr<folly::sorted_vector_map<int32_t,std::string>>"(shared_ptr[cContainerStruct]&, folly_sorted_vector_map[cint32_t,string]&)
    cdef shared_ptr[std_unordered_map[cint32_t,string]] reference_shared_ptr_fieldH "thrift::py3::reference_shared_ptr<std::unordered_map<int32_t,std::string>>"(shared_ptr[cContainerStruct]&, std_unordered_map[cint32_t,string]&)
    cdef shared_ptr[std_list_int32_t] reference_shared_ptr_fieldA "thrift::py3::reference_shared_ptr<std::list<int32_t>>"(shared_ptr[cCppTypeStruct]&, std_list_int32_t&)
    cdef shared_ptr[cTrivialNumeric] reference_shared_ptr_n "thrift::py3::reference_shared_ptr<::apache::thrift::fixtures::types::TrivialNumeric>"(shared_ptr[cTrivialNestedWithDefault]&, cTrivialNumeric&)
    cdef shared_ptr[cmap[string,cint32_t]] reference_shared_ptr_b "thrift::py3::reference_shared_ptr<std::map<std::string,int32_t>>"(shared_ptr[cComplexString]&, cmap[string,cint32_t]&)
    cdef shared_ptr[cComplexString] reference_shared_ptr_n "thrift::py3::reference_shared_ptr<::apache::thrift::fixtures::types::ComplexString>"(shared_ptr[cComplexNestedWithDefault]&, cComplexString&)
    cdef shared_ptr[cMyDataItem] reference_shared_ptr_data "thrift::py3::reference_shared_ptr<::apache::thrift::fixtures::types::MyDataItem>"(shared_ptr[cMyStruct]&, cMyDataItem&)
    cdef shared_ptr[vector[std_unordered_map[cint32_t,string]]] reference_shared_ptr_list_field "thrift::py3::reference_shared_ptr<std::vector<std::unordered_map<int32_t,std::string>>>"(shared_ptr[cAnnotatedTypes]&, vector[std_unordered_map[cint32_t,string]]&)
    cdef shared_ptr[cForwardUsageStruct] reference_shared_ptr_ForwardUsageStruct "thrift::py3::reference_shared_ptr<::apache::thrift::fixtures::types::ForwardUsageStruct>"(shared_ptr[cForwardUsageRoot]&, cForwardUsageStruct&)
    cdef shared_ptr[cForwardUsageByRef] reference_shared_ptr_ForwardUsageByRef "thrift::py3::reference_shared_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef>"(shared_ptr[cForwardUsageRoot]&, cForwardUsageByRef&)
    cdef shared_ptr[cForwardUsageRoot] reference_shared_ptr_foo "thrift::py3::reference_shared_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>"(shared_ptr[cForwardUsageStruct]&, cForwardUsageRoot&)
    cdef shared_ptr[cForwardUsageRoot] reference_shared_ptr_foo "thrift::py3::reference_shared_ptr<::apache::thrift::fixtures::types::ForwardUsageRoot>"(shared_ptr[cForwardUsageByRef]&, cForwardUsageRoot&)
    cdef shared_ptr[vector[string]] reference_shared_ptr_MyBinaryListField4 "thrift::py3::reference_shared_ptr<std::vector<std::string>>"(shared_ptr[cNoexceptMoveComplexStruct]&, vector[string]&)
    cdef shared_ptr[cmap[cMyEnumA,string]] reference_shared_ptr_MyMapEnumAndInt "thrift::py3::reference_shared_ptr<std::map<::apache::thrift::fixtures::types::MyEnumA,std::string>>"(shared_ptr[cNoexceptMoveComplexStruct]&, cmap[cMyEnumA,string]&)

cdef extern from "<utility>" namespace "std" nogil:
    cdef shared_ptr[cdecorated_struct] move(unique_ptr[cdecorated_struct])
    cdef shared_ptr[cdecorated_struct] move_shared "std::move"(shared_ptr[cdecorated_struct])
    cdef unique_ptr[cdecorated_struct] move_unique "std::move"(unique_ptr[cdecorated_struct])
    cdef shared_ptr[cContainerStruct] move(unique_ptr[cContainerStruct])
    cdef shared_ptr[cContainerStruct] move_shared "std::move"(shared_ptr[cContainerStruct])
    cdef unique_ptr[cContainerStruct] move_unique "std::move"(unique_ptr[cContainerStruct])
    cdef shared_ptr[cCppTypeStruct] move(unique_ptr[cCppTypeStruct])
    cdef shared_ptr[cCppTypeStruct] move_shared "std::move"(shared_ptr[cCppTypeStruct])
    cdef unique_ptr[cCppTypeStruct] move_unique "std::move"(unique_ptr[cCppTypeStruct])
    cdef shared_ptr[cVirtualStruct] move(unique_ptr[cVirtualStruct])
    cdef shared_ptr[cVirtualStruct] move_shared "std::move"(shared_ptr[cVirtualStruct])
    cdef unique_ptr[cVirtualStruct] move_unique "std::move"(unique_ptr[cVirtualStruct])
    cdef shared_ptr[cMyStructWithForwardRefEnum] move(unique_ptr[cMyStructWithForwardRefEnum])
    cdef shared_ptr[cMyStructWithForwardRefEnum] move_shared "std::move"(shared_ptr[cMyStructWithForwardRefEnum])
    cdef unique_ptr[cMyStructWithForwardRefEnum] move_unique "std::move"(unique_ptr[cMyStructWithForwardRefEnum])
    cdef shared_ptr[cTrivialNumeric] move(unique_ptr[cTrivialNumeric])
    cdef shared_ptr[cTrivialNumeric] move_shared "std::move"(shared_ptr[cTrivialNumeric])
    cdef unique_ptr[cTrivialNumeric] move_unique "std::move"(unique_ptr[cTrivialNumeric])
    cdef shared_ptr[cTrivialNestedWithDefault] move(unique_ptr[cTrivialNestedWithDefault])
    cdef shared_ptr[cTrivialNestedWithDefault] move_shared "std::move"(shared_ptr[cTrivialNestedWithDefault])
    cdef unique_ptr[cTrivialNestedWithDefault] move_unique "std::move"(unique_ptr[cTrivialNestedWithDefault])
    cdef shared_ptr[cComplexString] move(unique_ptr[cComplexString])
    cdef shared_ptr[cComplexString] move_shared "std::move"(shared_ptr[cComplexString])
    cdef unique_ptr[cComplexString] move_unique "std::move"(unique_ptr[cComplexString])
    cdef shared_ptr[cComplexNestedWithDefault] move(unique_ptr[cComplexNestedWithDefault])
    cdef shared_ptr[cComplexNestedWithDefault] move_shared "std::move"(shared_ptr[cComplexNestedWithDefault])
    cdef unique_ptr[cComplexNestedWithDefault] move_unique "std::move"(unique_ptr[cComplexNestedWithDefault])
    cdef shared_ptr[cMinPadding] move(unique_ptr[cMinPadding])
    cdef shared_ptr[cMinPadding] move_shared "std::move"(shared_ptr[cMinPadding])
    cdef unique_ptr[cMinPadding] move_unique "std::move"(unique_ptr[cMinPadding])
    cdef shared_ptr[cMyStruct] move(unique_ptr[cMyStruct])
    cdef shared_ptr[cMyStruct] move_shared "std::move"(shared_ptr[cMyStruct])
    cdef unique_ptr[cMyStruct] move_unique "std::move"(unique_ptr[cMyStruct])
    cdef shared_ptr[cMyDataItem] move(unique_ptr[cMyDataItem])
    cdef shared_ptr[cMyDataItem] move_shared "std::move"(shared_ptr[cMyDataItem])
    cdef unique_ptr[cMyDataItem] move_unique "std::move"(unique_ptr[cMyDataItem])
    cdef shared_ptr[cRenaming] move(unique_ptr[cRenaming])
    cdef shared_ptr[cRenaming] move_shared "std::move"(shared_ptr[cRenaming])
    cdef unique_ptr[cRenaming] move_unique "std::move"(unique_ptr[cRenaming])
    cdef shared_ptr[cAnnotatedTypes] move(unique_ptr[cAnnotatedTypes])
    cdef shared_ptr[cAnnotatedTypes] move_shared "std::move"(shared_ptr[cAnnotatedTypes])
    cdef unique_ptr[cAnnotatedTypes] move_unique "std::move"(unique_ptr[cAnnotatedTypes])
    cdef shared_ptr[cForwardUsageRoot] move(unique_ptr[cForwardUsageRoot])
    cdef shared_ptr[cForwardUsageRoot] move_shared "std::move"(shared_ptr[cForwardUsageRoot])
    cdef unique_ptr[cForwardUsageRoot] move_unique "std::move"(unique_ptr[cForwardUsageRoot])
    cdef shared_ptr[cForwardUsageStruct] move(unique_ptr[cForwardUsageStruct])
    cdef shared_ptr[cForwardUsageStruct] move_shared "std::move"(shared_ptr[cForwardUsageStruct])
    cdef unique_ptr[cForwardUsageStruct] move_unique "std::move"(unique_ptr[cForwardUsageStruct])
    cdef shared_ptr[cForwardUsageByRef] move(unique_ptr[cForwardUsageByRef])
    cdef shared_ptr[cForwardUsageByRef] move_shared "std::move"(shared_ptr[cForwardUsageByRef])
    cdef unique_ptr[cForwardUsageByRef] move_unique "std::move"(unique_ptr[cForwardUsageByRef])
    cdef shared_ptr[cNoexceptMoveEmpty] move(unique_ptr[cNoexceptMoveEmpty])
    cdef shared_ptr[cNoexceptMoveEmpty] move_shared "std::move"(shared_ptr[cNoexceptMoveEmpty])
    cdef unique_ptr[cNoexceptMoveEmpty] move_unique "std::move"(unique_ptr[cNoexceptMoveEmpty])
    cdef shared_ptr[cNoexceptMoveSimpleStruct] move(unique_ptr[cNoexceptMoveSimpleStruct])
    cdef shared_ptr[cNoexceptMoveSimpleStruct] move_shared "std::move"(shared_ptr[cNoexceptMoveSimpleStruct])
    cdef unique_ptr[cNoexceptMoveSimpleStruct] move_unique "std::move"(unique_ptr[cNoexceptMoveSimpleStruct])
    cdef shared_ptr[cNoexceptMoveComplexStruct] move(unique_ptr[cNoexceptMoveComplexStruct])
    cdef shared_ptr[cNoexceptMoveComplexStruct] move_shared "std::move"(shared_ptr[cNoexceptMoveComplexStruct])
    cdef unique_ptr[cNoexceptMoveComplexStruct] move_unique "std::move"(unique_ptr[cNoexceptMoveComplexStruct])
    cdef shared_ptr[cNoExceptMoveUnion] move(unique_ptr[cNoExceptMoveUnion])
    cdef shared_ptr[cNoExceptMoveUnion] move_shared "std::move"(shared_ptr[cNoExceptMoveUnion])
    cdef unique_ptr[cNoExceptMoveUnion] move_unique "std::move"(unique_ptr[cNoExceptMoveUnion])

cdef extern from "<memory>" namespace "std" nogil:
    cdef shared_ptr[const cdecorated_struct] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::decorated_struct>"(shared_ptr[cdecorated_struct])
    cdef shared_ptr[const cContainerStruct] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::ContainerStruct>"(shared_ptr[cContainerStruct])
    cdef shared_ptr[const cCppTypeStruct] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::CppTypeStruct>"(shared_ptr[cCppTypeStruct])
    cdef shared_ptr[const cVirtualStruct] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::VirtualStruct>"(shared_ptr[cVirtualStruct])
    cdef shared_ptr[const cMyStructWithForwardRefEnum] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>"(shared_ptr[cMyStructWithForwardRefEnum])
    cdef shared_ptr[const cTrivialNumeric] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::TrivialNumeric>"(shared_ptr[cTrivialNumeric])
    cdef shared_ptr[const cTrivialNestedWithDefault] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::TrivialNestedWithDefault>"(shared_ptr[cTrivialNestedWithDefault])
    cdef shared_ptr[const cComplexString] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::ComplexString>"(shared_ptr[cComplexString])
    cdef shared_ptr[const cComplexNestedWithDefault] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::ComplexNestedWithDefault>"(shared_ptr[cComplexNestedWithDefault])
    cdef shared_ptr[const cMinPadding] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::MinPadding>"(shared_ptr[cMinPadding])
    cdef shared_ptr[const cMyStruct] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::MyStruct>"(shared_ptr[cMyStruct])
    cdef shared_ptr[const cMyDataItem] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::MyDataItem>"(shared_ptr[cMyDataItem])
    cdef shared_ptr[const cRenaming] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::Renaming>"(shared_ptr[cRenaming])
    cdef shared_ptr[const cAnnotatedTypes] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::AnnotatedTypes>"(shared_ptr[cAnnotatedTypes])
    cdef shared_ptr[const cForwardUsageRoot] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::ForwardUsageRoot>"(shared_ptr[cForwardUsageRoot])
    cdef shared_ptr[const cForwardUsageStruct] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::ForwardUsageStruct>"(shared_ptr[cForwardUsageStruct])
    cdef shared_ptr[const cForwardUsageByRef] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::ForwardUsageByRef>"(shared_ptr[cForwardUsageByRef])
    cdef shared_ptr[const cNoexceptMoveEmpty] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::NoexceptMoveEmpty>"(shared_ptr[cNoexceptMoveEmpty])
    cdef shared_ptr[const cNoexceptMoveSimpleStruct] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::NoexceptMoveSimpleStruct>"(shared_ptr[cNoexceptMoveSimpleStruct])
    cdef shared_ptr[const cNoexceptMoveComplexStruct] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::NoexceptMoveComplexStruct>"(shared_ptr[cNoexceptMoveComplexStruct])
    cdef shared_ptr[const cNoExceptMoveUnion] const_pointer_cast "std::const_pointer_cast<const ::apache::thrift::fixtures::types::NoExceptMoveUnion>"(shared_ptr[cNoExceptMoveUnion])

# Forward Definition of the cython struct
cdef class decorated_struct(thrift.py3.types.Struct)


cdef class decorated_struct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cdecorated_struct] _cpp_obj

    @staticmethod
    cdef unique_ptr[cdecorated_struct] _make_instance(
        cdecorated_struct* base_instance,
        bint* __isNOTSET,
        str field
    ) except *

    @staticmethod
    cdef create(shared_ptr[cdecorated_struct])

# Forward Definition of the cython struct
cdef class ContainerStruct(thrift.py3.types.Struct)


cdef class ContainerStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cContainerStruct] _cpp_obj
    cdef List__i32 __field_fieldA
    cdef std_list__List__i32 __field_fieldB
    cdef std_deque__List__i32 __field_fieldC
    cdef folly_fbvector__List__i32 __field_fieldD
    cdef folly_small_vector__List__i32 __field_fieldE
    cdef folly_sorted_vector_set__Set__i32 __field_fieldF
    cdef folly_sorted_vector_map__Map__i32_string __field_fieldG
    cdef std_unordered_map__Map__i32_string __field_fieldH

    @staticmethod
    cdef unique_ptr[cContainerStruct] _make_instance(
        cContainerStruct* base_instance,
        bint* __isNOTSET,
        object fieldA,
        object fieldB,
        object fieldC,
        object fieldD,
        object fieldE,
        object fieldF,
        object fieldG,
        object fieldH
    ) except *

    @staticmethod
    cdef create(shared_ptr[cContainerStruct])

# Forward Definition of the cython struct
cdef class CppTypeStruct(thrift.py3.types.Struct)


cdef class CppTypeStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cCppTypeStruct] _cpp_obj
    cdef std_list_int32_t__List__i32 __field_fieldA

    @staticmethod
    cdef unique_ptr[cCppTypeStruct] _make_instance(
        cCppTypeStruct* base_instance,
        bint* __isNOTSET,
        object fieldA
    ) except *

    @staticmethod
    cdef create(shared_ptr[cCppTypeStruct])

# Forward Definition of the cython struct
cdef class VirtualStruct(thrift.py3.types.Struct)


cdef class VirtualStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cVirtualStruct] _cpp_obj

    @staticmethod
    cdef unique_ptr[cVirtualStruct] _make_instance(
        cVirtualStruct* base_instance,
        bint* __isNOTSET,
        object MyIntField
    ) except *

    @staticmethod
    cdef create(shared_ptr[cVirtualStruct])

# Forward Definition of the cython struct
cdef class MyStructWithForwardRefEnum(thrift.py3.types.Struct)


cdef class MyStructWithForwardRefEnum(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cMyStructWithForwardRefEnum] _cpp_obj

    @staticmethod
    cdef unique_ptr[cMyStructWithForwardRefEnum] _make_instance(
        cMyStructWithForwardRefEnum* base_instance,
        bint* __isNOTSET,
        MyForwardRefEnum a,
        MyForwardRefEnum b
    ) except *

    @staticmethod
    cdef create(shared_ptr[cMyStructWithForwardRefEnum])

# Forward Definition of the cython struct
cdef class TrivialNumeric(thrift.py3.types.Struct)


cdef class TrivialNumeric(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cTrivialNumeric] _cpp_obj

    @staticmethod
    cdef unique_ptr[cTrivialNumeric] _make_instance(
        cTrivialNumeric* base_instance,
        bint* __isNOTSET,
        object a,
        pbool b
    ) except *

    @staticmethod
    cdef create(shared_ptr[cTrivialNumeric])

# Forward Definition of the cython struct
cdef class TrivialNestedWithDefault(thrift.py3.types.Struct)


cdef class TrivialNestedWithDefault(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cTrivialNestedWithDefault] _cpp_obj
    cdef TrivialNumeric __field_n

    @staticmethod
    cdef unique_ptr[cTrivialNestedWithDefault] _make_instance(
        cTrivialNestedWithDefault* base_instance,
        bint* __isNOTSET,
        object z,
        TrivialNumeric n
    ) except *

    @staticmethod
    cdef create(shared_ptr[cTrivialNestedWithDefault])

# Forward Definition of the cython struct
cdef class ComplexString(thrift.py3.types.Struct)


cdef class ComplexString(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cComplexString] _cpp_obj
    cdef Map__string_i32 __field_b

    @staticmethod
    cdef unique_ptr[cComplexString] _make_instance(
        cComplexString* base_instance,
        bint* __isNOTSET,
        str a,
        object b
    ) except *

    @staticmethod
    cdef create(shared_ptr[cComplexString])

# Forward Definition of the cython struct
cdef class ComplexNestedWithDefault(thrift.py3.types.Struct)


cdef class ComplexNestedWithDefault(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cComplexNestedWithDefault] _cpp_obj
    cdef ComplexString __field_n

    @staticmethod
    cdef unique_ptr[cComplexNestedWithDefault] _make_instance(
        cComplexNestedWithDefault* base_instance,
        bint* __isNOTSET,
        str z,
        ComplexString n
    ) except *

    @staticmethod
    cdef create(shared_ptr[cComplexNestedWithDefault])

# Forward Definition of the cython struct
cdef class MinPadding(thrift.py3.types.Struct)


cdef class MinPadding(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cMinPadding] _cpp_obj

    @staticmethod
    cdef unique_ptr[cMinPadding] _make_instance(
        cMinPadding* base_instance,
        bint* __isNOTSET,
        object small,
        object big,
        object medium,
        object biggish,
        object tiny
    ) except *

    @staticmethod
    cdef create(shared_ptr[cMinPadding])

# Forward Definition of the cython struct
cdef class MyStruct(thrift.py3.types.Struct)


cdef class MyStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cMyStruct] _cpp_obj
    cdef MyDataItem __field_data
    cdef __MyStruct_eq(MyStruct self, MyStruct other)

    @staticmethod
    cdef unique_ptr[cMyStruct] _make_instance(
        cMyStruct* base_instance,
        bint* __isNOTSET,
        object MyIntField,
        str MyStringField,
        object majorVer,
        MyDataItem data
    ) except *

    @staticmethod
    cdef create(shared_ptr[cMyStruct])

# Forward Definition of the cython struct
cdef class MyDataItem(thrift.py3.types.Struct)


cdef class MyDataItem(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cMyDataItem] _cpp_obj
    cdef __MyDataItem_eq(MyDataItem self, MyDataItem other)

    @staticmethod
    cdef unique_ptr[cMyDataItem] _make_instance(
        cMyDataItem* base_instance,
        bint* __isNOTSET
    ) except *

    @staticmethod
    cdef create(shared_ptr[cMyDataItem])

# Forward Definition of the cython struct
cdef class Renaming(thrift.py3.types.Struct)


cdef class Renaming(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cRenaming] _cpp_obj

    @staticmethod
    cdef unique_ptr[cRenaming] _make_instance(
        cRenaming* base_instance,
        bint* __isNOTSET,
        object foo
    ) except *

    @staticmethod
    cdef create(shared_ptr[cRenaming])

# Forward Definition of the cython struct
cdef class AnnotatedTypes(thrift.py3.types.Struct)


cdef class AnnotatedTypes(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cAnnotatedTypes] _cpp_obj
    cdef List__std_unordered_map__Map__i32_string __field_list_field

    @staticmethod
    cdef unique_ptr[cAnnotatedTypes] _make_instance(
        cAnnotatedTypes* base_instance,
        bint* __isNOTSET,
        bytes binary_field,
        object list_field
    ) except *

    @staticmethod
    cdef create(shared_ptr[cAnnotatedTypes])

# Forward Definition of the cython struct
cdef class ForwardUsageRoot(thrift.py3.types.Struct)


cdef class ForwardUsageRoot(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cForwardUsageRoot] _cpp_obj
    cdef ForwardUsageStruct __field_ForwardUsageStruct
    cdef ForwardUsageByRef __field_ForwardUsageByRef

    @staticmethod
    cdef unique_ptr[cForwardUsageRoot] _make_instance(
        cForwardUsageRoot* base_instance,
        bint* __isNOTSET,
        ForwardUsageStruct ForwardUsageStruct,
        ForwardUsageByRef ForwardUsageByRef
    ) except *

    @staticmethod
    cdef create(shared_ptr[cForwardUsageRoot])

# Forward Definition of the cython struct
cdef class ForwardUsageStruct(thrift.py3.types.Struct)


cdef class ForwardUsageStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cForwardUsageStruct] _cpp_obj
    cdef ForwardUsageRoot __field_foo

    @staticmethod
    cdef unique_ptr[cForwardUsageStruct] _make_instance(
        cForwardUsageStruct* base_instance,
        bint* __isNOTSET,
        ForwardUsageRoot foo
    ) except *

    @staticmethod
    cdef create(shared_ptr[cForwardUsageStruct])

# Forward Definition of the cython struct
cdef class ForwardUsageByRef(thrift.py3.types.Struct)


cdef class ForwardUsageByRef(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cForwardUsageByRef] _cpp_obj
    cdef ForwardUsageRoot __field_foo

    @staticmethod
    cdef unique_ptr[cForwardUsageByRef] _make_instance(
        cForwardUsageByRef* base_instance,
        bint* __isNOTSET,
        ForwardUsageRoot foo
    ) except *

    @staticmethod
    cdef create(shared_ptr[cForwardUsageByRef])

# Forward Definition of the cython struct
cdef class NoexceptMoveEmpty(thrift.py3.types.Struct)


cdef class NoexceptMoveEmpty(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cNoexceptMoveEmpty] _cpp_obj

    @staticmethod
    cdef unique_ptr[cNoexceptMoveEmpty] _make_instance(
        cNoexceptMoveEmpty* base_instance,
        bint* __isNOTSET
    ) except *

    @staticmethod
    cdef create(shared_ptr[cNoexceptMoveEmpty])

# Forward Definition of the cython struct
cdef class NoexceptMoveSimpleStruct(thrift.py3.types.Struct)


cdef class NoexceptMoveSimpleStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cNoexceptMoveSimpleStruct] _cpp_obj

    @staticmethod
    cdef unique_ptr[cNoexceptMoveSimpleStruct] _make_instance(
        cNoexceptMoveSimpleStruct* base_instance,
        bint* __isNOTSET,
        object boolField
    ) except *

    @staticmethod
    cdef create(shared_ptr[cNoexceptMoveSimpleStruct])

# Forward Definition of the cython struct
cdef class NoexceptMoveComplexStruct(thrift.py3.types.Struct)


cdef class NoexceptMoveComplexStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cNoexceptMoveComplexStruct] _cpp_obj
    cdef List__binary __field_MyBinaryListField4
    cdef Map__MyEnumA_string __field_MyMapEnumAndInt

    @staticmethod
    cdef unique_ptr[cNoexceptMoveComplexStruct] _make_instance(
        cNoexceptMoveComplexStruct* base_instance,
        bint* __isNOTSET,
        pbool MyBoolField,
        object MyIntField,
        str MyStringField,
        str MyStringField2,
        bytes MyBinaryField,
        bytes MyBinaryField2,
        bytes MyBinaryField3,
        object MyBinaryListField4,
        object MyMapEnumAndInt
    ) except *

    @staticmethod
    cdef create(shared_ptr[cNoexceptMoveComplexStruct])

cdef class __NoExceptMoveUnionType(thrift.py3.types.CompiledEnum):
    pass


# Forward Definition of the cython struct
cdef class NoExceptMoveUnion(thrift.py3.types.Union)


cdef class NoExceptMoveUnion(thrift.py3.types.Union):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cNoExceptMoveUnion] _cpp_obj
    cdef readonly __NoExceptMoveUnionType type
    cdef readonly object value
    cdef _load_cache(NoExceptMoveUnion self)

    @staticmethod
    cdef unique_ptr[cNoExceptMoveUnion] _make_instance(
        cNoExceptMoveUnion* base_instance,
        str string_field,
        object i32_field
    ) except *

    @staticmethod
    cdef create(shared_ptr[cNoExceptMoveUnion])


cdef class std_unordered_map__Map__i32_string(thrift.py3.types.Container):
    cdef shared_ptr[std_unordered_map[cint32_t,string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[std_unordered_map[cint32_t,string]])
    @staticmethod
    cdef shared_ptr[std_unordered_map[cint32_t,string]] _make_instance(object items) except *

cdef class List__i64(thrift.py3.types.Container):
    cdef shared_ptr[vector[cint64_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[cint64_t]])
    @staticmethod
    cdef shared_ptr[vector[cint64_t]] _make_instance(object items) except *

cdef class Map__binary_i64(thrift.py3.types.Container):
    cdef shared_ptr[cmap[string,cint64_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[string,cint64_t]])
    @staticmethod
    cdef shared_ptr[cmap[string,cint64_t]] _make_instance(object items) except *

cdef class List__i32(thrift.py3.types.Container):
    cdef shared_ptr[vector[cint32_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[cint32_t]])
    @staticmethod
    cdef shared_ptr[vector[cint32_t]] _make_instance(object items) except *

cdef class std_list__List__i32(thrift.py3.types.Container):
    cdef shared_ptr[std_list[cint32_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[std_list[cint32_t]])
    @staticmethod
    cdef shared_ptr[std_list[cint32_t]] _make_instance(object items) except *

cdef class std_deque__List__i32(thrift.py3.types.Container):
    cdef shared_ptr[std_deque[cint32_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[std_deque[cint32_t]])
    @staticmethod
    cdef shared_ptr[std_deque[cint32_t]] _make_instance(object items) except *

cdef class folly_fbvector__List__i32(thrift.py3.types.Container):
    cdef shared_ptr[folly_fbvector[cint32_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[folly_fbvector[cint32_t]])
    @staticmethod
    cdef shared_ptr[folly_fbvector[cint32_t]] _make_instance(object items) except *

cdef class folly_small_vector__List__i32(thrift.py3.types.Container):
    cdef shared_ptr[folly_small_vector[cint32_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[folly_small_vector[cint32_t]])
    @staticmethod
    cdef shared_ptr[folly_small_vector[cint32_t]] _make_instance(object items) except *

cdef class folly_sorted_vector_set__Set__i32(thrift.py3.types.Container):
    cdef shared_ptr[folly_sorted_vector_set[cint32_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[folly_sorted_vector_set[cint32_t]])
    @staticmethod
    cdef shared_ptr[folly_sorted_vector_set[cint32_t]] _make_instance(object items) except *

cdef class folly_sorted_vector_map__Map__i32_string(thrift.py3.types.Container):
    cdef shared_ptr[folly_sorted_vector_map[cint32_t,string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[folly_sorted_vector_map[cint32_t,string]])
    @staticmethod
    cdef shared_ptr[folly_sorted_vector_map[cint32_t,string]] _make_instance(object items) except *

cdef class std_list_int32_t__List__i32(thrift.py3.types.Container):
    cdef shared_ptr[std_list_int32_t] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[std_list_int32_t])
    @staticmethod
    cdef shared_ptr[std_list_int32_t] _make_instance(object items) except *

cdef class Map__string_i32(thrift.py3.types.Container):
    cdef shared_ptr[cmap[string,cint32_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[string,cint32_t]])
    @staticmethod
    cdef shared_ptr[cmap[string,cint32_t]] _make_instance(object items) except *

cdef class List__std_unordered_map__Map__i32_string(thrift.py3.types.Container):
    cdef shared_ptr[vector[std_unordered_map[cint32_t,string]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[std_unordered_map[cint32_t,string]]])
    @staticmethod
    cdef shared_ptr[vector[std_unordered_map[cint32_t,string]]] _make_instance(object items) except *

cdef class List__binary(thrift.py3.types.Container):
    cdef shared_ptr[vector[string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[string]])
    @staticmethod
    cdef shared_ptr[vector[string]] _make_instance(object items) except *

cdef class Map__MyEnumA_string(thrift.py3.types.Container):
    cdef shared_ptr[cmap[cMyEnumA,string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[cMyEnumA,string]])
    @staticmethod
    cdef shared_ptr[cmap[cMyEnumA,string]] _make_instance(object items) except *

cdef extern from "<utility>" namespace "std" nogil:
    cdef shared_ptr[vector[cint32_t]] move "std::move"(unique_ptr[vector[cint32_t]])
    cdef shared_ptr[vector[cint32_t]] move_shared "std::move"(shared_ptr[vector[cint32_t]])
    cdef shared_ptr[vector[cint64_t]] move "std::move"(unique_ptr[vector[cint64_t]])
    cdef shared_ptr[vector[cint64_t]] move_shared "std::move"(shared_ptr[vector[cint64_t]])
    cdef shared_ptr[vector[std_unordered_map[cint32_t,string]]] move "std::move"(unique_ptr[vector[std_unordered_map[cint32_t,string]]])
    cdef shared_ptr[vector[std_unordered_map[cint32_t,string]]] move_shared "std::move"(shared_ptr[vector[std_unordered_map[cint32_t,string]]])
    cdef shared_ptr[vector[string]] move "std::move"(unique_ptr[vector[string]])
    cdef shared_ptr[vector[string]] move_shared "std::move"(shared_ptr[vector[string]])
    cdef shared_ptr[cmap[cMyEnumA,string]] move "std::move"(unique_ptr[cmap[cMyEnumA,string]])
    cdef shared_ptr[cmap[cMyEnumA,string]] move_shared "std::move"(shared_ptr[cmap[cMyEnumA,string]])
    cdef shared_ptr[cmap[string,cint32_t]] move "std::move"(unique_ptr[cmap[string,cint32_t]])
    cdef shared_ptr[cmap[string,cint32_t]] move_shared "std::move"(shared_ptr[cmap[string,cint32_t]])
    cdef shared_ptr[cmap[string,cint64_t]] move "std::move"(unique_ptr[cmap[string,cint64_t]])
    cdef shared_ptr[cmap[string,cint64_t]] move_shared "std::move"(shared_ptr[cmap[string,cint64_t]])
    cdef shared_ptr[folly_fbvector[cint32_t]] move "std::move"(unique_ptr[folly_fbvector[cint32_t]])
    cdef shared_ptr[folly_fbvector[cint32_t]] move_shared "std::move"(shared_ptr[folly_fbvector[cint32_t]])
    cdef shared_ptr[folly_small_vector[cint32_t]] move "std::move"(unique_ptr[folly_small_vector[cint32_t]])
    cdef shared_ptr[folly_small_vector[cint32_t]] move_shared "std::move"(shared_ptr[folly_small_vector[cint32_t]])
    cdef shared_ptr[folly_sorted_vector_map[cint32_t,string]] move "std::move"(unique_ptr[folly_sorted_vector_map[cint32_t,string]])
    cdef shared_ptr[folly_sorted_vector_map[cint32_t,string]] move_shared "std::move"(shared_ptr[folly_sorted_vector_map[cint32_t,string]])
    cdef shared_ptr[folly_sorted_vector_set[cint32_t]] move "std::move"(unique_ptr[folly_sorted_vector_set[cint32_t]])
    cdef shared_ptr[folly_sorted_vector_set[cint32_t]] move_shared "std::move"(shared_ptr[folly_sorted_vector_set[cint32_t]])
    cdef shared_ptr[std_deque[cint32_t]] move "std::move"(unique_ptr[std_deque[cint32_t]])
    cdef shared_ptr[std_deque[cint32_t]] move_shared "std::move"(shared_ptr[std_deque[cint32_t]])
    cdef shared_ptr[std_list[cint32_t]] move "std::move"(unique_ptr[std_list[cint32_t]])
    cdef shared_ptr[std_list[cint32_t]] move_shared "std::move"(shared_ptr[std_list[cint32_t]])
    cdef shared_ptr[std_list_int32_t] move "std::move"(unique_ptr[std_list_int32_t])
    cdef shared_ptr[std_list_int32_t] move_shared "std::move"(shared_ptr[std_list_int32_t])
    cdef shared_ptr[std_unordered_map[cint32_t,string]] move "std::move"(unique_ptr[std_unordered_map[cint32_t,string]])
    cdef shared_ptr[std_unordered_map[cint32_t,string]] move_shared "std::move"(shared_ptr[std_unordered_map[cint32_t,string]])
cdef extern from "<utility>" nogil:
    pass  
    shared_ptr[std_unordered_map[cint32_t,string]] reference_shared_ptr_List__std_unordered_map__Map__i32_string "thrift::py3::reference_shared_ptr<std::unordered_map<int32_t,std::string>>"(...)
cdef extern from "<memory>" namespace "std" nogil:
    cdef shared_ptr[const vector[cint32_t]] const_pointer_cast "std::const_pointer_cast<const std::vector<int32_t>>"(shared_ptr[vector[cint32_t]])
    cdef shared_ptr[const vector[cint64_t]] const_pointer_cast "std::const_pointer_cast<const std::vector<int64_t>>"(shared_ptr[vector[cint64_t]])
    cdef shared_ptr[const vector[std_unordered_map[cint32_t,string]]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::unordered_map<int32_t,std::string>>>"(shared_ptr[vector[std_unordered_map[cint32_t,string]]])
    cdef shared_ptr[const vector[string]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::string>>"(shared_ptr[vector[string]])
    cdef shared_ptr[const cmap[cMyEnumA,string]] const_pointer_cast "std::const_pointer_cast<const std::map<::apache::thrift::fixtures::types::MyEnumA,std::string>>"(shared_ptr[cmap[cMyEnumA,string]])
    cdef shared_ptr[const cmap[string,cint32_t]] const_pointer_cast "std::const_pointer_cast<const std::map<std::string,int32_t>>"(shared_ptr[cmap[string,cint32_t]])
    cdef shared_ptr[const cmap[string,cint64_t]] const_pointer_cast "std::const_pointer_cast<const std::map<std::string,int64_t>>"(shared_ptr[cmap[string,cint64_t]])
    cdef shared_ptr[const folly_fbvector[cint32_t]] const_pointer_cast "std::const_pointer_cast<const folly::fbvector<int32_t>>"(shared_ptr[folly_fbvector[cint32_t]])
    cdef shared_ptr[const folly_small_vector[cint32_t]] const_pointer_cast "std::const_pointer_cast<const folly::small_vector<int32_t>>"(shared_ptr[folly_small_vector[cint32_t]])
    cdef shared_ptr[const folly_sorted_vector_map[cint32_t,string]] const_pointer_cast "std::const_pointer_cast<const folly::sorted_vector_map<int32_t,std::string>>"(shared_ptr[folly_sorted_vector_map[cint32_t,string]])
    cdef shared_ptr[const folly_sorted_vector_set[cint32_t]] const_pointer_cast "std::const_pointer_cast<const folly::sorted_vector_set<int32_t>>"(shared_ptr[folly_sorted_vector_set[cint32_t]])
    cdef shared_ptr[const std_deque[cint32_t]] const_pointer_cast "std::const_pointer_cast<const std::deque<int32_t>>"(shared_ptr[std_deque[cint32_t]])
    cdef shared_ptr[const std_list[cint32_t]] const_pointer_cast "std::const_pointer_cast<const std::list<int32_t>>"(shared_ptr[std_list[cint32_t]])
    cdef shared_ptr[const std_list_int32_t] const_pointer_cast "std::const_pointer_cast<const std::list<int32_t>>"(shared_ptr[std_list_int32_t])
    cdef shared_ptr[const std_unordered_map[cint32_t,string]] const_pointer_cast "std::const_pointer_cast<const std::unordered_map<int32_t,std::string>>"(shared_ptr[std_unordered_map[cint32_t,string]])

