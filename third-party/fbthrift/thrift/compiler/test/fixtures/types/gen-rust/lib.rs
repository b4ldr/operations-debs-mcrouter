// @generated by Thrift. This file is probably not the place you want to edit!

#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]

pub use self::errors::*;
pub use self::types::*;

pub mod types {
    #![allow(clippy::redundant_closure)]

    use fbthrift::{
        Deserialize, GetTType, ProtocolReader, ProtocolWriter, Serialize, TType,
    };

    pub type TBinary = Vec<u8>;

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct decorated_struct {
        pub field: String,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct ContainerStruct {
        pub fieldA: Vec<i32>,
        pub fieldB: Vec<i32>,
        pub fieldC: Vec<i32>,
        pub fieldD: Vec<i32>,
        pub fieldE: Vec<i32>,
        pub fieldF: std::collections::BTreeSet<i32>,
        pub fieldG: std::collections::BTreeMap<i32, String>,
        pub fieldH: include::types::SomeMap,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct CppTypeStruct {
        pub fieldA: Vec<i32>,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct VirtualStruct {
        pub MyIntField: i64,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct MyStructWithForwardRefEnum {
        pub a: crate::types::MyForwardRefEnum,
        pub b: crate::types::MyForwardRefEnum,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct TrivialNumeric {
        pub a: i32,
        pub b: bool,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct TrivialNestedWithDefault {
        pub z: i32,
        pub n: crate::types::TrivialNumeric,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct ComplexString {
        pub a: String,
        pub b: std::collections::BTreeMap<String, i32>,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct ComplexNestedWithDefault {
        pub z: String,
        pub n: crate::types::ComplexString,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct MinPadding {
        pub small: i8,
        pub big: i64,
        pub medium: i16,
        pub biggish: i32,
        pub tiny: i8,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct MyStruct {
        pub MyIntField: i64,
        pub MyStringField: String,
        pub majorVer: i64,
        pub data: crate::types::MyDataItem,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct MyDataItem {
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Renaming {
        pub foo: i64,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct AnnotatedTypes {
        pub binary_field: crate::types::TBinary,
        pub list_field: include::types::SomeListOfTypeMap,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct ForwardUsageRoot {
        pub ForwardUsageStruct: Option<crate::types::ForwardUsageStruct>,
        pub ForwardUsageByRef: Option<crate::types::ForwardUsageByRef>,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct ForwardUsageStruct {
        pub foo: Option<crate::types::ForwardUsageRoot>,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct ForwardUsageByRef {
        pub foo: Option<crate::types::ForwardUsageRoot>,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct NoexceptMoveEmpty {
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct NoexceptMoveSimpleStruct {
        pub boolField: i64,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct NoexceptMoveComplexStruct {
        pub MyBoolField: bool,
        pub MyIntField: i64,
        pub MyStringField: String,
        pub MyStringField2: String,
        pub MyBinaryField: Vec<u8>,
        pub MyBinaryField2: Option<Vec<u8>>,
        pub MyBinaryField3: Vec<u8>,
        pub MyBinaryListField4: Vec<Vec<u8>>,
        pub MyMapEnumAndInt: std::collections::BTreeMap<crate::types::MyEnumA, String>,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum NoExceptMoveUnion {
        string_field(String),
        i32_field(i32),
        UnknownField(i32),
    }

    #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
    pub struct has_bitwise_ops(pub i32);

    impl has_bitwise_ops {
        pub const none: Self = has_bitwise_ops(0i32);
        pub const zero: Self = has_bitwise_ops(1i32);
        pub const one: Self = has_bitwise_ops(2i32);
        pub const two: Self = has_bitwise_ops(4i32);
        pub const three: Self = has_bitwise_ops(8i32);
    }

    impl Default for has_bitwise_ops {
        fn default() -> Self {
            has_bitwise_ops(fbthrift::__UNKNOWN_ID)
        }
    }

    impl<'a> From<&'a has_bitwise_ops> for i32 {
        #[inline]
        fn from(x: &'a has_bitwise_ops) -> i32 {
            x.0
        }
    }

    impl From<has_bitwise_ops> for i32 {
        #[inline]
        fn from(x: has_bitwise_ops) -> i32 {
            x.0
        }
    }

    impl From<i32> for has_bitwise_ops {
        #[inline]
        fn from(x: i32) -> Self {
            Self(x)
        }
    }

    impl std::fmt::Display for has_bitwise_ops {
        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {
            let s: &str = match *self {
                has_bitwise_ops::none => "none",
                has_bitwise_ops::zero => "zero",
                has_bitwise_ops::one => "one",
                has_bitwise_ops::two => "two",
                has_bitwise_ops::three => "three",
                has_bitwise_ops(x) => return write!(fmt, "{}", x),
            };
            write!(fmt, "{}", s)
        }
    }

    impl std::fmt::Debug for has_bitwise_ops {
        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {
            write!(fmt, "has_bitwise_ops::{}", self)
        }
    }

    impl std::str::FromStr for has_bitwise_ops {
        type Err = anyhow::Error;

        fn from_str(string: &str) -> std::result::Result<Self, Self::Err> {
            match string {
                "none" => Ok(has_bitwise_ops::none),
                "zero" => Ok(has_bitwise_ops::zero),
                "one" => Ok(has_bitwise_ops::one),
                "two" => Ok(has_bitwise_ops::two),
                "three" => Ok(has_bitwise_ops::three),
                _ => anyhow::bail!("Unable to parse {} as has_bitwise_ops", string),
            }
        }
    }

    impl GetTType for has_bitwise_ops {
        const TTYPE: TType = TType::I32;
    }

    impl<P: ProtocolWriter> Serialize<P> for has_bitwise_ops {
        #[inline]
        fn write(&self, p: &mut P) {
            p.write_i32(self.into())
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for has_bitwise_ops {
        #[inline]
        fn read(p: &mut P) -> anyhow::Result<Self> {
            Ok(has_bitwise_ops::from(p.read_i32()?))
        }
    }

    #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
    pub struct is_unscoped(pub i32);

    impl is_unscoped {
        pub const hello: Self = is_unscoped(0i32);
        pub const world: Self = is_unscoped(1i32);
    }

    impl Default for is_unscoped {
        fn default() -> Self {
            is_unscoped(fbthrift::__UNKNOWN_ID)
        }
    }

    impl<'a> From<&'a is_unscoped> for i32 {
        #[inline]
        fn from(x: &'a is_unscoped) -> i32 {
            x.0
        }
    }

    impl From<is_unscoped> for i32 {
        #[inline]
        fn from(x: is_unscoped) -> i32 {
            x.0
        }
    }

    impl From<i32> for is_unscoped {
        #[inline]
        fn from(x: i32) -> Self {
            Self(x)
        }
    }

    impl std::fmt::Display for is_unscoped {
        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {
            let s: &str = match *self {
                is_unscoped::hello => "hello",
                is_unscoped::world => "world",
                is_unscoped(x) => return write!(fmt, "{}", x),
            };
            write!(fmt, "{}", s)
        }
    }

    impl std::fmt::Debug for is_unscoped {
        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {
            write!(fmt, "is_unscoped::{}", self)
        }
    }

    impl std::str::FromStr for is_unscoped {
        type Err = anyhow::Error;

        fn from_str(string: &str) -> std::result::Result<Self, Self::Err> {
            match string {
                "hello" => Ok(is_unscoped::hello),
                "world" => Ok(is_unscoped::world),
                _ => anyhow::bail!("Unable to parse {} as is_unscoped", string),
            }
        }
    }

    impl GetTType for is_unscoped {
        const TTYPE: TType = TType::I32;
    }

    impl<P: ProtocolWriter> Serialize<P> for is_unscoped {
        #[inline]
        fn write(&self, p: &mut P) {
            p.write_i32(self.into())
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for is_unscoped {
        #[inline]
        fn read(p: &mut P) -> anyhow::Result<Self> {
            Ok(is_unscoped::from(p.read_i32()?))
        }
    }

    #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
    pub struct MyForwardRefEnum(pub i32);

    impl MyForwardRefEnum {
        pub const ZERO: Self = MyForwardRefEnum(0i32);
        pub const NONZERO: Self = MyForwardRefEnum(12i32);
    }

    impl Default for MyForwardRefEnum {
        fn default() -> Self {
            MyForwardRefEnum(fbthrift::__UNKNOWN_ID)
        }
    }

    impl<'a> From<&'a MyForwardRefEnum> for i32 {
        #[inline]
        fn from(x: &'a MyForwardRefEnum) -> i32 {
            x.0
        }
    }

    impl From<MyForwardRefEnum> for i32 {
        #[inline]
        fn from(x: MyForwardRefEnum) -> i32 {
            x.0
        }
    }

    impl From<i32> for MyForwardRefEnum {
        #[inline]
        fn from(x: i32) -> Self {
            Self(x)
        }
    }

    impl std::fmt::Display for MyForwardRefEnum {
        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {
            let s: &str = match *self {
                MyForwardRefEnum::ZERO => "ZERO",
                MyForwardRefEnum::NONZERO => "NONZERO",
                MyForwardRefEnum(x) => return write!(fmt, "{}", x),
            };
            write!(fmt, "{}", s)
        }
    }

    impl std::fmt::Debug for MyForwardRefEnum {
        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {
            write!(fmt, "MyForwardRefEnum::{}", self)
        }
    }

    impl std::str::FromStr for MyForwardRefEnum {
        type Err = anyhow::Error;

        fn from_str(string: &str) -> std::result::Result<Self, Self::Err> {
            match string {
                "ZERO" => Ok(MyForwardRefEnum::ZERO),
                "NONZERO" => Ok(MyForwardRefEnum::NONZERO),
                _ => anyhow::bail!("Unable to parse {} as MyForwardRefEnum", string),
            }
        }
    }

    impl GetTType for MyForwardRefEnum {
        const TTYPE: TType = TType::I32;
    }

    impl<P: ProtocolWriter> Serialize<P> for MyForwardRefEnum {
        #[inline]
        fn write(&self, p: &mut P) {
            p.write_i32(self.into())
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for MyForwardRefEnum {
        #[inline]
        fn read(p: &mut P) -> anyhow::Result<Self> {
            Ok(MyForwardRefEnum::from(p.read_i32()?))
        }
    }

    #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
    pub struct MyEnumA(pub i32);

    impl MyEnumA {
        pub const fieldA: Self = MyEnumA(1i32);
        pub const fieldB: Self = MyEnumA(2i32);
        pub const fieldC: Self = MyEnumA(4i32);
    }

    impl Default for MyEnumA {
        fn default() -> Self {
            MyEnumA(fbthrift::__UNKNOWN_ID)
        }
    }

    impl<'a> From<&'a MyEnumA> for i32 {
        #[inline]
        fn from(x: &'a MyEnumA) -> i32 {
            x.0
        }
    }

    impl From<MyEnumA> for i32 {
        #[inline]
        fn from(x: MyEnumA) -> i32 {
            x.0
        }
    }

    impl From<i32> for MyEnumA {
        #[inline]
        fn from(x: i32) -> Self {
            Self(x)
        }
    }

    impl std::fmt::Display for MyEnumA {
        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {
            let s: &str = match *self {
                MyEnumA::fieldA => "fieldA",
                MyEnumA::fieldB => "fieldB",
                MyEnumA::fieldC => "fieldC",
                MyEnumA(x) => return write!(fmt, "{}", x),
            };
            write!(fmt, "{}", s)
        }
    }

    impl std::fmt::Debug for MyEnumA {
        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {
            write!(fmt, "MyEnumA::{}", self)
        }
    }

    impl std::str::FromStr for MyEnumA {
        type Err = anyhow::Error;

        fn from_str(string: &str) -> std::result::Result<Self, Self::Err> {
            match string {
                "fieldA" => Ok(MyEnumA::fieldA),
                "fieldB" => Ok(MyEnumA::fieldB),
                "fieldC" => Ok(MyEnumA::fieldC),
                _ => anyhow::bail!("Unable to parse {} as MyEnumA", string),
            }
        }
    }

    impl GetTType for MyEnumA {
        const TTYPE: TType = TType::I32;
    }

    impl<P: ProtocolWriter> Serialize<P> for MyEnumA {
        #[inline]
        fn write(&self, p: &mut P) {
            p.write_i32(self.into())
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for MyEnumA {
        #[inline]
        fn read(p: &mut P) -> anyhow::Result<Self> {
            Ok(MyEnumA::from(p.read_i32()?))
        }
    }


    impl Default for self::decorated_struct {
        fn default() -> Self {
            Self {
                field: Default::default(),
            }
        }
    }

    impl GetTType for self::decorated_struct {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::decorated_struct {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("decorated_struct");
            p.write_field_begin("field", TType::String, 1);
            Serialize::write(&self.field, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::decorated_struct {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_field = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::String, 1) => field_field = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                field: field_field.unwrap_or_default(),
            })
        }
    }


    impl Default for self::ContainerStruct {
        fn default() -> Self {
            Self {
                fieldA: Default::default(),
                fieldB: Default::default(),
                fieldC: Default::default(),
                fieldD: Default::default(),
                fieldE: Default::default(),
                fieldF: Default::default(),
                fieldG: Default::default(),
                fieldH: Default::default(),
            }
        }
    }

    impl GetTType for self::ContainerStruct {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::ContainerStruct {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ContainerStruct");
            p.write_field_begin("fieldA", TType::List, 12);
            Serialize::write(&self.fieldA, p);
            p.write_field_end();
            p.write_field_begin("fieldB", TType::List, 2);
            Serialize::write(&self.fieldB, p);
            p.write_field_end();
            p.write_field_begin("fieldC", TType::List, 3);
            Serialize::write(&self.fieldC, p);
            p.write_field_end();
            p.write_field_begin("fieldD", TType::List, 4);
            Serialize::write(&self.fieldD, p);
            p.write_field_end();
            p.write_field_begin("fieldE", TType::List, 5);
            Serialize::write(&self.fieldE, p);
            p.write_field_end();
            p.write_field_begin("fieldF", TType::Set, 6);
            Serialize::write(&self.fieldF, p);
            p.write_field_end();
            p.write_field_begin("fieldG", TType::Map, 7);
            Serialize::write(&self.fieldG, p);
            p.write_field_end();
            p.write_field_begin("fieldH", TType::Map, 8);
            Serialize::write(&self.fieldH, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::ContainerStruct {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_fieldA = None;
            let mut field_fieldB = None;
            let mut field_fieldC = None;
            let mut field_fieldD = None;
            let mut field_fieldE = None;
            let mut field_fieldF = None;
            let mut field_fieldG = None;
            let mut field_fieldH = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::List, 12) => field_fieldA = Some(Deserialize::read(p)?),
                    (TType::List, 2) => field_fieldB = Some(Deserialize::read(p)?),
                    (TType::List, 3) => field_fieldC = Some(Deserialize::read(p)?),
                    (TType::List, 4) => field_fieldD = Some(Deserialize::read(p)?),
                    (TType::List, 5) => field_fieldE = Some(Deserialize::read(p)?),
                    (TType::Set, 6) => field_fieldF = Some(Deserialize::read(p)?),
                    (TType::Map, 7) => field_fieldG = Some(Deserialize::read(p)?),
                    (TType::Map, 8) => field_fieldH = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                fieldA: field_fieldA.unwrap_or_default(),
                fieldB: field_fieldB.unwrap_or_default(),
                fieldC: field_fieldC.unwrap_or_default(),
                fieldD: field_fieldD.unwrap_or_default(),
                fieldE: field_fieldE.unwrap_or_default(),
                fieldF: field_fieldF.unwrap_or_default(),
                fieldG: field_fieldG.unwrap_or_default(),
                fieldH: field_fieldH.unwrap_or_default(),
            })
        }
    }


    impl Default for self::CppTypeStruct {
        fn default() -> Self {
            Self {
                fieldA: Default::default(),
            }
        }
    }

    impl GetTType for self::CppTypeStruct {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::CppTypeStruct {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("CppTypeStruct");
            p.write_field_begin("fieldA", TType::List, 1);
            Serialize::write(&self.fieldA, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::CppTypeStruct {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_fieldA = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::List, 1) => field_fieldA = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                fieldA: field_fieldA.unwrap_or_default(),
            })
        }
    }


    impl Default for self::VirtualStruct {
        fn default() -> Self {
            Self {
                MyIntField: Default::default(),
            }
        }
    }

    impl GetTType for self::VirtualStruct {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::VirtualStruct {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("VirtualStruct");
            p.write_field_begin("MyIntField", TType::I64, 1);
            Serialize::write(&self.MyIntField, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::VirtualStruct {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_MyIntField = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I64, 1) => field_MyIntField = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                MyIntField: field_MyIntField.unwrap_or_default(),
            })
        }
    }


    impl Default for self::MyStructWithForwardRefEnum {
        fn default() -> Self {
            Self {
                a: crate::types::MyForwardRefEnum::NONZERO,
                b: crate::types::MyForwardRefEnum::NONZERO,
            }
        }
    }

    impl GetTType for self::MyStructWithForwardRefEnum {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::MyStructWithForwardRefEnum {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("MyStructWithForwardRefEnum");
            p.write_field_begin("a", TType::I32, 1);
            Serialize::write(&self.a, p);
            p.write_field_end();
            p.write_field_begin("b", TType::I32, 2);
            Serialize::write(&self.b, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::MyStructWithForwardRefEnum {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_a = None;
            let mut field_b = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I32, 1) => field_a = Some(Deserialize::read(p)?),
                    (TType::I32, 2) => field_b = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                a: field_a.unwrap_or_else(|| crate::types::MyForwardRefEnum::NONZERO),
                b: field_b.unwrap_or_else(|| crate::types::MyForwardRefEnum::NONZERO),
            })
        }
    }


    impl Default for self::TrivialNumeric {
        fn default() -> Self {
            Self {
                a: Default::default(),
                b: Default::default(),
            }
        }
    }

    impl GetTType for self::TrivialNumeric {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::TrivialNumeric {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("TrivialNumeric");
            p.write_field_begin("a", TType::I32, 1);
            Serialize::write(&self.a, p);
            p.write_field_end();
            p.write_field_begin("b", TType::Bool, 2);
            Serialize::write(&self.b, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::TrivialNumeric {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_a = None;
            let mut field_b = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I32, 1) => field_a = Some(Deserialize::read(p)?),
                    (TType::Bool, 2) => field_b = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                a: field_a.unwrap_or_default(),
                b: field_b.unwrap_or_default(),
            })
        }
    }


    impl Default for self::TrivialNestedWithDefault {
        fn default() -> Self {
            Self {
                z: 4,
                n: crate::types::TrivialNumeric {
                    a: 3,
                    b: true,
                },
            }
        }
    }

    impl GetTType for self::TrivialNestedWithDefault {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::TrivialNestedWithDefault {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("TrivialNestedWithDefault");
            p.write_field_begin("z", TType::I32, 1);
            Serialize::write(&self.z, p);
            p.write_field_end();
            p.write_field_begin("n", TType::Struct, 2);
            Serialize::write(&self.n, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::TrivialNestedWithDefault {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_z = None;
            let mut field_n = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I32, 1) => field_z = Some(Deserialize::read(p)?),
                    (TType::Struct, 2) => field_n = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                z: field_z.unwrap_or_else(|| 4),
                n: field_n.unwrap_or_else(|| crate::types::TrivialNumeric {
                    a: 3,
                    b: true,
                }),
            })
        }
    }


    impl Default for self::ComplexString {
        fn default() -> Self {
            Self {
                a: Default::default(),
                b: Default::default(),
            }
        }
    }

    impl GetTType for self::ComplexString {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::ComplexString {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ComplexString");
            p.write_field_begin("a", TType::String, 1);
            Serialize::write(&self.a, p);
            p.write_field_end();
            p.write_field_begin("b", TType::Map, 2);
            Serialize::write(&self.b, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::ComplexString {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_a = None;
            let mut field_b = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::String, 1) => field_a = Some(Deserialize::read(p)?),
                    (TType::Map, 2) => field_b = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                a: field_a.unwrap_or_default(),
                b: field_b.unwrap_or_default(),
            })
        }
    }


    impl Default for self::ComplexNestedWithDefault {
        fn default() -> Self {
            Self {
                z: "4".to_owned(),
                n: crate::types::ComplexString {
                    a: "3".to_owned(),
                    b: {
                        let mut map = std::collections::BTreeMap::new();
                        map.insert("a".to_owned(), 3);
                        map
                    },
                },
            }
        }
    }

    impl GetTType for self::ComplexNestedWithDefault {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::ComplexNestedWithDefault {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ComplexNestedWithDefault");
            p.write_field_begin("z", TType::String, 1);
            Serialize::write(&self.z, p);
            p.write_field_end();
            p.write_field_begin("n", TType::Struct, 2);
            Serialize::write(&self.n, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::ComplexNestedWithDefault {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_z = None;
            let mut field_n = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::String, 1) => field_z = Some(Deserialize::read(p)?),
                    (TType::Struct, 2) => field_n = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                z: field_z.unwrap_or_else(|| "4".to_owned()),
                n: field_n.unwrap_or_else(|| crate::types::ComplexString {
                    a: "3".to_owned(),
                    b: {
                        let mut map = std::collections::BTreeMap::new();
                        map.insert("a".to_owned(), 3);
                        map
                    },
                }),
            })
        }
    }


    impl Default for self::MinPadding {
        fn default() -> Self {
            Self {
                small: Default::default(),
                big: Default::default(),
                medium: Default::default(),
                biggish: Default::default(),
                tiny: Default::default(),
            }
        }
    }

    impl GetTType for self::MinPadding {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::MinPadding {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("MinPadding");
            p.write_field_begin("small", TType::Byte, 1);
            Serialize::write(&self.small, p);
            p.write_field_end();
            p.write_field_begin("big", TType::I64, 2);
            Serialize::write(&self.big, p);
            p.write_field_end();
            p.write_field_begin("medium", TType::I16, 3);
            Serialize::write(&self.medium, p);
            p.write_field_end();
            p.write_field_begin("biggish", TType::I32, 4);
            Serialize::write(&self.biggish, p);
            p.write_field_end();
            p.write_field_begin("tiny", TType::Byte, 5);
            Serialize::write(&self.tiny, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::MinPadding {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_small = None;
            let mut field_big = None;
            let mut field_medium = None;
            let mut field_biggish = None;
            let mut field_tiny = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::Byte, 1) => field_small = Some(Deserialize::read(p)?),
                    (TType::I64, 2) => field_big = Some(Deserialize::read(p)?),
                    (TType::I16, 3) => field_medium = Some(Deserialize::read(p)?),
                    (TType::I32, 4) => field_biggish = Some(Deserialize::read(p)?),
                    (TType::Byte, 5) => field_tiny = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                small: field_small.unwrap_or_default(),
                big: field_big.unwrap_or_default(),
                medium: field_medium.unwrap_or_default(),
                biggish: field_biggish.unwrap_or_default(),
                tiny: field_tiny.unwrap_or_default(),
            })
        }
    }


    impl Default for self::MyStruct {
        fn default() -> Self {
            Self {
                MyIntField: Default::default(),
                MyStringField: Default::default(),
                majorVer: Default::default(),
                data: Default::default(),
            }
        }
    }

    impl GetTType for self::MyStruct {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::MyStruct {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("MyStruct");
            p.write_field_begin("MyIntField", TType::I64, 1);
            Serialize::write(&self.MyIntField, p);
            p.write_field_end();
            p.write_field_begin("MyStringField", TType::String, 2);
            Serialize::write(&self.MyStringField, p);
            p.write_field_end();
            p.write_field_begin("majorVer", TType::I64, 3);
            Serialize::write(&self.majorVer, p);
            p.write_field_end();
            p.write_field_begin("data", TType::Struct, 4);
            Serialize::write(&self.data, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::MyStruct {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_MyIntField = None;
            let mut field_MyStringField = None;
            let mut field_majorVer = None;
            let mut field_data = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I64, 1) => field_MyIntField = Some(Deserialize::read(p)?),
                    (TType::String, 2) => field_MyStringField = Some(Deserialize::read(p)?),
                    (TType::I64, 3) => field_majorVer = Some(Deserialize::read(p)?),
                    (TType::Struct, 4) => field_data = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                MyIntField: field_MyIntField.unwrap_or_default(),
                MyStringField: field_MyStringField.unwrap_or_default(),
                majorVer: field_majorVer.unwrap_or_default(),
                data: field_data.unwrap_or_default(),
            })
        }
    }


    impl Default for self::MyDataItem {
        fn default() -> Self {
            Self {
            }
        }
    }

    impl GetTType for self::MyDataItem {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::MyDataItem {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("MyDataItem");
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::MyDataItem {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
            })
        }
    }


    impl Default for self::Renaming {
        fn default() -> Self {
            Self {
                foo: Default::default(),
            }
        }
    }

    impl GetTType for self::Renaming {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::Renaming {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("Renaming");
            p.write_field_begin("foo", TType::I64, 1);
            Serialize::write(&self.foo, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::Renaming {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_foo = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I64, 1) => field_foo = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                foo: field_foo.unwrap_or_default(),
            })
        }
    }


    impl Default for self::AnnotatedTypes {
        fn default() -> Self {
            Self {
                binary_field: Default::default(),
                list_field: Default::default(),
            }
        }
    }

    impl GetTType for self::AnnotatedTypes {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::AnnotatedTypes {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("AnnotatedTypes");
            p.write_field_begin("binary_field", TType::String, 1);
            Serialize::write(&self.binary_field, p);
            p.write_field_end();
            p.write_field_begin("list_field", TType::List, 2);
            Serialize::write(&self.list_field, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::AnnotatedTypes {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_binary_field = None;
            let mut field_list_field = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::String, 1) => field_binary_field = Some(Deserialize::read(p)?),
                    (TType::List, 2) => field_list_field = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                binary_field: field_binary_field.unwrap_or_default(),
                list_field: field_list_field.unwrap_or_default(),
            })
        }
    }


    impl Default for self::ForwardUsageRoot {
        fn default() -> Self {
            Self {
                ForwardUsageStruct: None,
                ForwardUsageByRef: None,
            }
        }
    }

    impl GetTType for self::ForwardUsageRoot {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::ForwardUsageRoot {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ForwardUsageRoot");
            if let Some(some) = &self.ForwardUsageStruct {
                p.write_field_begin("ForwardUsageStruct", TType::Struct, 1);
                Serialize::write(some, p);
                p.write_field_end();
            }
            if let Some(some) = &self.ForwardUsageByRef {
                p.write_field_begin("ForwardUsageByRef", TType::Struct, 2);
                Serialize::write(some, p);
                p.write_field_end();
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::ForwardUsageRoot {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_ForwardUsageStruct = None;
            let mut field_ForwardUsageByRef = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::Struct, 1) => field_ForwardUsageStruct = Some(Deserialize::read(p)?),
                    (TType::Struct, 2) => field_ForwardUsageByRef = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                ForwardUsageStruct: field_ForwardUsageStruct,
                ForwardUsageByRef: field_ForwardUsageByRef,
            })
        }
    }


    impl Default for self::ForwardUsageStruct {
        fn default() -> Self {
            Self {
                foo: None,
            }
        }
    }

    impl GetTType for self::ForwardUsageStruct {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::ForwardUsageStruct {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ForwardUsageStruct");
            if let Some(some) = &self.foo {
                p.write_field_begin("foo", TType::Struct, 1);
                Serialize::write(some, p);
                p.write_field_end();
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::ForwardUsageStruct {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_foo = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::Struct, 1) => field_foo = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                foo: field_foo,
            })
        }
    }


    impl Default for self::ForwardUsageByRef {
        fn default() -> Self {
            Self {
                foo: None,
            }
        }
    }

    impl GetTType for self::ForwardUsageByRef {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::ForwardUsageByRef {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ForwardUsageByRef");
            if let Some(some) = &self.foo {
                p.write_field_begin("foo", TType::Struct, 1);
                Serialize::write(some, p);
                p.write_field_end();
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::ForwardUsageByRef {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_foo = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::Struct, 1) => field_foo = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                foo: field_foo,
            })
        }
    }


    impl Default for self::NoexceptMoveEmpty {
        fn default() -> Self {
            Self {
            }
        }
    }

    impl GetTType for self::NoexceptMoveEmpty {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::NoexceptMoveEmpty {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("NoexceptMoveEmpty");
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::NoexceptMoveEmpty {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
            })
        }
    }


    impl Default for self::NoexceptMoveSimpleStruct {
        fn default() -> Self {
            Self {
                boolField: Default::default(),
            }
        }
    }

    impl GetTType for self::NoexceptMoveSimpleStruct {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::NoexceptMoveSimpleStruct {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("NoexceptMoveSimpleStruct");
            p.write_field_begin("boolField", TType::I64, 1);
            Serialize::write(&self.boolField, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::NoexceptMoveSimpleStruct {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_boolField = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I64, 1) => field_boolField = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                boolField: field_boolField.unwrap_or_default(),
            })
        }
    }


    impl Default for self::NoexceptMoveComplexStruct {
        fn default() -> Self {
            Self {
                MyBoolField: Default::default(),
                MyIntField: 12,
                MyStringField: "test".to_owned(),
                MyStringField2: Default::default(),
                MyBinaryField: Default::default(),
                MyBinaryField2: None,
                MyBinaryField3: Default::default(),
                MyBinaryListField4: Default::default(),
                MyMapEnumAndInt: {
                    let mut map = std::collections::BTreeMap::new();
                    map.insert(crate::types::MyEnumA::fieldA, "fieldA".to_owned());
                    map.insert(crate::types::MyEnumA::fieldC, "fieldC".to_owned());
                    map
                },
            }
        }
    }

    impl GetTType for self::NoexceptMoveComplexStruct {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::NoexceptMoveComplexStruct {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("NoexceptMoveComplexStruct");
            p.write_field_begin("MyBoolField", TType::Bool, 1);
            Serialize::write(&self.MyBoolField, p);
            p.write_field_end();
            p.write_field_begin("MyIntField", TType::I64, 2);
            Serialize::write(&self.MyIntField, p);
            p.write_field_end();
            p.write_field_begin("MyStringField", TType::String, 3);
            Serialize::write(&self.MyStringField, p);
            p.write_field_end();
            p.write_field_begin("MyStringField2", TType::String, 4);
            Serialize::write(&self.MyStringField2, p);
            p.write_field_end();
            p.write_field_begin("MyBinaryField", TType::String, 5);
            Serialize::write(&self.MyBinaryField, p);
            p.write_field_end();
            if let Some(some) = &self.MyBinaryField2 {
                p.write_field_begin("MyBinaryField2", TType::String, 6);
                Serialize::write(some, p);
                p.write_field_end();
            }
            p.write_field_begin("MyBinaryField3", TType::String, 7);
            Serialize::write(&self.MyBinaryField3, p);
            p.write_field_end();
            p.write_field_begin("MyBinaryListField4", TType::List, 8);
            Serialize::write(&self.MyBinaryListField4, p);
            p.write_field_end();
            p.write_field_begin("MyMapEnumAndInt", TType::Map, 9);
            Serialize::write(&self.MyMapEnumAndInt, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::NoexceptMoveComplexStruct {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_MyBoolField = None;
            let mut field_MyIntField = None;
            let mut field_MyStringField = None;
            let mut field_MyStringField2 = None;
            let mut field_MyBinaryField = None;
            let mut field_MyBinaryField2 = None;
            let mut field_MyBinaryField3 = None;
            let mut field_MyBinaryListField4 = None;
            let mut field_MyMapEnumAndInt = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::Bool, 1) => field_MyBoolField = Some(Deserialize::read(p)?),
                    (TType::I64, 2) => field_MyIntField = Some(Deserialize::read(p)?),
                    (TType::String, 3) => field_MyStringField = Some(Deserialize::read(p)?),
                    (TType::String, 4) => field_MyStringField2 = Some(Deserialize::read(p)?),
                    (TType::String, 5) => field_MyBinaryField = Some(Deserialize::read(p)?),
                    (TType::String, 6) => field_MyBinaryField2 = Some(Deserialize::read(p)?),
                    (TType::String, 7) => field_MyBinaryField3 = Some(Deserialize::read(p)?),
                    (TType::List, 8) => field_MyBinaryListField4 = Some(Deserialize::read(p)?),
                    (TType::Map, 9) => field_MyMapEnumAndInt = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                MyBoolField: field_MyBoolField.unwrap_or_default(),
                MyIntField: field_MyIntField.unwrap_or_else(|| 12),
                MyStringField: field_MyStringField.unwrap_or_else(|| "test".to_owned()),
                MyStringField2: field_MyStringField2.unwrap_or_default(),
                MyBinaryField: field_MyBinaryField.unwrap_or_default(),
                MyBinaryField2: field_MyBinaryField2,
                MyBinaryField3: field_MyBinaryField3.unwrap_or_default(),
                MyBinaryListField4: field_MyBinaryListField4.unwrap_or_default(),
                MyMapEnumAndInt: field_MyMapEnumAndInt.unwrap_or_else(|| {
                    let mut map = std::collections::BTreeMap::new();
                    map.insert(crate::types::MyEnumA::fieldA, "fieldA".to_owned());
                    map.insert(crate::types::MyEnumA::fieldC, "fieldC".to_owned());
                    map
                }),
            })
        }
    }



    impl Default for NoExceptMoveUnion {
        fn default() -> Self {
            Self::UnknownField(-1)
        }
    }

    impl GetTType for NoExceptMoveUnion {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for NoExceptMoveUnion {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("NoExceptMoveUnion");
            match self {
                NoExceptMoveUnion::string_field(inner) => {
                    p.write_field_begin("string_field", TType::String, 1);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                NoExceptMoveUnion::i32_field(inner) => {
                    p.write_field_begin("i32_field", TType::I32, 2);
                    Serialize::write(inner, p);
                    p.write_field_end();
                }
                NoExceptMoveUnion::UnknownField(x) => {
                    p.write_field_begin("UnknownField", TType::I32, *x as i16);
                    x.write(p);
                    p.write_field_end();
                }
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for NoExceptMoveUnion {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let _ = p.read_struct_begin(|_| ())?;
            let mut once = false;
            let mut alt = None;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32, once) {
                    (TType::Stop, _, _) => break,
                    (TType::String, 1, false) => {
                        once = true;
                        alt = Some(NoExceptMoveUnion::string_field(Deserialize::read(p)?));
                    }
                    (TType::I32, 2, false) => {
                        once = true;
                        alt = Some(NoExceptMoveUnion::i32_field(Deserialize::read(p)?));
                    }
                    (fty, _, false) => p.skip(fty)?,
                    (badty, badid, true) => return Err(From::from(::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                        format!(
                            "unwanted extra union {} field ty {:?} id {}",
                            "NoExceptMoveUnion",
                            badty,
                            badid,
                        ),
                    ))),
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(alt.unwrap_or_default())
        }
    }
}

pub mod dependencies {
    pub use include as include;
}

pub mod services {
    pub mod some_service {
        use fbthrift::{
            ApplicationException, ApplicationExceptionErrorCode, Deserialize, ProtocolReader,
            ProtocolWriter, Serialize, TType,
        };

        #[derive(Clone, Debug)]
        pub enum BounceMapExn {
            Success(include::types::SomeMap),
            ApplicationException(::fbthrift::types::ApplicationException),
        }

        impl From<ApplicationException> for BounceMapExn {
            fn from(exn: ApplicationException) -> Self {
                BounceMapExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for BounceMapExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for BounceMapExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("BounceMap");
                match self {
                    BounceMapExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Map,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    BounceMapExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for BounceMapExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Map, 0i32), false) => {
                            once = true;
                            alt = Some(BounceMapExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "BounceMapExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "BounceMapExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum BinaryKeyedMapExn {
            Success(std::collections::BTreeMap<crate::types::TBinary, i64>),
            ApplicationException(::fbthrift::types::ApplicationException),
        }

        impl From<ApplicationException> for BinaryKeyedMapExn {
            fn from(exn: ApplicationException) -> Self {
                BinaryKeyedMapExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for BinaryKeyedMapExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for BinaryKeyedMapExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("BinaryKeyedMap");
                match self {
                    BinaryKeyedMapExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Map,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    BinaryKeyedMapExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for BinaryKeyedMapExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Map, 0i32), false) => {
                            once = true;
                            alt = Some(BinaryKeyedMapExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "BinaryKeyedMapExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "BinaryKeyedMapExn"),
                    )
                    .into(),
                )
            }
        }
    }
}

pub mod client {
    use fbthrift::*;
    use std::marker::PhantomData;
    use std::sync::Arc;

    pub struct SomeServiceImpl<P, T> {
        transport: T,
        _phantom: PhantomData<fn() -> P>,
    }

    impl<P, T> SomeServiceImpl<P, T> {
        pub fn new(
            transport: T,
        ) -> Self {
            Self {
                transport,
                _phantom: PhantomData,
            }
        }

        pub fn transport(&self) -> &T {
            &self.transport
        }
    }

    pub trait SomeService: Send {
        fn bounce_map(
            &self,
            arg_m: &include::types::SomeMap,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<include::types::SomeMap, crate::errors::some_service::BounceMapError>> + Send + 'static>>;
        fn binary_keyed_map(
            &self,
            arg_r: &[i64],
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<std::collections::BTreeMap<crate::types::TBinary, i64>, crate::errors::some_service::BinaryKeyedMapError>> + Send + 'static>>;
    }

    impl<P, T> SomeService for SomeServiceImpl<P, T>
    where
        P: Protocol,
        T: Transport,
        P::Frame: Framing<DecBuf = FramingDecoded<T>>,
        ProtocolEncoded<P>: BufMutExt<Final = FramingEncodedFinal<T>>,
    {        fn bounce_map(
            &self,
            arg_m: &include::types::SomeMap,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<include::types::SomeMap, crate::errors::some_service::BounceMapError>> + Send + 'static>> {
            use futures::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "bounce_map",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_m", TType::Map, 1i16);
                    arg_m.write(p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(request)
                .map_err(From::from)
                .and_then(|reply| futures::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> std::result::Result<include::types::SomeMap, crate::errors::some_service::BounceMapError> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                let exn = crate::services::some_service::BounceMapExn::read(p)?;
                                match exn {
                                    crate::services::some_service::BounceMapExn::Success(x) => Ok(x),
                                    crate::services::some_service::BounceMapExn::ApplicationException(ae) => {
                                        Err(crate::errors::some_service::BounceMapError::ApplicationException(ae))
                                    }
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::some_service::BounceMapError::ApplicationException(ae))
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                let err = anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                Err(crate::errors::some_service::BounceMapError::ThriftError(err))
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn binary_keyed_map(
            &self,
            arg_r: &[i64],
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<std::collections::BTreeMap<crate::types::TBinary, i64>, crate::errors::some_service::BinaryKeyedMapError>> + Send + 'static>> {
            use futures::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "binary_keyed_map",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_r", TType::List, 1i16);
                    arg_r.write(p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(request)
                .map_err(From::from)
                .and_then(|reply| futures::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> std::result::Result<std::collections::BTreeMap<crate::types::TBinary, i64>, crate::errors::some_service::BinaryKeyedMapError> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                let exn = crate::services::some_service::BinaryKeyedMapExn::read(p)?;
                                match exn {
                                    crate::services::some_service::BinaryKeyedMapExn::Success(x) => Ok(x),
                                    crate::services::some_service::BinaryKeyedMapExn::ApplicationException(ae) => {
                                        Err(crate::errors::some_service::BinaryKeyedMapError::ApplicationException(ae))
                                    }
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::some_service::BinaryKeyedMapError::ApplicationException(ae))
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                let err = anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                Err(crate::errors::some_service::BinaryKeyedMapError::ThriftError(err))
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
    }

    impl<'a, T> SomeService for T
    where
        T: AsRef<dyn SomeService + 'a>,
        T: Send,
    {
        fn bounce_map(
            &self,
            arg_m: &include::types::SomeMap,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<include::types::SomeMap, crate::errors::some_service::BounceMapError>> + Send + 'static>> {
            self.as_ref().bounce_map(
                arg_m,
            )
        }
        fn binary_keyed_map(
            &self,
            arg_r: &[i64],
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<std::collections::BTreeMap<crate::types::TBinary, i64>, crate::errors::some_service::BinaryKeyedMapError>> + Send + 'static>> {
            self.as_ref().binary_keyed_map(
                arg_r,
            )
        }
    }

    pub struct make_SomeService;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = BuckGraphService::new(protocol, transport);
    /// ```
    impl dyn SomeService {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> Arc<impl SomeService + Send + 'static>
        where
            P: Protocol<Frame = T>,
            T: Transport,
        {
            let _ = protocol;
            Arc::new(SomeServiceImpl::<P, T>::new(transport))
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ClientFactory for make_SomeService {
        type Api = dyn SomeService + Send + Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> Arc<Self::Api>
        where
            P: Protocol<Frame = T>,
            T: Transport + Sync,
        {
            SomeService::new(protocol, transport)
        }
    }
}

pub mod server {
    use async_trait::async_trait;
    use fbthrift::*;
    use std::marker::PhantomData;

    #[async_trait]
    pub trait SomeService: Send + Sync + 'static {
        async fn bounce_map(
            &self,
            _m: include::types::SomeMap,
        ) -> Result<include::types::SomeMap, crate::services::some_service::BounceMapExn> {
            Err(crate::services::some_service::BounceMapExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "SomeService",
                    "bounce_map",
                ),
            ))
        }
        async fn binary_keyed_map(
            &self,
            _r: Vec<i64>,
        ) -> Result<std::collections::BTreeMap<crate::types::TBinary, i64>, crate::services::some_service::BinaryKeyedMapExn> {
            Err(crate::services::some_service::BinaryKeyedMapExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "SomeService",
                    "binary_keyed_map",
                ),
            ))
        }
    }

    #[derive(Clone, Debug)]
    pub struct SomeServiceProcessor<P, H, R> {
        service: H,
        supa: fbthrift::NullServiceProcessor<P, R>,
        _phantom: PhantomData<(P, H, R)>,
    }

    impl<P, H, R> SomeServiceProcessor<P, H, R>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: SomeService,
    {
        pub fn new(service: H) -> Self {
            Self {
                service,
                supa: fbthrift::NullServiceProcessor::new(),
                _phantom: PhantomData,
            }
        }

        pub fn into_inner(self) -> H {
            self.service
        }

        async fn handle_bounce_map<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut field_m = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::Map, 1) => field_m = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.bounce_map(
                field_m.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "bounce_map",
                        "m",
                    )
                })?,
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::some_service::BounceMapExn::Success(res)
                }
                Err(crate::services::some_service::BounceMapExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::some_service::BounceMapExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "bounce_map",
                    )
                }
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "bounce_map",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_binary_keyed_map<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut field_r = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::List, 1) => field_r = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.binary_keyed_map(
                field_r.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "binary_keyed_map",
                        "r",
                    )
                })?,
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::some_service::BinaryKeyedMapExn::Success(res)
                }
                Err(crate::services::some_service::BinaryKeyedMapExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::some_service::BinaryKeyedMapExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "binary_keyed_map",
                    )
                }
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "binary_keyed_map",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }
    }

    #[async_trait]
    impl<P, H, R> fbthrift::ServiceProcessor<P> for SomeServiceProcessor<P, H, R>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: SomeService,
        R: Send + Sync + 'static,
    {
        type RequestContext = R;

        #[inline]
        fn method_idx(&self, name: &[u8]) -> Result<usize, ApplicationException> {
            match name {
                b"bounce_map" => Ok(0usize),
                b"binary_keyed_map" => Ok(1usize),
                _ => Err(ApplicationException::unknown_method()),
            }
        }

        async fn handle_method(
            &self,
            idx: usize,
            p: &mut P::Deserializer,
            r: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            match idx {
                0usize => self.handle_bounce_map(p, r, seqid).await,
                1usize => self.handle_binary_keyed_map(p, r, seqid).await,
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "SomeServiceProcessor",
                    bad
                ),
            }
        }
    }

    #[async_trait]
    impl<P, H, R> ThriftService<P::Frame> for SomeServiceProcessor<P, H, R>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        P::Frame: Send + 'static,
        H: SomeService,
        R: Send + Sync + 'static,
    {
        type Handler = H;
        type RequestContext = R;

        async fn call(
            &self,
            req: ProtocolDecoded<P>,
            req_ctxt: &R,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut p = P::deserializer(req);
            let (idx, mty, seqid) = p.read_message_begin(|name| self.method_idx(name))?;
            if mty != MessageType::Call {
                return Err(From::from(ApplicationException::new(
                    ApplicationExceptionErrorCode::InvalidMessageType,
                    format!("message type {:?} not handled", mty)
                )));
            }
            let idx = match idx {
                Ok(idx) => idx,
                Err(_) => {
                    let cur = P::into_buffer(p).reset();
                    return self.supa.call(cur, req_ctxt).await;
                }
            };
            let res = self.handle_method(idx, &mut p, req_ctxt, seqid).await;
            p.read_message_end()?;
            match res {
                Ok(bytes) => Ok(bytes),
                Err(err) => match err.downcast_ref::<fbthrift::ProtocolError>() {
                    Some(fbthrift::ProtocolError::ApplicationException(ae)) => {
                        let res = serialize!(P, |p| {
                            fbthrift::protocol::write_message(
                                p,
                                "SomeServiceProcessor",
                                MessageType::Exception,
                                seqid,
                                |p| ae.write(p),
                            )
                        });
                        Ok(res)
                    }
                    _ => Err(err),
                },
            }
        }
    }

    pub fn make_SomeService_server<F, H, R>(
        proto: ProtocolID,
        handler: H,
    ) -> Result<Box<dyn ThriftService<F, Handler = H, RequestContext = R> + Send + 'static>, ApplicationException>
    where
        F: Framing + Send + Sync + 'static,
        H: SomeService,
        R: Send + Sync + 'static,
    {
        match proto {
            ProtocolID::BinaryProtocol => {
                Ok(Box::new(SomeServiceProcessor::<BinaryProtocol<F>, H, R>::new(handler)))
            }
            ProtocolID::CompactProtocol => {
                Ok(Box::new(SomeServiceProcessor::<CompactProtocol<F>, H, R>::new(handler)))
            }
            bad => Err(ApplicationException::invalid_protocol(bad)),
        }
    }
}

/// Client mocks. For every service, a struct mock::TheService that implements
/// client::TheService.
///
/// As an example of the generated API, for the following thrift service:
///
///     service MyService {
///         FunctionResponse myFunction(
///             1: FunctionRequest request,
///         ) throws {
///             1: StorageException s,
///             2: NotFoundException n,
///         ),
///
///         // other functions
///     }
///
///
/// we would end up with this mock object under crate::mock::MyService:
///
///     impl crate::client::MyService for MyService<'mock> {...}
///
///     pub struct MyService<'mock> {
///         pub myFunction: myFunction<'mock>,
///         // ...
///     }
///
///     impl dyn crate::client::MyService {
///         pub fn mock<'mock>() -> MyService<'mock>;
///     }
///
///     impl myFunction<'mock> {
///         // directly return the given success response
///         pub fn ret(&self, value: FunctionResponse);
///
///         // invoke closure to compute success response
///         pub fn mock(
///             &self,
///             mock: impl FnMut(FunctionRequest) -> FunctionResponse + Send + Sync + 'mock,
///         );
///
///         // return one of the function's declared exceptions
///         pub fn throw<E>(&self, exception: E)
///         where
///             E: Clone + Into<crate::services::MyService::MyFunctionExn> + Send + Sync + 'mock;
///     }
///
///     impl From<StorageException> for MyFunctionExn {...}
///     impl From<NotFoundException> for MyFunctionExn {...}
///
///
/// The intended usage from a test would be:
///
///     use std::sync::Arc;
///     use thrift_if::client::MyService;
///
///     #[test]
///     fn test_my_client() {
///         let mock = Arc::new(MyService::mock());
///
///         // directly return a success response
///         let resp = FunctionResponse {...};
///         mock.myFunction.ret(resp);
///
///         // or give a closure to compute the success response
///         mock.myFunction.mock(|request| FunctionResponse {...});
///
///         // or throw one of the function's exceptions
///         mock.myFunction.throw(StorageException::ItFailed);
///
///         let out = do_the_thing(mock).wait().unwrap();
///         assert!(out.what_i_expected());
///     }
///
///     fn do_the_thing(
///         client: Arc<dyn MyService + Send + Sync + 'static>,
///     ) -> impl Future<Item = Out> {...}
pub mod mock {
    use async_trait::async_trait;
    use std::marker::PhantomData;

    pub struct SomeService<'mock> {
        pub bounce_map: some_service::bounce_map<'mock>,
        pub binary_keyed_map: some_service::binary_keyed_map<'mock>,
        _marker: PhantomData<&'mock ()>,
    }

    impl dyn super::client::SomeService {
        pub fn mock<'mock>() -> SomeService<'mock> {
            SomeService {
                bounce_map: some_service::bounce_map::unimplemented(),
                binary_keyed_map: some_service::binary_keyed_map::unimplemented(),
                _marker: PhantomData,
            }
        }
    }

    #[async_trait]
    impl<'mock> super::client::SomeService for SomeService<'mock> {
        fn bounce_map(
            &self,
            arg_m: &include::types::SomeMap,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<include::types::SomeMap, crate::errors::some_service::BounceMapError>> + Send + 'static>> {
            let mut closure = self.bounce_map.closure.lock().unwrap();
            let closure: &mut dyn FnMut(include::types::SomeMap) -> _ = &mut **closure;
            Box::pin(futures::future::ready(closure(arg_m.clone())))
        }
        fn binary_keyed_map(
            &self,
            arg_r: &[i64],
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::result::Result<std::collections::BTreeMap<crate::types::TBinary, i64>, crate::errors::some_service::BinaryKeyedMapError>> + Send + 'static>> {
            let mut closure = self.binary_keyed_map.closure.lock().unwrap();
            let closure: &mut dyn FnMut(Vec<i64>) -> _ = &mut **closure;
            Box::pin(futures::future::ready(closure(arg_r.to_owned())))
        }
    }

    mod some_service {
        use std::sync::Mutex;

        pub struct bounce_map<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut(include::types::SomeMap) -> Result<
                    include::types::SomeMap,
                    crate::errors::some_service::BounceMapError,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> bounce_map<'mock> {
            pub fn unimplemented() -> Self {
                bounce_map {
                    closure: Mutex::new(Box::new(|_: include::types::SomeMap| panic!(
                        "{}::{} is not mocked",
                        "SomeService",
                        "bounce_map",
                    ))),
                }
            }

            pub fn ret(&self, value: include::types::SomeMap) {
                self.mock(move |_: include::types::SomeMap| value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut(include::types::SomeMap) -> include::types::SomeMap + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |m| Ok(mock(m)));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::errors::some_service::BounceMapError>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |_: include::types::SomeMap| Err(exception.clone().into()));
            }
        }

        pub struct binary_keyed_map<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut(Vec<i64>) -> Result<
                    std::collections::BTreeMap<crate::types::TBinary, i64>,
                    crate::errors::some_service::BinaryKeyedMapError,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> binary_keyed_map<'mock> {
            pub fn unimplemented() -> Self {
                binary_keyed_map {
                    closure: Mutex::new(Box::new(|_: Vec<i64>| panic!(
                        "{}::{} is not mocked",
                        "SomeService",
                        "binary_keyed_map",
                    ))),
                }
            }

            pub fn ret(&self, value: std::collections::BTreeMap<crate::types::TBinary, i64>) {
                self.mock(move |_: Vec<i64>| value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut(Vec<i64>) -> std::collections::BTreeMap<crate::types::TBinary, i64> + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |r| Ok(mock(r)));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::errors::some_service::BinaryKeyedMapError>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |_: Vec<i64>| Err(exception.clone().into()));
            }
        }
    }
}

pub mod errors {
    pub mod some_service {

        pub type BounceMapError = ::fbthrift::NonthrowingFunctionError;

        pub type BinaryKeyedMapError = ::fbthrift::NonthrowingFunctionError;

    }

}
